#include "x1b_A1B6_deg5_v1x.h" 
 

////////////////////////////////////////////////////////////////////////////////

namespace {

//----------------------------------------------------------------------------//

struct variable {
    double v_exp0(const double& r0, const double& k,
                 const double * p1, const double * p2 );
                 
    double v_exp(const double& k,
                 const double * p1, const double * p2 );

    double v_coul0(const double& r0, const double& k,
                  const double * p1, const double * p2 );
                  
    double v_coul(const double& k,
                  const double * p1, const double * p2 );
                  
    double v_gau0(const double& r0, const double& k,
                 const double * p1, const double * p2 );
                 
    void grads(const double& gg, double * grd1, double * grd2,
               const double * p1, const double * p2);

    double g[3]; // diff(value, p1 - p2)
};

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

double variable::v_gau0(const double& r0, const double& k,
                       const double * p1, const double * p2)
{
    g[0] = p1[0] - p2[0];
    g[1] = p1[1] - p2[1];
    g[2] = p1[2] - p2[2];

    const double r = std::sqrt(g[0]*g[0] + g[1]*g[1] + g[2]*g[2]);

    const double exp1 = std::exp(-k*(r0 - r)*(r0 - r));
    const double gg = 2*k*(r0 - r)*exp1/r;

    g[0] *= gg;
    g[1] *= gg;
    g[2] *= gg;

    return exp1;
}


//----------------------------------------------------------------------------//

void variable::grads(const double& gg, double * grd1, double * grd2, 
                     const double * p1, const double * p2) {
    for (size_t i = 0; i < 3 ; i++) {
        double d = gg*g[i];
        grd1[i] += d;
        grd2[i] -= d;
    }
}

//----------------------------------------------------------------------------//

double variable::v_exp0(const double& r0, const double& k,
                       const double * p1, const double * p2)
{
    g[0] = p1[0] - p2[0];
    g[1] = p1[1] - p2[1];
    g[2] = p1[2] - p2[2];

    const double r = std::sqrt(g[0]*g[0] + g[1]*g[1] + g[2]*g[2]);

    const double exp1 = std::exp(k*(r0 - r));
    const double gg = - k*exp1/r;

    g[0] *= gg;
    g[1] *= gg;
    g[2] *= gg;

    return exp1;
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

double variable::v_coul0(const double& r0, const double& k,
                        const double * p1, const double * p2)
{
    g[0] = p1[0] - p2[0];
    g[1] = p1[1] - p2[1];
    g[2] = p1[2] - p2[2];

    const double rsq = g[0]*g[0] + g[1]*g[1] + g[2]*g[2];
    const double r = std::sqrt(rsq);

    const double exp1 = std::exp(k*(r0 - r));
    const double rinv = 1.0/r;
    const double val = exp1*rinv;

    const double gg = - (k + rinv)*val*rinv;

    g[0] *= gg;
    g[1] *= gg;
    g[2] *= gg;

    return val;
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

double variable::v_exp(const double& k,
                       const double * p1, const double * p2)
{
    g[0] = p1[0] - p2[0];
    g[1] = p1[1] - p2[1];
    g[2] = p1[2] - p2[2];

    const double r = std::sqrt(g[0]*g[0] + g[1]*g[1] + g[2]*g[2]);

    const double exp1 = std::exp(k*(- r));
    const double gg = - k*exp1/r;

    g[0] *= gg;
    g[1] *= gg;
    g[2] *= gg;

    return exp1;
}


//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //


double variable::v_coul(const double& k,
                        const double * p1, const double * p2)
{
    g[0] = p1[0] - p2[0];
    g[1] = p1[1] - p2[1];
    g[2] = p1[2] - p2[2];

    const double rsq = g[0]*g[0] + g[1]*g[1] + g[2]*g[2];
    const double r = std::sqrt(rsq);

    const double exp1 = std::exp(k*(-r));
    const double rinv = 1.0/r;
    const double val = exp1*rinv;

    const double gg = - (k + rinv)*val*rinv;

    g[0] *= gg;
    g[1] *= gg;
    g[2] *= gg;

    return val;
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

struct monomer {
    double oh1[3];
    double oh2[3];

    void setup(const double* ohh,
               const double& in_plane_g, const double& out_of_plane_g,
               double x1[3], double x2[3]);

    void grads(const double* g1, const double* g2,
               const double& in_plane_g, const double& out_of_plane_g,
               double* grd) const;
};

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

void monomer::setup(const double* ohh,
                    const double& in_plane_g, const double& out_of_plane_g,
                    double* x1, double* x2)
{
    for (int i = 0; i < 3; ++i) {
        oh1[i] = ohh[i + 3] - ohh[i];
        oh2[i] = ohh[i + 6] - ohh[i];
    }

    const double v[3] = {
        oh1[1]*oh2[2] - oh1[2]*oh2[1],
        oh1[2]*oh2[0] - oh1[0]*oh2[2],
        oh1[0]*oh2[1] - oh1[1]*oh2[0]
    };

    for (int i = 0; i < 3; ++i) {
        const double in_plane = ohh[i] + 0.5*in_plane_g*(oh1[i] + oh2[i]);
        const double out_of_plane = out_of_plane_g*v[i];

        x1[i] = in_plane + out_of_plane;
        x2[i] = in_plane - out_of_plane;
    }
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

void monomer::grads(const double* g1, const double* g2,
                    const double& in_plane_g, const double& out_of_plane_g,
                    double* grd) const
{
    const double gm[3] = {
        g1[0] - g2[0],
        g1[1] - g2[1],
        g1[2] - g2[2]
    };

    const double t1[3] = {
        oh2[1]*gm[2] - oh2[2]*gm[1],
        oh2[2]*gm[0] - oh2[0]*gm[2],
        oh2[0]*gm[1] - oh2[1]*gm[0]
    };

    const double t2[3] = {
        oh1[1]*gm[2] - oh1[2]*gm[1],
        oh1[2]*gm[0] - oh1[0]*gm[2],
        oh1[0]*gm[1] - oh1[1]*gm[0]
    };

    for (int i = 0; i < 3; ++i) {
        const double gsum = g1[i] + g2[i];
        const double in_plane = 0.5*in_plane_g*gsum;

        const double gh1 = in_plane + out_of_plane_g*t1[i];
        const double gh2 = in_plane - out_of_plane_g*t2[i];

        grd[i + 0] += gsum - (gh1 + gh2); // O
        grd[i + 3] += gh1; // H1
        grd[i + 6] += gh2; // H2
    }
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

//struct vsites {
//    //void TwoParticleAverageSite() {}
//    //void ThreeParticleAverageSite() {}
//    void OutOfPlaneSite(const double& w12, const double& w13,
//                        const double& wcross, const double x1[3],
//                        const double y1[3], const double y2[3],
//                        double vs[3]);
//    //void LocalCoordinatesSite{}
//};
//
//void vsites::OutOfPlaneSite(const double& w12,
//                            const double& w13,
//                            const double& wcross,
//                            const double x1[3],
//                            const double y1[3],
//                            const double y2[3],
//                            double vs[3]) {
//    double r12[3], r13[3];
//
//    for (int i = 0; i < 3; ++i) {
//        r12[i] = y1[i] - x1[i];
//        r13[i] = y2[i] - x1[i];
//    }
//                            
//    double rc[3];
//    rc[0] = r12[1]*r13[2] - r12[2]*r13[1];
//    rc[1] = r12[2]*r13[0] - r12[0]*r13[2];
//    rc[2] = r12[0]*r13[1] - r12[1]*r13[0];
//    
//    vs[0] = x1[0] + w12 * r12[0] + w13 * r13[0] + wcross * rc[0];
//    vs[1] = x1[1] + w12 * r12[1] + w13 * r13[1] + wcross * rc[1];
//    vs[2] = x1[2] + w12 * r12[2] + w13 * r13[2] + wcross * rc[2];
//}

} // namespace

////////////////////////////////////////////////////////////////////////////////

namespace x1b_A1B6_deg5 {

//----------------------------------------------------------------------------//



x1b_A1B6_v1x::x1b_A1B6_v1x(std::string mon) {


    // =====>> SECTION CONSTRUCTOR <<=====
    // =>> PASTE RIGHT BELOW THIS LINE <== 
    if (mon == "pf6-") {
        coefficients = std::vector<double> { 
            -4.830390313787089e+02, // 0
             2.789689322901240e+02, // 1
             8.136554753294383e+02, // 2
            -4.335886599923440e+02, // 3
            -1.476920787601966e+02, // 4
            -9.640537758221701e+02, // 5
            -2.083171841802300e+02, // 6
            -1.038122982538369e+02, // 7
             2.025059670631033e+02, // 8
             8.372880603533254e+02, // 9
             1.502025059236634e+02, // 10
            -1.730776471894727e+02, // 11
            -7.280124019380187e+02, // 12
            -2.371390495615004e+02, // 13
            -2.416650898253209e+02, // 14
             1.612210342730686e+03, // 15
            -4.794894935324247e+02, // 16
             6.979769900989482e+02, // 17
            -4.464750504078482e+02, // 18
             8.067347147087571e+01, // 19
            -1.164005293998517e+02, // 20
            -1.760380219094311e+02, // 21
             4.282665574499705e+01, // 22
            -1.569939326160059e+02, // 23
            -1.556595496649062e+02, // 24
            -2.890144407501278e+02, // 25
             1.201915101134547e+02, // 26
             1.291022086858198e+02, // 27
             3.034969400663864e+02, // 28
            -1.754461171025489e+02, // 29
             2.077186288717481e+02, // 30
             3.574455550308107e+02, // 31
             8.343448696287064e+02, // 32
             1.653991513148579e+02, // 33
             1.120343219934210e+02, // 34
            -1.309605425358937e+02, // 35
            -2.434376273317512e+01, // 36
             1.210784865914344e+03, // 37
            -3.597415604853082e+02, // 38
             3.282408497229090e+01, // 39
             1.707578878691323e+02, // 40
            -2.417675123707375e+02, // 41
             1.403203793836142e+02, // 42
             2.210716606573425e+02, // 43
            -1.414022149998747e+02, // 44
             4.134744009000818e+01, // 45
             2.185409051964994e+02, // 46
             2.473430466808160e+03, // 47
            -4.279644145640290e+01, // 48
            -8.722380668548011e+01, // 49
             1.698768215978671e+03, // 50
            -2.241706480119792e+02, // 51
             1.242670805545075e+02, // 52
            -4.240217237500572e+02, // 53
            -1.003149509270513e+02, // 54
             8.406361120290970e+01, // 55
            -1.333596630379073e+03, // 56
            -1.116862661427677e+02, // 57
             2.251683102080824e+01, // 58
            -9.342060286673349e+01, // 59
             2.580029152092142e+02, // 60
            -1.130891040027412e+02, // 61
            -4.168473277653513e+01, // 62
             8.279788823028098e+01, // 63
             7.453002840473833e+01, // 64
             2.777797846067413e+02, // 65
            -4.664022622415487e+02, // 66
             7.722511931509790e+01, // 67
            -1.663609752944319e+03, // 68
            -2.850489248409923e+01, // 69
            -6.284266526166145e+02, // 70
             4.797927662226641e+02, // 71
            -2.966336685425397e+02, // 72
             7.065459365323804e+02, // 73
             7.757720655424382e+01, // 74
             3.782473762876045e+02, // 75
             1.977341744641849e+02, // 76
             2.799894180250204e+02, // 77
            -5.587099103036660e+02, // 78
             2.224246184006781e+02, // 79
             6.860733631998438e+01, // 80
            -4.895873365512800e+00, // 81
             3.522378836350995e+02, // 82
             2.718278830545331e+02, // 83
             1.185717917708379e+02, // 84
             2.938815485851499e+02, // 85
             9.843805794564776e+01, // 86
            -2.030065683513968e+01, // 87
             1.102429280853728e+02, // 88
             2.530749994814182e+02, // 89
             9.999785703195076e+01, // 90
             2.347821631633919e+02, // 91
             4.656465599736327e+02, // 92
             1.693317286294144e+02, // 93
            -3.568671872386478e+02, // 94
             2.414468349498232e+01, // 95
            -4.379198300360933e+02, // 96
             5.978402597472153e+00, // 97
             2.871442545376283e+01, // 98
            -1.079272830382852e+02, // 99
             9.036638451477701e+01, // 100
             7.208115383581827e+01, // 101
             2.400901879714586e+02, // 102
             1.511183057592708e+02, // 103
             1.163077214393135e+02, // 104
            -5.450464264428817e+02, // 105
             1.013746262304999e+03, // 106
             3.809112736759233e+02, // 107
             4.389008992410147e+02, // 108
             9.537415102537091e+01, // 109
             3.357984207259778e+02, // 110
             3.210803212619545e+01, // 111
            -9.880641932599266e+01, // 112
            -3.859779367410356e+01, // 113
            -7.153936493001422e-01, // 114
             3.270619463458069e+03, // 115
             6.683120668956886e+02, // 116
             8.101159225356604e+02, // 117
            -7.136839255396352e+01, // 118
            -2.282161770415915e+02, // 119
             1.458337555877324e+02, // 120
             4.121717828763316e+02, // 121
            -1.227694702846741e+02, // 122
             7.548320920549145e+02, // 123
            -2.123435743133692e+02, // 124
            -5.087816536136100e+01, // 125
             7.653486667573732e+02, // 126
            -7.905978304415612e+01, // 127
             7.508167421682705e+01, // 128
            -5.967563761575441e+01, // 129
            -1.769957174972066e+02, // 130
             3.807432345764396e+01, // 131
            -3.529133277925989e+02, // 132
            -2.861909201095245e+01, // 133
             3.012122201426133e+01, // 134
             5.294812381502207e+01, // 135
             1.426402242726989e+02, // 136
            -2.522468422188699e+01, // 137
            -1.237400785786183e+02, // 138
             2.850374206049855e+03, // 139
             3.000079807533286e+02, // 140
             9.178114592608750e+01, // 141
            -1.447099777339031e+02, // 142
            -2.419795430863096e+00, // 143
             1.688793815782547e+03, // 144
             2.025576498028646e+02, // 145
             4.084717720287779e+02, // 146
            -2.595767866904691e+02, // 147
             1.244814933212290e+01, // 148
             7.583104686978889e+01, // 149
            -3.447139876246137e+02, // 150
            -5.941804911517681e+01, // 151
             4.834751970418699e+01, // 152
            -1.240520225415838e+02, // 153
             8.476376027008369e+00, // 154
             1.217865911830973e+01, // 155
             2.693955755050281e+03, // 156
            -3.978130083916682e+02, // 157
             5.476935048925421e+02, // 158
            -4.256365292404166e+02, // 159
            -2.193479337675155e+02, // 160
            -1.931006534501407e+02, // 161
            -1.872872891300052e+02, // 162
             5.125261950904430e+02, // 163
            -2.185636952599231e+02, // 164
            -5.454019150218977e+02, // 165
            -1.208399123873231e+02, // 166
             4.740431595807131e+02, // 167
             4.026452295872038e+01, // 168
            -4.209138339871081e+02, // 169
             5.921153606462360e+02, // 170
             1.079190317298943e+03, // 171
            -1.093688497658979e+02, // 172
             3.064801396928648e+03, // 173
            -5.348117962658682e+02, // 174
            -6.977480870926308e+01, // 175
            -1.000043483645953e+02, // 176
            -3.916138098895544e+02, // 177
            -2.135139105391505e+02, // 178
            -3.652950111298179e+02, // 179
             1.920646577590641e+02, // 180
             1.123892305364819e+02, // 181
            -5.569627053119385e+02, // 182
             6.118164817791905e+01, // 183
            -1.232669157754376e+02, // 184
            -2.412143535855732e+02, // 185
             1.470628481014586e+02, // 186
             4.905566815246662e+01, // 187
             3.829128202388886e+03, // 188
            -4.458936657431743e+02, // 189
            -3.046935854139738e+02, // 190
             2.599997857654408e+02, // 191
             4.039020685807621e+01, // 192
            -1.020484970526590e+03, // 193
            -5.416296359194669e+02, // 194
            -5.705072488263000e+02, // 195
             2.105254403467492e+02, // 196
            -9.988426693544784e+01, // 197
            -1.600517761069738e+02, // 198
            -3.958620328560364e+00, // 199
            -3.601613519900864e+02, // 200
             4.113259835721541e+02, // 201
            -2.600502120788570e+01, // 202
             2.960680391073938e+02, // 203
            -4.625142445441209e+02, // 204
             2.463918134907605e+02, // 205
             5.644644541556195e+02, // 206
             9.643352269977134e+01, // 207
             6.760221203322965e+01, // 208
            -4.891083652383406e+02, // 209
             3.458913145282392e+02, // 210
            -2.133883068509969e+02, // 211
             1.213140233508745e+03, // 212
             1.569638232449149e+02, // 213
             6.342435090051318e+02, // 214
            -6.578706407398990e+02, // 215
             5.457012773032960e+02, // 216
             3.211353158291553e+02, // 217
            -8.524767773099692e+02, // 218
             3.805152134225624e+00, // 219
             2.121666261619627e+03, // 220
            -1.460483248207191e+02, // 221
             4.017973377476732e+01, // 222
             2.133236198053411e+03, // 223
            -5.533310645182669e+02, // 224
            -2.873776663594353e+02, // 225
            -1.991787480007651e+02, // 226
             4.113115818977335e+00, // 227
            -1.167764949294488e+02, // 228
             1.416014379097306e+03, // 229
            -3.454353394736437e+02, // 230
            -2.779316763217175e+02, // 231
             6.486320480913866e+00, // 232
            -1.080400015882388e+02, // 233
            -1.880674742433754e+02, // 234
             1.171081096940986e+02, // 235
             1.348602957135668e+02, // 236
            -7.715356626495224e+02, // 237
             5.661733297606432e+00, // 238
             3.180558938086183e+02, // 239
            -1.977188284079368e+02, // 240
            -2.070938630548497e+02, // 241
            -2.361225358523587e+02, // 242
            -1.076166346638152e+03, // 243
             4.061601643302067e+02, // 244
             3.361999394961621e+02, // 245
            -7.492353033167784e+02, // 246
            -3.060550910534759e+02, // 247
            -7.755965682430424e+01, // 248
             2.834492569056241e+02, // 249
            -5.766240499797279e+02, // 250
             4.498203662192755e+01, // 251
             1.029562614863769e+02, // 252
             4.294157179082065e+02, // 253
             3.578432629167924e+02, // 254
            -5.629659644358989e+01, // 255
            -8.449076445543967e+01, // 256
            -1.246018072456307e+03, // 257
             1.793813394752802e+02, // 258
            -3.216111646032642e+02, // 259
            -4.208682293560138e+00, // 260
             7.365335125449975e+01, // 261
             6.167546931587831e+02, // 262
            -4.205068407368204e+01, // 263
             3.776053920901294e+02, // 264
            -5.397228724342310e+02, // 265
             9.667037500628719e+01, // 266
            -7.964040426186965e+02, // 267
             3.100187281609679e+02, // 268
            -1.170312533700503e+02, // 269
            -6.919809176680485e+02, // 270
            -7.302346926225077e+01, // 271
             5.729723715501452e+02, // 272
             3.021814023512233e+02, // 273
             2.123741361512669e+02, // 274
            -1.267593318964720e+02, // 275
             3.144212663330618e+02, // 276
             2.724985403826539e+02, // 277
             1.023212978151845e+02, // 278
             2.209223642790597e+02, // 279
             1.336603624732210e+02, // 280
            -4.599494418906273e+01, // 281
            -1.616668004031690e+02, // 282
            -1.832487781797390e+01, // 283
             2.608567780133315e+02, // 284
            -1.417494606668972e+02, // 285
             4.391869332233372e+02, // 286
             4.759884319467134e+01, // 287
             1.200164279780986e+02, // 288
             1.633744264868201e+02, // 289
            -8.079028322853170e+02, // 290
            -3.060892197733579e+02, // 291
            -4.653292642096126e+02, // 292
             3.322020974116291e+00, // 293
            -1.061845170244909e+03, // 294
            -1.247657213812504e+02, // 295
             1.108065475896430e+02, // 296
            -7.968611374825792e+01, // 297
            -2.149537074964400e+02, // 298
             1.332260576484056e+02, // 299
            -1.275841721765696e+02, // 300
            -2.093516717490604e+01, // 301
            -6.150637268315773e+01, // 302
            -3.012060006078801e+02, // 303
            -2.075602237242450e+02, // 304
            -8.078749487843055e+02, // 305
             6.724282813075918e+01, // 306
            -5.499075823545448e+02, // 307
             5.352564132594857e+02, // 308
            -8.570737783640894e+01, // 309
             8.459489639589241e+01, // 310
            -4.130056047891869e+02, // 311
            -5.713297423781743e+02, // 312
            -2.941049983175060e+02, // 313
             5.421681426059750e+02, // 314
            -2.143817375651038e+02, // 315
             1.209264523780109e+02, // 316
            -2.065853196054194e+02, // 317
            -9.190353594124274e+01, // 318
             9.949143210186170e+01, // 319
            -6.336675415283402e+01, // 320
             3.385313471170134e+01, // 321
             2.129147907746785e+02, // 322
             4.054664921656649e+01, // 323
             4.685432405346872e+01, // 324
             2.238735251232749e+01, // 325
            -7.510322170889656e+01, // 326
            -1.186323560914322e+02, // 327
             4.280367977197295e+01, // 328
            -1.966473821574105e+01, // 329
            -1.376063403457292e+02, // 330
             7.996251862353640e+01, // 331
             1.124845874093130e+02, // 332
            -5.439811740024832e+02, // 333
            -1.178619901711867e+02, // 334
            -7.016102473793595e+02, // 335
            -3.109702516536025e+02, // 336
            -4.784601714922786e+00, // 337
             1.747210646922122e+02, // 338
             8.339341800882565e+01, // 339
             2.105383666699561e+02, // 340
             1.433789591130310e+02, // 341
             2.401461125715816e+02, // 342
            -7.234445978727483e+02, // 343
             2.148083364057190e+02, // 344
             5.288943627900035e+02, // 345
             6.636593836370549e+02, // 346
             3.956765486953931e+01, // 347
             1.970890214043654e+02, // 348
             9.432543425102332e+01, // 349
             9.578447771332232e+01, // 350
             7.845708226098310e+02, // 351
             1.065487059714584e+02}; // 352

    m_k_BB =  4.171113347808463e-01; // A^(-1))
    m_k_AB =  1.251345554110705e+00; // A^(-1))

    } // end if mon == "pf6-"

}

//----------------------------------------------------------------------------//

std::vector<double> x1b_A1B6_v1x::eval(const double* xyz, const size_t nmon) const
{

    std::vector<double> energies(nmon,0.0);

    for (size_t j = 0; j < nmon; j++) {

        double xcrd[21]; // coordinates of real sites ONLY

        std::copy(xyz + j*21, xyz + (j+1)*21, xcrd);
    
        double v[21];
    
        const double* A_1_a= xcrd + 0;
        const double* B_1_a= xcrd + 3;
        const double* B_2_a= xcrd + 6;
        const double* B_3_a= xcrd + 9;
        const double* B_4_a= xcrd + 12;
        const double* B_5_a= xcrd + 15;
        const double* B_6_a= xcrd + 18;



        variable vr[21];

        v[0]  = vr[0].v_exp(m_k_BB, B_1_a, B_2_a);
        v[1]  = vr[1].v_exp(m_k_BB, B_1_a, B_3_a);
        v[2]  = vr[2].v_exp(m_k_BB, B_1_a, B_4_a);
        v[3]  = vr[3].v_exp(m_k_BB, B_1_a, B_5_a);
        v[4]  = vr[4].v_exp(m_k_BB, B_1_a, B_6_a);
        v[5]  = vr[5].v_exp(m_k_BB, B_2_a, B_3_a);
        v[6]  = vr[6].v_exp(m_k_BB, B_2_a, B_4_a);
        v[7]  = vr[7].v_exp(m_k_BB, B_2_a, B_5_a);
        v[8]  = vr[8].v_exp(m_k_BB, B_2_a, B_6_a);
        v[9]  = vr[9].v_exp(m_k_BB, B_3_a, B_4_a);
        v[10]  = vr[10].v_exp(m_k_BB, B_3_a, B_5_a);
        v[11]  = vr[11].v_exp(m_k_BB, B_3_a, B_6_a);
        v[12]  = vr[12].v_exp(m_k_BB, B_4_a, B_5_a);
        v[13]  = vr[13].v_exp(m_k_BB, B_4_a, B_6_a);
        v[14]  = vr[14].v_exp(m_k_BB, B_5_a, B_6_a);
        v[15]  = vr[15].v_exp(m_k_AB, A_1_a, B_1_a);
        v[16]  = vr[16].v_exp(m_k_AB, A_1_a, B_2_a);
        v[17]  = vr[17].v_exp(m_k_AB, A_1_a, B_3_a);
        v[18]  = vr[18].v_exp(m_k_AB, A_1_a, B_4_a);
        v[19]  = vr[19].v_exp(m_k_AB, A_1_a, B_5_a);
        v[20]  = vr[20].v_exp(m_k_AB, A_1_a, B_6_a);

     
    
        energies[j] = polynomial::eval(coefficients.data(), v);

    }

    return energies;
}

std::vector<double> x1b_A1B6_v1x::eval(const double* xyz, 
                double * grad, const size_t nmon) const
{

    std::vector<double> energies(nmon,0.0);

    for (size_t j = 0; j < nmon; j++) {

        double xcrd[21]; // coordinates of real sites ONLY

        std::copy(xyz + j*21, xyz + (j+1)*21, xcrd);

        double v[21];
    
        const double* A_1_a= xcrd + 0;
        const double* B_1_a= xcrd + 3;
        const double* B_2_a= xcrd + 6;
        const double* B_3_a= xcrd + 9;
        const double* B_4_a= xcrd + 12;
        const double* B_5_a= xcrd + 15;
        const double* B_6_a= xcrd + 18;



        variable vr[21];

        v[0]  = vr[0].v_exp(m_k_BB, B_1_a, B_2_a);
        v[1]  = vr[1].v_exp(m_k_BB, B_1_a, B_3_a);
        v[2]  = vr[2].v_exp(m_k_BB, B_1_a, B_4_a);
        v[3]  = vr[3].v_exp(m_k_BB, B_1_a, B_5_a);
        v[4]  = vr[4].v_exp(m_k_BB, B_1_a, B_6_a);
        v[5]  = vr[5].v_exp(m_k_BB, B_2_a, B_3_a);
        v[6]  = vr[6].v_exp(m_k_BB, B_2_a, B_4_a);
        v[7]  = vr[7].v_exp(m_k_BB, B_2_a, B_5_a);
        v[8]  = vr[8].v_exp(m_k_BB, B_2_a, B_6_a);
        v[9]  = vr[9].v_exp(m_k_BB, B_3_a, B_4_a);
        v[10]  = vr[10].v_exp(m_k_BB, B_3_a, B_5_a);
        v[11]  = vr[11].v_exp(m_k_BB, B_3_a, B_6_a);
        v[12]  = vr[12].v_exp(m_k_BB, B_4_a, B_5_a);
        v[13]  = vr[13].v_exp(m_k_BB, B_4_a, B_6_a);
        v[14]  = vr[14].v_exp(m_k_BB, B_5_a, B_6_a);
        v[15]  = vr[15].v_exp(m_k_AB, A_1_a, B_1_a);
        v[16]  = vr[16].v_exp(m_k_AB, A_1_a, B_2_a);
        v[17]  = vr[17].v_exp(m_k_AB, A_1_a, B_3_a);
        v[18]  = vr[18].v_exp(m_k_AB, A_1_a, B_4_a);
        v[19]  = vr[19].v_exp(m_k_AB, A_1_a, B_5_a);
        v[20]  = vr[20].v_exp(m_k_AB, A_1_a, B_6_a);

     
    
        double g[21];
        
        energies[j] = polynomial::eval(coefficients.data(), v, g);
        
        double xgrd[21];
        std::fill(xgrd, xgrd + 21, 0.0);

        double* A_1_a_g= xgrd + 0;
        double* B_1_a_g= xgrd + 3;
        double* B_2_a_g= xgrd + 6;
        double* B_3_a_g= xgrd + 9;
        double* B_4_a_g= xgrd + 12;
        double* B_5_a_g= xgrd + 15;
        double* B_6_a_g= xgrd + 18;


        vr[0].grads(g[0], B_1_a_g, B_2_a_g, B_1_a, B_2_a);
        vr[1].grads(g[1], B_1_a_g, B_3_a_g, B_1_a, B_3_a);
        vr[2].grads(g[2], B_1_a_g, B_4_a_g, B_1_a, B_4_a);
        vr[3].grads(g[3], B_1_a_g, B_5_a_g, B_1_a, B_5_a);
        vr[4].grads(g[4], B_1_a_g, B_6_a_g, B_1_a, B_6_a);
        vr[5].grads(g[5], B_2_a_g, B_3_a_g, B_2_a, B_3_a);
        vr[6].grads(g[6], B_2_a_g, B_4_a_g, B_2_a, B_4_a);
        vr[7].grads(g[7], B_2_a_g, B_5_a_g, B_2_a, B_5_a);
        vr[8].grads(g[8], B_2_a_g, B_6_a_g, B_2_a, B_6_a);
        vr[9].grads(g[9], B_3_a_g, B_4_a_g, B_3_a, B_4_a);
        vr[10].grads(g[10], B_3_a_g, B_5_a_g, B_3_a, B_5_a);
        vr[11].grads(g[11], B_3_a_g, B_6_a_g, B_3_a, B_6_a);
        vr[12].grads(g[12], B_4_a_g, B_5_a_g, B_4_a, B_5_a);
        vr[13].grads(g[13], B_4_a_g, B_6_a_g, B_4_a, B_6_a);
        vr[14].grads(g[14], B_5_a_g, B_6_a_g, B_5_a, B_6_a);
        vr[15].grads(g[15], A_1_a_g, B_1_a_g, A_1_a, B_1_a);
        vr[16].grads(g[16], A_1_a_g, B_2_a_g, A_1_a, B_2_a);
        vr[17].grads(g[17], A_1_a_g, B_3_a_g, A_1_a, B_3_a);
        vr[18].grads(g[18], A_1_a_g, B_4_a_g, A_1_a, B_4_a);
        vr[19].grads(g[19], A_1_a_g, B_5_a_g, A_1_a, B_5_a);
        vr[20].grads(g[20], A_1_a_g, B_6_a_g, A_1_a, B_6_a);


        for (size_t i = 0; i < 21; i++)
            grad[i + j*21] = xgrd[i];

    }

    return energies;
}

} // namespace x1b_A1B6_deg5

////////////////////////////////////////////////////////////////////////////////

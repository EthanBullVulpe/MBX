

#include "x2b_A1B2_C1D3_deg5_v1x.h" 
 

////////////////////////////////////////////////////////////////////////////////

namespace {

struct variable {
    double v_exp0(const double& r0, const double& k,
                 const double * p1, const double * p2 );
                 
    double v_exp(const double& k,
                 const double * p1, const double * p2 );

    double v_coul0(const double& r0, const double& k,
                  const double * p1, const double * p2 );
                  
    double v_coul(const double& k,
                  const double * p1, const double * p2 );

    double v_gau0(const double& r0, const double& k,
                 const double * p1, const double * p2 );
                  
    void grads(const double& gg, double * grd1, double * grd2,
               const double * p1, const double * p2);

    double g[3]; // diff(value, p1 - p2)
};

//----------------------------------------------------------------------------//

double variable::v_gau0(const double& r0, const double& k,
                       const double * p1, const double * p2)
{
    g[0] = p1[0] - p2[0];
    g[1] = p1[1] - p2[1];
    g[2] = p1[2] - p2[2];

    const double r = std::sqrt(g[0]*g[0] + g[1]*g[1] + g[2]*g[2]);

    const double exp1 = std::exp(-k*(r0 - r)*(r0 - r));
    const double gg = 2*k*(r0 - r)*exp1/r;

    g[0] *= gg;
    g[1] *= gg;
    g[2] *= gg;

    return exp1;
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

double variable::v_exp0(const double& r0, const double& k,
                       const double * p1, const double * p2)
{
    g[0] = p1[0] - p2[0];
    g[1] = p1[1] - p2[1];
    g[2] = p1[2] - p2[2];

    const double r = std::sqrt(g[0]*g[0] + g[1]*g[1] + g[2]*g[2]);

    const double exp1 = std::exp(k*(r0 - r));
    const double gg = - k*exp1/r;

    g[0] *= gg;
    g[1] *= gg;
    g[2] *= gg;

    return exp1;
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

double variable::v_exp(const double& k,
                       const double * p1, const double * p2)
{
    g[0] = p1[0] - p2[0];
    g[1] = p1[1] - p2[1];
    g[2] = p1[2] - p2[2];

    const double r = std::sqrt(g[0]*g[0] + g[1]*g[1] + g[2]*g[2]);

    const double exp1 = std::exp(k*(- r));
    const double gg = - k*exp1/r;

    g[0] *= gg;
    g[1] *= gg;
    g[2] *= gg;

    return exp1;
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //


double variable::v_coul(const double& k,
                        const double * p1, const double * p2)
{
    g[0] = p1[0] - p2[0];
    g[1] = p1[1] - p2[1];
    g[2] = p1[2] - p2[2];

    const double rsq = g[0]*g[0] + g[1]*g[1] + g[2]*g[2];
    const double r = std::sqrt(rsq);

    const double exp1 = std::exp(k*(-r));
    const double rinv = 1.0/r;
    const double val = exp1*rinv;

    const double gg = - (k + rinv)*val*rinv;

    g[0] *= gg;
    g[1] *= gg;
    g[2] *= gg;

    return val;
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

double variable::v_coul0(const double& r0, const double& k,
                        const double * p1, const double * p2)
{
    g[0] = p1[0] - p2[0];
    g[1] = p1[1] - p2[1];
    g[2] = p1[2] - p2[2];

    const double rsq = g[0]*g[0] + g[1]*g[1] + g[2]*g[2];
    const double r = std::sqrt(rsq);

    const double exp1 = std::exp(k*(r0 - r));
    const double rinv = 1.0/r;
    const double val = exp1*rinv;

    const double gg = - (k + rinv)*val*rinv;

    g[0] *= gg;
    g[1] *= gg;
    g[2] *= gg;

    return val;
}

//----------------------------------------------------------------------------//

void variable::grads(const double& gg, double * grd1, double * grd2, 
                     const double * p1, const double * p2) {
    for (size_t i = 0; i < 3 ; i++) {
        double d = gg*g[i];
        grd1[i] += d;
        grd2[i] -= d;
    }
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

struct monomer {
    double oh1[3];
    double oh2[3];

    void setup(const double* ohh,
               const double& in_plane_g, const double& out_of_plane_g,
               double x1[3], double x2[3]);

    void grads(const double* g1, const double* g2,
               const double& in_plane_g, const double& out_of_plane_g,
               double* grd) const;
};

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

void monomer::setup(const double* ohh,
                    const double& in_plane_g, const double& out_of_plane_g,
                    double* x1, double* x2)
{
    for (int i = 0; i < 3; ++i) {
        oh1[i] = ohh[i + 3] - ohh[i];
        oh2[i] = ohh[i + 6] - ohh[i];
    }

    const double v[3] = {
        oh1[1]*oh2[2] - oh1[2]*oh2[1],
        oh1[2]*oh2[0] - oh1[0]*oh2[2],
        oh1[0]*oh2[1] - oh1[1]*oh2[0]
    };

    for (int i = 0; i < 3; ++i) {
        const double in_plane = ohh[i] + 0.5*in_plane_g*(oh1[i] + oh2[i]);
        const double out_of_plane = out_of_plane_g*v[i];

        x1[i] = in_plane + out_of_plane;
        x2[i] = in_plane - out_of_plane;
    }
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

void monomer::grads(const double* g1, const double* g2,
                    const double& in_plane_g, const double& out_of_plane_g,
                    double* grd) const
{
    const double gm[3] = {
        g1[0] - g2[0],
        g1[1] - g2[1],
        g1[2] - g2[2]
    };

    const double t1[3] = {
        oh2[1]*gm[2] - oh2[2]*gm[1],
        oh2[2]*gm[0] - oh2[0]*gm[2],
        oh2[0]*gm[1] - oh2[1]*gm[0]
    };

    const double t2[3] = {
        oh1[1]*gm[2] - oh1[2]*gm[1],
        oh1[2]*gm[0] - oh1[0]*gm[2],
        oh1[0]*gm[1] - oh1[1]*gm[0]
    };

    for (int i = 0; i < 3; ++i) {
        const double gsum = g1[i] + g2[i];
        const double in_plane = 0.5*in_plane_g*gsum;

        const double gh1 = in_plane + out_of_plane_g*t1[i];
        const double gh2 = in_plane - out_of_plane_g*t2[i];

        grd[i + 0] += gsum - (gh1 + gh2); // O
        grd[i + 3] += gh1; // H1
        grd[i + 6] += gh2; // H2
    }
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

//struct vsites {
//    //void TwoParticleAverageSite() {}
//    //void ThreeParticleAverageSite() {}
//    void OutOfPlaneSite(const double& w12, const double& w13,
//                        const double& wcross, const double x1[3],
//                        const double y1[3], const double y2[3],
//                        double vs[3]);
//    //void LocalCoordinatesSite{}
//};
//
//void vsites::OutOfPlaneSite(const double& w12,
//                            const double& w13,
//                            const double& wcross,
//                            const double x1[3],
//                            const double y1[3],
//                            const double y2[3],
//                            double vs[3]) {
//    double r12[3], r13[3];
//
//    for (int i = 0; i < 3; ++i) {
//        r12[i] = y1[i] - x1[i];
//        r13[i] = y2[i] - x1[i];
//    }
//                            
//    double rc[3];
//    rc[0] = r12[1]*r13[2] - r12[2]*r13[1];
//    rc[1] = r12[2]*r13[0] - r12[0]*r13[2];
//    rc[2] = r12[0]*r13[1] - r12[1]*r13[0];
//    
//    vs[0] = x1[0] + w12 * r12[0] + w13 * r13[0] + wcross * rc[0];
//    vs[1] = x1[1] + w12 * r12[1] + w13 * r13[1] + wcross * rc[1];
//    vs[2] = x1[2] + w12 * r12[2] + w13 * r13[2] + wcross * rc[2];
//}

} // namespace

////////////////////////////////////////////////////////////////////////////////

namespace x2b_A1B2_C1D3_deg5 {

//----------------------------------------------------------------------------//

x2b_A1B2_C1D3_v1x::x2b_A1B2_C1D3_v1x(std::string mon1, std::string mon2) {

    // =====>> SECTION CONSTRUCTOR <<=====
    // =>> PASTE RIGHT BELOW THIS LINE <==
    if (mon1 == "h2o" && mon2  == "no3") {
        coefficients = std::vector<double> {
            -3.358767999463007e+04, // 0
             1.366352757651116e+05, // 1
            -6.567607002034520e+06, // 2
             2.606281445853593e+04, // 3
             1.192969474212286e+07, // 4
             7.727434321337433e+05, // 5
            -1.188992196739225e+06, // 6
             3.110441435493233e+07, // 7
            -1.585562334902045e+06, // 8
             1.112154396981193e+09, // 9
            -8.332414968426026e+05, // 10
            -1.893375044171755e+05, // 11
            -8.684965132179824e+04, // 12
             7.405938906316200e+05, // 13
             3.915581971406618e+06, // 14
            -1.581495487968306e+07, // 15
             1.411751840846454e+07, // 16
            -3.116275568986891e+05, // 17
             5.499325964141443e+05, // 18
            -4.934848901770321e+05, // 19
            -1.368208743689656e+05, // 20
             2.164846722783015e+07, // 21
            -3.097709168629413e+06, // 22
            -4.407464613112903e+05, // 23
             1.716070761741195e+08, // 24
            -4.258008760107636e+07, // 25
             2.163068683716620e+07, // 26
             1.756347974414553e+06, // 27
            -2.645718239238902e+06, // 28
            -1.430035885281704e+05, // 29
            -1.305456154830430e+06, // 30
            -1.400157232172501e+05, // 31
             4.329348091440255e+06, // 32
            -9.537092327739699e+05, // 33
            -7.204340647116603e+06, // 34
            -4.231627708413564e+09, // 35
             6.888005533506605e+06, // 36
            -4.952641717631253e+05, // 37
             9.902719308242416e+07, // 38
            -5.718929574145601e+06, // 39
             8.769135485664172e+06, // 40
             6.115306706170213e+06, // 41
             6.280605214546418e+06, // 42
            -1.029761937294019e+09, // 43
             2.929956693596189e+06, // 44
            -3.597867055432587e+06, // 45
            -5.906349908054341e+06, // 46
            -1.472553692555874e+05, // 47
            -1.519639448202315e+07, // 48
             4.845512154270503e+06, // 49
            -1.129125039123948e+06, // 50
            -5.721031523977745e+07, // 51
            -1.162965313793087e+05, // 52
             4.791461674627194e+05, // 53
            -1.321407411628319e+08, // 54
            -5.233686229946748e+06, // 55
             4.993829282767782e+08, // 56
            -6.653929788692961e+07, // 57
            -7.794479015386263e+07, // 58
            -1.112283927420373e+06, // 59
             1.224210738813647e+06, // 60
             2.469010589197660e+07, // 61
             1.422216447456708e+06, // 62
             8.554930964797977e+06, // 63
            -4.285872874612867e+06, // 64
             4.587994081206070e+07, // 65
             1.388068919665223e+06, // 66
            -1.628064528731681e+09, // 67
            -1.432710184784555e+06, // 68
             2.471813521666294e+08, // 69
            -3.457732943484954e+07, // 70
             8.323757920011583e+06, // 71
             5.133329972121338e+07, // 72
             1.809664873919095e+06, // 73
             1.377045055971501e+06, // 74
             9.726182165339858e+05, // 75
             1.483934531948570e+06, // 76
            -1.733454089191774e+08, // 77
             5.015456474884328e+06, // 78
            -6.623719150105976e+05, // 79
            -7.115069699592357e+08, // 80
             3.935873718254389e+06, // 81
             2.073052077492592e+07, // 82
            -2.775578847616344e+08, // 83
             2.022641594067187e+06, // 84
            -2.060271048864140e+08, // 85
            -3.138958102507384e+08, // 86
            -1.381607489131676e+06, // 87
            -9.604435723983304e+07, // 88
             1.848590666864675e+06, // 89
             1.026394758866824e+08, // 90
             6.518643273134843e+07, // 91
            -3.528352731218867e+05, // 92
            -1.202803572771559e+07, // 93
            -4.658193078129489e+05, // 94
            -5.107660222386559e+05, // 95
            -3.622821272192372e+07, // 96
             1.485340736896409e+08, // 97
            -7.380081060241005e+07, // 98
            -6.080488090337624e+07, // 99
            -1.090912749650573e+08, // 100
             1.559191443471737e+06, // 101
            -4.268534754763035e+07, // 102
            -1.715228368737749e+07, // 103
            -5.277822086947012e+07, // 104
             1.479351914293852e+07, // 105
             6.600293131932048e+05, // 106
            -3.190854468173909e+06, // 107
             1.275617957728491e+08, // 108
            -7.548192210350561e+08, // 109
             2.487724178777576e+08, // 110
             2.133823691169596e+07, // 111
            -1.452113907390492e+07, // 112
             2.298050762495894e+06, // 113
             7.395535544895045e+06, // 114
            -2.146271131873474e+07, // 115
             1.267956411412255e+07, // 116
            -1.142055762224413e+08, // 117
             5.475465898083054e+06, // 118
             1.143702847310703e+06, // 119
             4.061024185893140e+09, // 120
             1.272776622440781e+06, // 121
             3.316750674019449e+07, // 122
            -2.871408705066961e+06, // 123
             4.387905706692977e+07, // 124
             2.069225040751453e+07, // 125
            -1.352947859184490e+08, // 126
            -2.237176223915383e+09, // 127
            -5.774210748701186e+08, // 128
             1.334645919182521e+08, // 129
            -8.209437643801609e+07, // 130
             3.033772079017251e+06, // 131
             2.998562632402844e+08, // 132
            -1.336007783542561e+07, // 133
            -2.325305493849345e+05, // 134
             2.290504336259396e+09, // 135
             6.110085045703142e+05, // 136
             1.368944187061224e+07, // 137
            -4.670834221287537e+07, // 138
            -9.462940181662571e+07, // 139
             6.712903521788955e+06, // 140
            -7.550200381917025e+06, // 141
            -7.050443338268070e+06, // 142
             1.327005533512112e+08, // 143
            -2.125047698819537e+07, // 144
             8.675552750009410e+07, // 145
            -1.184984485129030e+07, // 146
            -3.915820426754822e+06, // 147
             1.301663718779552e+08, // 148
            -1.070508299966171e+07, // 149
             1.751640211327968e+06, // 150
            -9.716233214588128e+06, // 151
             2.283792707135397e+07, // 152
             9.609992163916808e+06, // 153
             1.738134027513612e+08, // 154
             2.538915237610597e+05, // 155
             8.866426734516844e+05, // 156
            -2.044798177984186e+06, // 157
            -1.524049621435671e+08, // 158
             1.235124399577832e+08, // 159
             2.836673208580900e+07, // 160
             5.714356668187127e+07, // 161
            -8.053436044514936e+06, // 162
            -9.093751989714575e+07, // 163
            -1.537694078947507e+09, // 164
             7.144077414042622e+06, // 165
            -9.039855749826090e+06, // 166
            -9.346871024049150e+06, // 167
             7.623624951504397e+07, // 168
             5.402972449041229e+06, // 169
             1.067548079810742e+04, // 170
            -2.589204614166812e+07, // 171
            -5.761138344113158e+07, // 172
             3.332231870039655e+09, // 173
            -1.548661666794102e+07, // 174
            -6.496036026119953e+06, // 175
            -2.399353068223621e+07, // 176
             1.923275496883566e+08, // 177
             3.340562015643354e+09, // 178
             7.071877572692135e+07, // 179
             5.490177555003467e+09, // 180
            -2.644075319206767e+06, // 181
            -7.340697373630049e+06, // 182
             4.052948867728809e+08, // 183
             7.021392603793073e+06, // 184
            -3.842465326120424e+06, // 185
            -1.711548121844842e+08, // 186
            -1.849684444080686e+09, // 187
             9.594572117117969e+06, // 188
            -1.099001922635243e+08, // 189
            -6.691335832983202e+07, // 190
             1.574411087292468e+08, // 191
            -1.250614582612478e+06, // 192
             1.629561889367064e+07, // 193
             3.240643075918201e+09, // 194
            -6.594771855561848e+08, // 195
            -1.118581540117914e+08, // 196
            -4.797304482839544e+06, // 197
             4.655109352354272e+08, // 198
             1.909082863886745e+05, // 199
            -2.034560126381920e+06, // 200
             3.290477862946660e+06, // 201
            -3.384581200315726e+05, // 202
            -2.325181802343530e+06, // 203
             2.178686787699379e+05, // 204
            -2.084772918359168e+07, // 205
             2.893633739268443e+07, // 206
            -6.210247331773661e+05, // 207
            -5.940280492058441e+05, // 208
             6.898461394358641e+08, // 209
             9.175658337512958e+05, // 210
             1.452894015468149e+06, // 211
            -6.513531673624113e+06, // 212
             7.049772948954372e+08, // 213
            -1.062440498656304e+09, // 214
            -6.433529110382779e+05, // 215
             3.577311122032274e+07, // 216
             2.656207353211333e+08, // 217
             9.841020608795871e+07, // 218
             2.034966539341207e+06, // 219
            -1.320108251533152e+09, // 220
             9.563749575601192e+06, // 221
             5.434248826483781e+06, // 222
            -1.807235138419146e+08, // 223
             6.339658326092710e+08, // 224
            -8.345603934497662e+08, // 225
             3.288054192725865e+08, // 226
            -7.981759180980818e+06, // 227
            -6.681925163227426e+08, // 228
            -9.009552439934494e+08, // 229
             4.554384030699154e+07, // 230
            -2.800537244916095e+06, // 231
            -2.954278771140127e+06, // 232
             1.789657230992464e+06, // 233
            -5.154025984309415e+06, // 234
            -5.880695103040930e+07, // 235
            -2.847253845045525e+08, // 236
             5.446822291187179e+06, // 237
            -6.492900973954712e+06, // 238
             1.332385583704702e+04, // 239
            -1.688056239484943e+07, // 240
            -2.047886731672082e+08, // 241
             1.021756461221044e+08, // 242
            -6.576381408354772e+05, // 243
            -2.469597212821433e+07, // 244
             2.316762370538609e+09, // 245
             4.807239748554756e+06, // 246
            -2.300542640167191e+06, // 247
             3.211868418864191e+07, // 248
             2.206674467372175e+07, // 249
            -3.166900698314379e+06, // 250
            -2.740822481631201e+06, // 251
            -3.437755298240324e+06, // 252
            -8.181401345345004e+06, // 253
             2.484470803575481e+05, // 254
            -1.768024458689323e+07, // 255
            -1.116767778462850e+06, // 256
            -1.824369253206202e+09, // 257
             2.477212162381825e+08, // 258
             2.780284663911787e+08, // 259
             1.816153530999471e+08, // 260
            -1.181588454123809e+09, // 261
            -1.277333759107736e+09, // 262
            -2.240127818204429e+06, // 263
            -7.292809211578466e+08, // 264
            -3.801712371197688e+08, // 265
             1.116957000281690e+07, // 266
             9.782257930826053e+06, // 267
             5.653571271161902e+06, // 268
            -2.690219733871119e+09, // 269
            -2.016527822222575e+08, // 270
            -3.587998682241316e+07, // 271
            -1.154800865475323e+09, // 272
             1.030745043874395e+08, // 273
             1.216661865971231e+06, // 274
            -5.180490538767445e+06, // 275
            -6.613341200164276e+06, // 276
             8.171790837047105e+05, // 277
            -1.722022587515784e+06, // 278
            -1.120962787532691e+06, // 279
            -4.985066784407824e+07, // 280
             3.712257241583284e+08, // 281
            -3.816335272061630e+07, // 282
             5.127129613838961e+09, // 283
            -3.738343546517164e+06, // 284
             2.182780112939213e+06, // 285
            -1.533077648704340e+08, // 286
             7.384653557052702e+05, // 287
             3.129040494557486e+06, // 288
            -1.553782196340649e+08, // 289
            -2.935787853765563e+04, // 290
            -7.854719646305204e+06, // 291
             1.600311680048343e+09, // 292
            -2.170815124585656e+06, // 293
             4.477903702089389e+06, // 294
             1.053409495971203e+07, // 295
            -7.824108857568482e+08, // 296
            -2.884319866981957e+07, // 297
             8.225109962438856e+07, // 298
             5.033243692825839e+06, // 299
            -6.074945432240812e+06, // 300
             4.689875206765387e+08, // 301
            -6.013410629546607e+07, // 302
             3.631268406581584e+08, // 303
            -2.707864557957937e+08, // 304
            -9.113466190204194e+07, // 305
             7.881648048681423e+07, // 306
             1.996464077694630e+07, // 307
            -5.330781641610608e+07, // 308
             3.306648179096659e+09, // 309
            -1.024651355608934e+08, // 310
             2.260278772897848e+06, // 311
            -4.362460748043871e+06, // 312
             9.735306972051888e+08, // 313
            -5.340031317310227e+06, // 314
             8.306627177052246e+06, // 315
            -5.890247760541072e+06, // 316
            -3.330766262376057e+06, // 317
             7.115455077186215e+08, // 318
            -9.868303489974155e+07, // 319
             1.292505387646708e+06, // 320
            -2.815909875820250e+05, // 321
            -3.503852967706417e+06, // 322
             5.513333421920565e+06, // 323
            -1.188550749838250e+07, // 324
             8.479002144376708e+08, // 325
            -2.554437024997235e+07, // 326
             2.488855780830029e+06, // 327
             1.188629110945018e+08, // 328
             6.659451460287198e+08, // 329
             2.917910989097005e+08, // 330
             2.713632875646300e+07, // 331
            -9.032530056884812e+07, // 332
             2.473815460917826e+06, // 333
             1.296671156500885e+08, // 334
             8.826967140387936e+07, // 335
             6.017570410962172e+07, // 336
            -6.733754010551400e+06, // 337
             2.653392751392258e+07, // 338
            -9.748626485041625e+04, // 339
             5.507153829403489e+07, // 340
            -2.054412812022467e+07, // 341
            -7.563798028064764e+07, // 342
             2.159227852770950e+07, // 343
             5.501552479633354e+07, // 344
            -6.210319747109238e+07, // 345
            -8.147101273287985e+06, // 346
            -3.150446030291113e+09, // 347
            -1.663873602031767e+08, // 348
            -2.717743481759836e+05, // 349
            -3.534151935401044e+07, // 350
             5.449890022169048e+07, // 351
             3.109591797308842e+08, // 352
             6.323478223590664e+06, // 353
            -5.026830646269664e+07, // 354
            -8.745450158341154e+08, // 355
             5.571046904001546e+06, // 356
             1.413456799961735e+08, // 357
             6.089155500127302e+08, // 358
            -1.068710329633325e+06, // 359
            -2.517702572925807e+09, // 360
             4.711663623772586e+08, // 361
            -3.988262390110657e+06, // 362
             2.908363007381877e+07, // 363
            -6.735539925952543e+08, // 364
             2.437438522449083e+07, // 365
             5.877102677460723e+05, // 366
            -2.876168754535716e+08, // 367
             1.766540040268398e+07, // 368
             2.121929292135426e+07, // 369
             1.105665296275074e+07, // 370
             7.285647352620172e+06, // 371
             3.440424806367973e+08, // 372
             7.917457114120971e+07, // 373
             1.156686922525279e+07, // 374
            -9.748274494507654e+08, // 375
             4.117490853149345e+07, // 376
            -4.219675598575529e+08, // 377
             8.433628519197730e+06, // 378
            -4.196674536117390e+06, // 379
             4.774534746827067e+06, // 380
             1.952472663674224e+05, // 381
             3.326177954424440e+07, // 382
             9.165383566800011e+06, // 383
             3.694196928189892e+07, // 384
             2.618976648816870e+08, // 385
             2.188844457623748e+07, // 386
            -5.114654616541005e+05, // 387
             1.577130860227157e+07, // 388
             1.463911266808242e+08, // 389
             4.409268716927871e+05, // 390
             8.667230330906311e+05, // 391
             1.396735931251594e+06, // 392
            -7.072637814099071e+08, // 393
             2.032228487372420e+08, // 394
             8.331585526306181e+05, // 395
            -8.206801133793315e+05, // 396
            -3.490185597833707e+06, // 397
             4.609502337945588e+06, // 398
            -1.370728918351816e+08, // 399
            -2.587100143077609e+07, // 400
             9.131333273797152e+08, // 401
            -2.375642570249868e+09, // 402
             2.274504824184169e+07, // 403
             4.333460331220683e+07, // 404
            -6.637199219406469e+07, // 405
             4.634820130088181e+07, // 406
            -3.018638755899361e+07, // 407
            -2.283389012627349e+06, // 408
            -9.482923599374654e+08, // 409
            -2.873608637464473e+06, // 410
             3.708827588258091e+06, // 411
            -1.303249426850266e+09, // 412
            -1.636839437420500e+07, // 413
             5.622904923375349e+07, // 414
             1.456402736715717e+05, // 415
            -3.709846740966687e+07, // 416
             2.869075120829020e+06, // 417
             1.425538039982339e+08, // 418
             2.131536929454673e+05, // 419
             6.978752306866910e+07, // 420
             1.134606433773904e+07, // 421
            -1.236857440189265e+07, // 422
            -4.603874209624568e+08, // 423
             2.007866061260758e+08, // 424
             5.472920412727516e+07, // 425
            -1.507403589701312e+07, // 426
            -3.058414318457443e+09, // 427
            -1.304786155794721e+06, // 428
            -3.486519736482789e+06, // 429
             3.238399221982749e+08, // 430
            -1.322813266545902e+07, // 431
             7.414853672126835e+05, // 432
             2.669898555505047e+08, // 433
            -2.190918482352533e+06, // 434
             2.999058469510580e+08, // 435
             2.617966833879349e+06, // 436
            -1.215307810345136e+07, // 437
             7.088186071241328e+05, // 438
            -7.176462830885839e+07, // 439
            -5.675375671130657e+05, // 440
             3.687959713047094e+08, // 441
            -5.654536466326369e+07, // 442
            -5.957351291813240e+06, // 443
             2.637061093172431e+08, // 444
            -2.159193663743000e+06, // 445
            -3.779446811379698e+07, // 446
             1.025591317980579e+08, // 447
             2.923233901010364e+08, // 448
            -1.287857745048919e+08, // 449
             3.266438732910178e+08, // 450
             1.155954490820985e+05, // 451
            -6.765857260793954e+07, // 452
            -3.995448271863168e+08, // 453
            -8.397092632295523e+08, // 454
             8.125834548406528e+07, // 455
             9.693823508196728e+07, // 456
             8.388581764765894e+05, // 457
             7.397521192592943e+08, // 458
             2.274125896909739e+09, // 459
            -2.021182551123362e+08, // 460
            -1.280772205094666e+08, // 461
             1.570863274876046e+08, // 462
             3.961814174327721e+07, // 463
            -2.707563237893136e+08, // 464
            -1.609145303165550e+08, // 465
            -6.259286683145028e+07, // 466
             2.761212226406022e+08, // 467
             1.425463825912278e+07, // 468
            -1.306759987113764e+07, // 469
            -2.309404143425991e+08, // 470
             3.286650772946717e+06, // 471
            -4.939639700582655e+07, // 472
             2.192391314431035e+09, // 473
            -1.422641378637375e+08, // 474
            -6.562821778822233e+07, // 475
             4.548884287309341e+07, // 476
            -2.534086532351504e+07, // 477
             1.580246755368540e+08, // 478
            -8.036191949442768e+07, // 479
            -1.797051410239317e+07, // 480
            -4.836907394178412e+06, // 481
            -2.794694854236932e+08, // 482
            -8.921330711460923e+07, // 483
            -1.864933771584549e+07, // 484
            -8.453931235193497e+08, // 485
             1.424253208555411e+08, // 486
            -7.835120991361836e+05, // 487
             2.092141274127526e+08, // 488
             1.700932854002376e+06, // 489
            -2.061493344316360e+07, // 490
            -2.146523959494082e+07, // 491
             1.408644909228120e+08, // 492
            -4.558634786124368e+08, // 493
            -1.365510346779630e+08, // 494
             4.458040876857066e+06, // 495
             5.418233031497867e+07, // 496
             2.474616812878810e+07, // 497
             4.024389681650857e+06, // 498
            -5.767908730079439e+05, // 499
            -9.760616244196255e+06, // 500
             9.813187102824543e+07, // 501
             4.062684149279852e+09, // 502
            -1.732123307152584e+08, // 503
            -1.757720208091809e+06, // 504
            -2.404880319515195e+07, // 505
             1.927782148378769e+07, // 506
            -2.220733738982466e+08, // 507
            -3.178373844396662e+07, // 508
            -2.413794133895005e+07, // 509
            -6.515422134432663e+07, // 510
             4.376013024562670e+08, // 511
            -9.612420178920076e+08, // 512
             4.456279320209504e+04, // 513
            -1.823609484830797e+08, // 514
             4.115589976445265e+08, // 515
             5.987563210614617e+05, // 516
             1.861808628582554e+07, // 517
             1.463473482820567e+06, // 518
             1.865965673850930e+05, // 519
             6.369150975758647e+07, // 520
             7.483095509500535e+08, // 521
            -1.168374555645436e+06, // 522
             3.714854654804981e+06, // 523
             2.444111242992415e+07, // 524
             9.709732253285398e+07, // 525
            -4.735249454214865e+05, // 526
             1.073211955939215e+08, // 527
            -3.152009475386025e+07, // 528
             1.878301784955038e+07, // 529
             2.384231864208037e+06, // 530
             1.044684861859846e+08, // 531
            -1.040323884214497e+08, // 532
             1.760444775322739e+09, // 533
             1.489210830307774e+09, // 534
            -4.404305030559331e+08, // 535
             2.143603415008191e+09, // 536
             2.508427064123004e+08, // 537
            -8.119218827449309e+08, // 538
             2.754130073821065e+07, // 539
             4.450754956859289e+06, // 540
            -3.038807706276330e+07, // 541
             1.428479344438758e+07, // 542
             3.925236899589354e+06, // 543
             3.624134384626819e+07, // 544
            -3.024347202443663e+07, // 545
            -2.694638544777907e+09, // 546
            -1.014707715155217e+08, // 547
            -4.336562116262446e+07, // 548
             5.244045154834913e+07, // 549
             4.291190368260178e+07, // 550
             4.869704243617424e+07, // 551
             1.581000154819219e+09, // 552
            -8.560049727896881e+07, // 553
             6.211825210701237e+07, // 554
             2.045507255630950e+07, // 555
            -1.071622016261262e+07, // 556
             5.658170837306768e+06, // 557
            -9.889611643195942e+09, // 558
             2.680676789053797e+08, // 559
             7.149415937054603e+08, // 560
             3.433999175110677e+09, // 561
            -5.172686963214895e+06, // 562
            -1.289730273720040e+06, // 563
             1.703587192635128e+06, // 564
            -6.106690745255421e+05, // 565
            -8.302036315765601e+06, // 566
            -5.754674312943535e+08, // 567
            -1.185800415363473e+07, // 568
            -1.871318896087537e+08, // 569
             5.497497844802558e+08, // 570
             2.976218092265228e+08, // 571
             5.599906752753063e+06, // 572
             9.085720577951757e+06, // 573
             1.877721912213594e+09, // 574
             6.782795365793623e+06, // 575
            -2.258181163180993e+07, // 576
            -1.450678892622263e+08, // 577
            -3.527712337772905e+08, // 578
            -2.246425797048568e+06, // 579
            -2.646822689216051e+09, // 580
            -8.678579870104624e+06, // 581
             3.631591889168271e+08, // 582
             8.145694523552655e+07, // 583
             2.909796824245714e+08, // 584
            -2.730272644382839e+08, // 585
            -2.835326788706745e+07, // 586
             7.096786627621270e+05, // 587
            -1.152464087411785e+06, // 588
            -1.252302949369267e+08, // 589
             8.296974407787500e+07, // 590
            -4.499795905652558e+07, // 591
             2.770217359911647e+07, // 592
            -4.647832777818318e+06, // 593
             4.661003167023222e+06, // 594
             1.685088638092406e+07, // 595
             4.702649092520948e+07, // 596
            -1.052441835871590e+09, // 597
            -5.480337797989252e+08, // 598
             7.114775048797382e+08, // 599
             1.472379672508387e+06, // 600
            -2.791279522876699e+05, // 601
             4.258183077125617e+07, // 602
            -6.145897572010673e+07, // 603
             8.198767243045069e+08, // 604
            -8.722026969280231e+07, // 605
            -6.669796373705920e+08, // 606
            -1.840697758670173e+06, // 607
            -2.591697983007819e+07, // 608
            -5.129115734137596e+06, // 609
            -1.486170059878021e+07, // 610
            -6.550612378629157e+06, // 611
             8.038527585657771e+05, // 612
            -4.076906958240169e+09, // 613
            -1.519022717970733e+07, // 614
             2.820879888211372e+08, // 615
             2.902688727917277e+08, // 616
            -6.689665729836110e+04, // 617
            -2.777763216046073e+08, // 618
            -1.322680834757120e+08, // 619
             3.513477411018753e+06, // 620
            -4.683774923829962e+06, // 621
            -1.837524658191977e+07, // 622
             1.137902213315202e+07, // 623
             3.971022868159872e+08, // 624
             1.241445028553608e+09, // 625
             8.525326519819150e+06, // 626
            -1.614361288860510e+06, // 627
             2.376954837149892e+05, // 628
            -1.616308989865829e+07, // 629
             1.286024214760977e+09, // 630
             4.538060553090237e+08, // 631
            -6.904435452042172e+06, // 632
            -1.019237494400510e+06, // 633
            -5.920350047908472e+07, // 634
            -4.075711474878077e+07, // 635
            -1.546947996743235e+07, // 636
             1.419489758070299e+08, // 637
             5.090184860395844e+09, // 638
            -4.352914980661020e+05, // 639
            -5.182979763203818e+07, // 640
            -8.472140111922114e+07, // 641
            -1.425612753190446e+07, // 642
             1.304922662087069e+07, // 643
             6.086185489517114e+08, // 644
             4.322225431379163e+08, // 645
             1.933043235350109e+09, // 646
            -1.130536215454846e+07, // 647
             6.431074181718075e+06, // 648
            -1.402707517145817e+07, // 649
            -3.251034444469802e+07, // 650
            -1.714885987209150e+06, // 651
             1.348809430420725e+07, // 652
             4.265949755614945e+07, // 653
            -1.777539135874096e+08, // 654
            -8.433594278780765e+04, // 655
            -2.007306763828945e+08, // 656
            -8.261805729237419e+07, // 657
            -6.425992801572358e+05, // 658
            -2.691506543348014e+08, // 659
            -2.634893974505538e+07, // 660
            -1.417646350603292e+09, // 661
            -4.686067254449109e+08, // 662
            -3.473498614970690e+09, // 663
            -1.679335434784746e+08, // 664
             2.356158695121191e+07, // 665
             1.059870108430649e+06, // 666
            -9.569905237810019e+08, // 667
             2.413520996101944e+06, // 668
            -1.098690724570953e+07, // 669
             4.009205598482681e+09, // 670
            -1.182810235869673e+09, // 671
            -1.359100622017348e+06, // 672
            -3.197586086377963e+09, // 673
            -1.657202024053239e+08, // 674
             8.957974852961949e+05, // 675
            -3.833826340798531e+07, // 676
             1.799913746912668e+08, // 677
            -9.604804428625901e+05, // 678
            -4.782015247702444e+08, // 679
             1.825470862352782e+05, // 680
             5.876776426936742e+06, // 681
            -2.617166248371563e+08, // 682
            -6.179495784831373e+07, // 683
             1.811034635947425e+09, // 684
             2.783646539580451e+06, // 685
             2.548043133776401e+09, // 686
            -4.657164810878205e+08, // 687
            -3.600828889055022e+07, // 688
            -1.543097990427805e+07, // 689
             1.935643471956711e+07, // 690
             6.661192655733395e+06, // 691
             2.575973391525599e+07, // 692
            -8.018178999824381e+07, // 693
             4.929749988915805e+06, // 694
             3.219632114242534e+06, // 695
             4.113687925263040e+06, // 696
             5.464181600357412e+09, // 697
            -5.083168588052806e+06, // 698
            -3.389077449296404e+06, // 699
            -7.137287945771430e+05, // 700
            -5.422502400171852e+06, // 701
             7.586433021455262e+06, // 702
             3.236274855523609e+07, // 703
             1.740941529881672e+08, // 704
            -3.673714245554605e+06, // 705
             1.854549851787505e+06, // 706
             2.717979286078541e+05, // 707
             1.984858715719753e+05, // 708
            -3.726954927915704e+08, // 709
            -4.678747110009232e+08, // 710
             6.562001678993110e+06, // 711
             4.361949352986369e+07, // 712
            -2.757555309442899e+07, // 713
            -2.182429275074045e+08, // 714
             3.723122254508249e+05, // 715
             4.140701556650159e+06, // 716
            -1.139179160187693e+09, // 717
            -8.996638553612847e+08, // 718
             1.257123756336152e+08, // 719
             1.395494042370475e+09, // 720
            -3.256373250186338e+07, // 721
             2.745537321302036e+05, // 722
             3.675156546885945e+08, // 723
             5.691814007513878e+07, // 724
            -1.646994312854564e+06, // 725
             3.388154087283023e+07, // 726
            -9.126615400905168e+06, // 727
             1.645362733844857e+08, // 728
            -8.268755182985424e+05, // 729
             4.090912305637374e+09, // 730
             2.714861874473696e+04, // 731
             1.845857659949810e+05, // 732
             5.844286486889084e+05, // 733
            -1.801299952303738e+07, // 734
             4.441694117099823e+07, // 735
             2.136395687134993e+06, // 736
             1.529758671378146e+07, // 737
             3.593460407646215e+08, // 738
             3.737738770064478e+07, // 739
             7.444816532087277e+06, // 740
            -2.079460945082731e+06, // 741
             1.708745946451300e+06, // 742
            -1.771728988410168e+07, // 743
            -7.035236183545884e+08, // 744
            -9.803739665149050e+06, // 745
            -7.249929706566517e+06, // 746
            -6.306333156926360e+05, // 747
             1.199152864012293e+09, // 748
             5.262288735693511e+07, // 749
             6.631302313114956e+06, // 750
             1.250219532671225e+07, // 751
            -3.204606814190169e+07, // 752
             1.843147176132803e+06, // 753
             1.928488773058719e+07, // 754
            -1.233503369830761e+07, // 755
             1.117566276748299e+07, // 756
            -2.982248999865317e+08, // 757
            -3.467910013356269e+06, // 758
            -1.578413878184624e+07, // 759
             1.227635564057068e+09, // 760
            -1.700383681545126e+06, // 761
            -7.205879642804307e+08, // 762
             1.088597209404805e+07, // 763
             1.676756300061432e+07, // 764
            -3.568378724872644e+09, // 765
            -2.194019516415810e+09, // 766
            -1.401562828638557e+06, // 767
            -3.652521219462773e+08, // 768
            -4.886103319077749e+08, // 769
             2.224711756747433e+07, // 770
             1.465778583107225e+09, // 771
             7.549962213812455e+06, // 772
             2.081694521572386e+09, // 773
            -6.436684428691784e+06, // 774
             2.030232711120574e+06}; // 775

    m_k_intra_AB =  0.000000000000000e+00; // A^(-1))
    m_k_intra_BB =  0.000000000000000e+00; // A^(-1))
    m_k_intra_CD =  0.000000000000000e+00; // A^(-1))
    m_k_intra_DD =  0.000000000000000e+00; // A^(-1))
    m_k_AC =  8.789433162002250e-02; // A^(-1))
    m_k_AD =  2.186868009852624e-01; // A^(-1))
    m_k_BC =  2.249190913485521e+00; // A^(-1))
    m_k_BD =  9.559558064288454e-01; // A^(-1))
    m_r2i =  8.000000000000000e+00; // A
    m_r2f =  9.000000000000000e+00; // A

    } // if mon1 == "h2o" && mon2  == "no3"

}

//----------------------------------------------------------------------------//

double x2b_A1B2_C1D3_v1x::f_switch(const double& r, double& g) const
{
    if (r > m_r2f) {
        g = 0.0;
        return 0.0;
    } else if (r > m_r2i) {
        const double t1 = M_PI/(m_r2f - m_r2i);
        const double x = (r - m_r2i)*t1;
        g = - std::sin(x)*t1/2.0;
        return (1.0 + std::cos(x))/2.0;
    } else {
        g = 0.0;
        return 1.0;
    }
}

//----------------------------------------------------------------------------//

double x2b_A1B2_C1D3_v1x::eval(const double* xyz1, const double* xyz2, const size_t ndim) const
{
//ACTUALLY A1B3_C1D2, i.e., NITRATE--WATER


    std::vector<double> energies(ndim,0.0);

    for (size_t j = 0; j < ndim; j++) {
        double mon1[12];
        double mon2[9];

        std::copy(xyz1 + j * 12, xyz1 + (j+1) * 12, mon1);
        std::copy(xyz2 + j * 9, xyz2 + (j+1) * 9, mon2);

        // Right now it assumes 1st atom of each monomer
        // ##DEFINE HERE## right now it assumes 1st atom of each monomer
        const double d12[3] = {mon1[0] -  mon2[0],
                               mon1[1] -  mon2[1],
                               mon1[2] -  mon2[2]};
    
        const double r12sq = d12[0]*d12[0] + d12[1]*d12[1] + d12[2]*d12[2];
        const double r12 = std::sqrt(r12sq);
    
        if (r12 > m_r2f)
            return 0.0;
    
        double xcrd[21]; // coordinates of real sites ONLY
    
        std::copy(mon1, mon1 + 12, xcrd);
        std::copy(mon2, mon2 + 9, xcrd + 12);
    
        double v[12];
    
        double sw = 0.0;
        double gsw = 0.0;
    
        const double* A_1_a= xcrd + 0;
        const double* B_1_a= xcrd + 3;
        const double* B_2_a= xcrd + 6;
        const double* B_3_a= xcrd + 9;
    
        const double* C_1_b= xcrd + 12;
        const double* D_1_b= xcrd + 15;
        const double* D_2_b= xcrd + 18;
        variable vr[12];
    
    //    v[0]  = vr[0].v_exp(m_k_intra_AB, A_1_a, B_1_a);
    //    v[1]  = vr[1].v_exp(m_k_intra_AB, A_1_a, B_2_a);
    //    v[2]  = vr[2].v_exp(m_k_intra_AB, A_1_a, B_3_a);
    //    v[3]  = vr[3].v_exp(m_k_intra_BB, B_1_a, B_2_a);
    //    v[4]  = vr[4].v_exp(m_k_intra_BB, B_1_a, B_3_a);
    //    v[5]  = vr[5].v_exp(m_k_intra_BB, B_2_a, B_3_a);
    
    //    v[6]  = vr[6].v_exp(m_k_intra_CD, C_1_b, D_1_b);
    //    v[7]  = vr[7].v_exp(m_k_intra_CD, C_1_b, D_2_b);
    //    v[8]  = vr[8].v_exp(m_k_intra_DD, D_1_b, D_2_b);
    
        v[0]  = vr[0].v_exp(m_k_AC, A_1_a, C_1_b);
        v[1]  = vr[1].v_exp(m_k_AD, A_1_a, D_1_b);
        v[2]  = vr[2].v_exp(m_k_AD, A_1_a, D_2_b);
    
        v[3]  = vr[3].v_exp(m_k_BC, B_1_a, C_1_b);
        v[4]  = vr[4].v_exp(m_k_BD, B_1_a, D_1_b);
        v[5]  = vr[5].v_exp(m_k_BD, B_1_a, D_2_b);
    
        v[6]  = vr[6].v_exp(m_k_BC, B_2_a, C_1_b);
        v[7]  = vr[7].v_exp(m_k_BD, B_2_a, D_1_b);
        v[8]  = vr[8].v_exp(m_k_BD, B_2_a, D_2_b);
    
        v[9]  = vr[9].v_exp(m_k_BC, B_3_a, C_1_b);
        v[10]  = vr[10].v_exp(m_k_BD, B_3_a, D_1_b);
        v[11]  = vr[11].v_exp(m_k_BD, B_3_a, D_2_b);

    
    
        sw = f_switch(r12, gsw);
        
        energies[j] = sw*polynomial::eval(coefficients.data(), v);
    }

    double energy = 0.0;
    for (size_t i = 0; i < ndim; i++) {
      energy += energies[i];
    }

    return energy;
    
}

double x2b_A1B2_C1D3_v1x::eval(const double* xyz1, const double* xyz2, 
                double * grad1, double * grad2, const size_t ndim) const
{

    std::vector<double> energies(ndim,0.0);

    for (size_t j = 0; j < ndim; j++) {
        double mon1[12];
        double mon2[9];

        std::copy(xyz1 + j * 12, xyz1 + (j+1) * 12, mon1);
        std::copy(xyz2 + j * 9, xyz2 + (j+1) * 9, mon2);

        // Right now it assumes 1st atom of each monomer
        const double d12[3] = {mon1[0] -  mon2[0],
                               mon1[1] -  mon2[1],
                               mon1[2] -  mon2[2]};
    
        const double r12sq = d12[0]*d12[0] + d12[1]*d12[1] + d12[2]*d12[2];
        const double r12 = std::sqrt(r12sq);
    
        if (r12 > m_r2f)
            continue;
    
        double xcrd[21]; // coordinates of real sites ONLY
    
        std::copy(mon1, mon1 + 12, xcrd);
        std::copy(mon2, mon2 + 9, xcrd + 12);

        double v[12];
    
        double sw = 0.0;
        double gsw = 0.0;
    
        const double* A_1_a= xcrd + 0;
        const double* B_1_a= xcrd + 3;
        const double* B_2_a= xcrd + 6;
        const double* B_3_a= xcrd + 9;
    
        const double* C_1_b= xcrd + 12;
        const double* D_1_b= xcrd + 15;
        const double* D_2_b= xcrd + 18;
    
    
    
        variable vr[12];
    
    //    v[0]  = vr[0].v_exp(m_k_intra_AB, A_1_a, B_1_a);
    //    v[1]  = vr[1].v_exp(m_k_intra_AB, A_1_a, B_2_a);
    //    v[2]  = vr[2].v_exp(m_k_intra_AB, A_1_a, B_3_a);
    //    v[3]  = vr[3].v_exp(m_k_intra_BB, B_1_a, B_2_a);
    //    v[4]  = vr[4].v_exp(m_k_intra_BB, B_1_a, B_3_a);
    //    v[5]  = vr[5].v_exp(m_k_intra_BB, B_2_a, B_3_a);
    
    //    v[6]  = vr[6].v_exp(m_k_intra_CD, C_1_b, D_1_b);
    //    v[7]  = vr[7].v_exp(m_k_intra_CD, C_1_b, D_2_b);
    //    v[8]  = vr[8].v_exp(m_k_intra_DD, D_1_b, D_2_b);
    
        v[0]  = vr[0].v_exp(m_k_AC, A_1_a, C_1_b);
        v[1]  = vr[1].v_exp(m_k_AD, A_1_a, D_1_b);
        v[2]  = vr[2].v_exp(m_k_AD, A_1_a, D_2_b);
    
        v[3]  = vr[3].v_exp(m_k_BC, B_1_a, C_1_b);
        v[4]  = vr[4].v_exp(m_k_BD, B_1_a, D_1_b);
        v[5]  = vr[5].v_exp(m_k_BD, B_1_a, D_2_b);
    
        v[6]  = vr[6].v_exp(m_k_BC, B_2_a, C_1_b);
        v[7]  = vr[7].v_exp(m_k_BD, B_2_a, D_1_b);
        v[8]  = vr[8].v_exp(m_k_BD, B_2_a, D_2_b);
    
        v[9]  = vr[9].v_exp(m_k_BC, B_3_a, C_1_b);
        v[10]  = vr[10].v_exp(m_k_BD, B_3_a, D_1_b);
        v[11]  = vr[11].v_exp(m_k_BD, B_3_a, D_2_b);
    
    
        double g[12];
  
        sw = f_switch(r12, gsw);

        energies[j] = sw*polynomial::eval(coefficients.data(), v, g);

    
        double xgrd[21];
        std::fill(xgrd, xgrd + 21, 0.0);
    
        double* A_1_a_g = xgrd + 0;
        double* B_1_a_g = xgrd + 3;
        double* B_2_a_g = xgrd + 6;
        double* B_3_a_g = xgrd + 9;
    
        double* C_1_b_g = xgrd + 12;
        double* D_1_b_g = xgrd + 15;
        double* D_2_b_g = xgrd + 18;
    
    //    vr[0].grads(g[0], A_1_a_g, B_1_a_g, A_1_a, B_1_a);
    //    vr[1].grads(g[1], A_1_a_g, B_2_a_g, A_1_a, B_2_a);
    //    vr[2].grads(g[2], A_1_a_g, B_3_a_g, A_1_a, B_3_a);
    //    vr[3].grads(g[3], B_1_a_g, B_2_a_g, B_1_a, B_2_a);
    //    vr[4].grads(g[4], B_1_a_g, B_3_a_g, B_1_a, B_3_a);
    //    vr[5].grads(g[5], B_2_a_g, B_3_a_g, B_2_a, B_3_a);
    
    //    vr[6].grads(g[6], C_1_b_g, D_1_b_g, C_1_b, D_1_b);
    //    vr[7].grads(g[7], C_1_b_g, D_2_b_g, C_1_b, D_2_b);
    //    vr[8].grads(g[8], D_1_b_g, D_2_b_g, D_1_b, D_2_b);
    
        vr[0].grads(g[0], A_1_a_g, C_1_b_g, A_1_a, C_1_b);
        vr[1].grads(g[1], A_1_a_g, D_1_b_g, A_1_a, D_1_b);
        vr[2].grads(g[2], A_1_a_g, D_2_b_g, A_1_a, D_2_b);
    
        vr[3].grads(g[3], B_1_a_g, C_1_b_g, B_1_a, C_1_b);
        vr[4].grads(g[4], B_1_a_g, D_1_b_g, B_1_a, D_1_b);
        vr[5].grads(g[5], B_1_a_g, D_2_b_g, B_1_a, D_2_b);
    
        vr[6].grads(g[6], B_2_a_g, C_1_b_g, B_2_a, C_1_b);
        vr[7].grads(g[7], B_2_a_g, D_1_b_g, B_2_a, D_1_b);
        vr[8].grads(g[8], B_2_a_g, D_2_b_g, B_2_a, D_2_b);
    
        vr[9].grads(g[9], B_3_a_g, C_1_b_g, B_3_a, C_1_b);
        vr[10].grads(g[10], B_3_a_g, D_1_b_g, B_3_a, D_1_b);
        vr[11].grads(g[11], B_3_a_g, D_2_b_g, B_3_a, D_2_b);




    // ##DEFINE HERE## the redistribution of the gradients
    

    
        // the switch
        
        
        for (int i = 0; i < 12; ++i) {
            grad1[i + j*12] += sw*xgrd[i];
        }

        for (int i = 0; i < 9; ++i) {
            grad2[i + j*9] += sw*xgrd[i + 12];
        }

        // gradient of the switch

        gsw *= energies[j]/r12;
        for (int i = 0; i < 3; ++i) {
            const double d = gsw*d12[i];
            grad1[i + j*12] += d;
            grad2[i + j*9] -= d;
        }

    }

    double energy = 0.0;
    for (size_t i = 0; i < ndim; i++) {
      energy += energies[i];
    }

    return energy;
}

} // namespace x2b_A1B2_C1D3_deg5

////////////////////////////////////////////////////////////////////////////////

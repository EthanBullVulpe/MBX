#include "x2b_A1B4_A1B4_deg4_exp0_v1x.h" 
 

////////////////////////////////////////////////////////////////////////////////

namespace {

//----------------------------------------------------------------------------//

struct variable {
    double v_exp0(const double& r0, const double& k,
                 const double * p1, const double * p2 );
                 
    double v_exp(const double& k,
                 const double * p1, const double * p2 );

    double v_coul(const double& r0, const double& k,
                  const double * p1, const double * p2 );
                  
    void grads(const double& gg, double * grd1, double * grd2,
               const double * p1, const double * p2);

    double g[3]; // diff(value, p1 - p2)
};

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

double variable::v_exp0(const double& r0, const double& k,
                       const double * p1, const double * p2)
{
    g[0] = p1[0] - p2[0];
    g[1] = p1[1] - p2[1];
    g[2] = p1[2] - p2[2];

    const double r = std::sqrt(g[0]*g[0] + g[1]*g[1] + g[2]*g[2]);

    const double exp1 = std::exp(k*(r0 - r));
    const double gg = - k*exp1/r;

    g[0] *= gg;
    g[1] *= gg;
    g[2] *= gg;

    return exp1;
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

double variable::v_exp(const double& k,
                       const double * p1, const double * p2)
{
    g[0] = p1[0] - p2[0];
    g[1] = p1[1] - p2[1];
    g[2] = p1[2] - p2[2];

    const double r = std::sqrt(g[0]*g[0] + g[1]*g[1] + g[2]*g[2]);

    const double exp1 = std::exp(k*(- r));
    const double gg = - k*exp1/r;

    g[0] *= gg;
    g[1] *= gg;
    g[2] *= gg;

    return exp1;
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

double variable::v_coul(const double& r0, const double& k,
                        const double * p1, const double * p2)
{
    g[0] = p1[0] - p2[0];
    g[1] = p1[1] - p2[1];
    g[2] = p1[2] - p2[2];

    const double rsq = g[0]*g[0] + g[1]*g[1] + g[2]*g[2];
    const double r = std::sqrt(rsq);

    const double exp1 = std::exp(k*(r0 - r));
    const double rinv = 1.0/r;
    const double val = exp1*rinv;

    const double gg = - (k + rinv)*val*rinv;

    g[0] *= gg;
    g[1] *= gg;
    g[2] *= gg;

    return val;
}

//----------------------------------------------------------------------------//

void variable::grads(const double& gg, double * grd1, double * grd2, 
                     const double * p1, const double * p2) {
    for (size_t i = 0; i < 3 ; i++) {
        double d = gg*g[i];
        grd1[i] += d;
        grd2[i] -= d;
    }
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

struct monomer {
    double oh1[3];
    double oh2[3];

    void setup(const double* ohh,
               const double& in_plane_g, const double& out_of_plane_g,
               double x1[3], double x2[3]);

    void grads(const double* g1, const double* g2,
               const double& in_plane_g, const double& out_of_plane_g,
               double* grd) const;
};

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

void monomer::setup(const double* ohh,
                    const double& in_plane_g, const double& out_of_plane_g,
                    double* x1, double* x2)
{
    for (int i = 0; i < 3; ++i) {
        oh1[i] = ohh[i + 3] - ohh[i];
        oh2[i] = ohh[i + 6] - ohh[i];
    }

    const double v[3] = {
        oh1[1]*oh2[2] - oh1[2]*oh2[1],
        oh1[2]*oh2[0] - oh1[0]*oh2[2],
        oh1[0]*oh2[1] - oh1[1]*oh2[0]
    };

    for (int i = 0; i < 3; ++i) {
        const double in_plane = ohh[i] + 0.5*in_plane_g*(oh1[i] + oh2[i]);
        const double out_of_plane = out_of_plane_g*v[i];

        x1[i] = in_plane + out_of_plane;
        x2[i] = in_plane - out_of_plane;
    }
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

void monomer::grads(const double* g1, const double* g2,
                    const double& in_plane_g, const double& out_of_plane_g,
                    double* grd) const
{
    const double gm[3] = {
        g1[0] - g2[0],
        g1[1] - g2[1],
        g1[2] - g2[2]
    };

    const double t1[3] = {
        oh2[1]*gm[2] - oh2[2]*gm[1],
        oh2[2]*gm[0] - oh2[0]*gm[2],
        oh2[0]*gm[1] - oh2[1]*gm[0]
    };

    const double t2[3] = {
        oh1[1]*gm[2] - oh1[2]*gm[1],
        oh1[2]*gm[0] - oh1[0]*gm[2],
        oh1[0]*gm[1] - oh1[1]*gm[0]
    };

    for (int i = 0; i < 3; ++i) {
        const double gsum = g1[i] + g2[i];
        const double in_plane = 0.5*in_plane_g*gsum;

        const double gh1 = in_plane + out_of_plane_g*t1[i];
        const double gh2 = in_plane - out_of_plane_g*t2[i];

        grd[i + 0] += gsum - (gh1 + gh2); // O
        grd[i + 3] += gh1; // H1
        grd[i + 6] += gh2; // H2
    }
}

} // namespace

////////////////////////////////////////////////////////////////////////////////

namespace x2b_A1B4_A1B4_deg4_exp0 {

//----------------------------------------------------------------------------//

x2b_A1B4_A1B4_v1x::x2b_A1B4_A1B4_v1x(std::string mon1, std::string mon2) {

    // =====>> SECTION CONSTRUCTOR <<=====
    // =>> PASTE RIGHT BELOW THIS LINE <==
    if (mon1 == "ch4" && mon2  == "ch4") {
        coefficients = std::vector<double> {
 1.264832673126006e+00, // 0
-1.340014770562834e+01, // 1
-7.791867589095713e+00, // 2
 5.579811553476496e-01, // 3
-2.293076967226802e-01, // 4
 1.831191709504600e+00, // 5
 1.084732496827437e+00, // 6
 2.522796444801034e+00, // 7
 1.659560913024536e+00, // 8
-1.600377854393989e-01, // 9
 1.912106858299488e+01, // 10
-1.574688599014262e+00, // 11
 1.537666304536277e-01, // 12
-2.069999455395906e+00, // 13
-5.835440407807171e-01, // 14
-5.601506199966932e+00, // 15
-4.362467258721625e-01, // 16
 7.998654514393197e-02, // 17
 5.174152295508243e+00, // 18
 4.405672529789022e+00, // 19
 6.002231825554049e-04, // 20
 1.005800498545821e-02, // 21
-1.383628281291800e+01, // 22
 4.339239653612987e-04, // 23
-6.942876435079367e-03, // 24
-1.149162105615858e+01, // 25
-6.941932937226556e-04, // 26
 5.364877845653665e-01, // 27
-8.247828886615637e-02, // 28
-2.392674705365179e+00, // 29
 5.796478197536759e-03, // 30
 3.788297253057966e+00, // 31
-9.970692888997304e+00, // 32
 1.528173409015945e+01, // 33
 1.751749391492929e-02, // 34
 1.532198546111567e-03, // 35
 4.587620602821024e-04, // 36
-3.894180225170845e-01, // 37
-3.501264022245953e-01, // 38
-1.264505549474195e-02, // 39
 2.505768821549891e-02, // 40
 3.593394862037541e-03, // 41
-2.565442232226506e-03, // 42
-9.233240406260400e-02, // 43
 2.610598049137276e-02, // 44
 6.252361345802171e+00, // 45
 1.077043950475384e-01, // 46
 3.959448303917686e+00, // 47
-1.097523093292564e-03, // 48
-1.618730811475418e-01, // 49
-2.533343428802799e-01, // 50
 7.227015818424530e-01, // 51
-1.777526619872397e-02, // 52
 2.512668813402263e+01, // 53
-5.673376923842299e-03, // 54
 3.954128733706645e+00, // 55
-2.824020717662449e-06, // 56
-4.931353069492602e+00, // 57
-3.366835370669676e+00, // 58
-9.192317594412648e-02, // 59
-1.484533132682326e-01, // 60
-7.733501929205242e-06, // 61
-3.152124807915916e-01, // 62
 6.306238704320838e-03, // 63
-5.908730241354893e+00, // 64
 1.979713325107783e+00, // 65
 1.049102889459914e+00, // 66
-2.623608277345188e-01, // 67
-9.685847518494890e+00, // 68
-2.458432077092065e-01, // 69
-1.381180278566333e-03, // 70
 6.105590498811502e+00, // 71
-1.151182050250633e-03, // 72
-6.409152785552958e-01, // 73
-1.301097843997662e+01, // 74
 9.841145724233309e-01, // 75
 2.965761246799399e-02, // 76
-2.508387152170893e-01, // 77
 2.839169190438127e+00, // 78
 6.755192947180652e+00, // 79
 1.022752948867378e-04, // 80
-1.969197986354057e+01, // 81
-1.065443964942901e-01, // 82
-7.182589632849452e+00, // 83
-3.069496238686378e+00, // 84
 6.914235352433994e-02, // 85
 2.460416295649094e+00, // 86
 2.276100698986431e+00, // 87
-1.610196674593790e+01, // 88
 4.383683992149243e-01, // 89
 9.928410801913148e-01, // 90
 2.445866446657703e+00, // 91
 1.658885266039165e-01, // 92
-5.348936891726407e-02, // 93
-1.018344227710434e+00, // 94
 3.761513313585565e+01, // 95
-2.844431755288757e-05, // 96
 9.828027993166349e-04, // 97
 4.342859742531289e-04, // 98
 1.596945042230504e+00, // 99
 7.004748905516456e-01, // 100
 4.370786728103795e-01, // 101
-1.196990426970616e-02, // 102
-5.597434431850983e-02, // 103
-5.235564103055367e-04, // 104
 4.693771051006034e-01, // 105
-7.989974216541405e+00, // 106
-1.214600371891591e+01, // 107
-1.713616959175749e+01, // 108
 1.007137113372970e-02, // 109
-4.476881663312008e+00, // 110
 2.174210070879091e+00, // 111
-4.817379705251154e+00, // 112
 1.681435244556941e-02, // 113
-4.004440515350031e-02, // 114
 2.434108461297406e-02, // 115
-3.267085908914282e+01, // 116
 2.261238031104836e-01, // 117
-1.652703021607863e-02, // 118
 8.452226393195426e-03, // 119
 1.309986268863559e-01, // 120
 1.970609396266470e+00, // 121
-1.298049913837580e+01, // 122
-2.007649371991082e-01, // 123
 1.204529042037108e+00, // 124
 7.253504397682050e-04, // 125
-1.530786318942760e-02, // 126
 3.110275000803766e+00, // 127
-4.228833866335797e-02, // 128
 2.180280625383303e+01, // 129
-1.650689883302430e-01, // 130
-2.368948256239230e-05, // 131
-1.036285339236919e+00, // 132
 1.187983727611218e-02, // 133
 1.859225143282260e-02, // 134
-2.330249751394097e+00, // 135
 1.357469951248673e-04, // 136
 1.600821521666809e-01, // 137
 2.328574200848232e+00, // 138
 1.410590043656341e+00, // 139
 1.983201673445016e-03, // 140
 7.332235995605525e-02, // 141
 6.534930154547190e-02, // 142
 3.716833253513874e+00, // 143
-7.847555111123866e+00, // 144
 2.789978703346919e+00, // 145
 4.177174651026835e-03, // 146
-2.209116646282828e+01, // 147
 1.702281977852016e+00, // 148
 2.584708774134988e-01, // 149
-1.288313373652215e-01, // 150
-5.766280313405974e+00, // 151
-4.477614636179508e-01, // 152
-1.531777720497310e+01, // 153
 2.747508821310949e-03, // 154
-1.471673015294249e-03, // 155
-3.340174627417979e-04, // 156
-1.549570325158591e+00, // 157
-1.446151810864421e+00, // 158
-1.655389093212809e-01, // 159
-5.086609045759996e-02, // 160
 1.262473975505324e-03, // 161
 1.550869523929442e+01, // 162
 1.744718974297248e+00, // 163
 7.953451693781556e-04, // 164
-1.686853809046503e-02, // 165
 9.059644965001532e+00, // 166
 5.390246678466023e-03, // 167
 1.573479653089899e-03, // 168
 4.320037323243900e-07, // 169
 8.501981008421403e-01, // 170
-4.236033059225467e-02, // 171
 2.124052436981127e-03, // 172
-9.657553606515993e-03, // 173
-1.734389212302586e+01, // 174
-1.467240117773986e-01, // 175
-2.462018528232141e-01, // 176
-3.204736955401516e+01, // 177
 5.093230923274110e+01, // 178
-4.621910735127867e-04, // 179
 2.007499493142643e-01, // 180
 3.905777890896241e+00, // 181
 1.150462663759133e+00, // 182
 2.767544202527972e-03, // 183
-7.406357696670150e-02, // 184
-5.533368071021750e-02, // 185
 3.902820985633779e-01, // 186
 1.180810960139034e-03, // 187
-1.321350137693934e-06, // 188
 4.748997253810771e-01, // 189
-1.821163450615886e-01, // 190
-6.181677890086714e-01, // 191
-4.251662747487101e-06, // 192
 2.485638730466229e-04, // 193
-7.354594258347435e-05, // 194
-1.825590882641511e-01, // 195
-2.821347304427134e-01, // 196
 2.818583273267856e-03, // 197
-2.851058920198807e-02, // 198
-2.164987446668988e+00, // 199
 4.016514502601147e-01, // 200
-1.716768744619836e-04, // 201
-1.888819624130567e-02, // 202
-3.468789060367750e+00, // 203
 3.123955408573230e-05, // 204
-2.463433662587267e-01, // 205
-9.136542077914546e-02, // 206
 2.244199703357486e-03, // 207
 2.667287368772191e-04, // 208
-7.978260183451583e-02, // 209
-7.310945206889685e-05, // 210
 4.211762664384806e-05, // 211
-9.075875718879008e-07, // 212
 7.946222445467749e-03, // 213
 1.147117087913507e-05, // 214
 4.062273272463764e-03, // 215
-3.860306056065901e-04, // 216
-6.435826876599936e-01, // 217
-1.850779579740836e-02, // 218
-1.145238245865962e-04, // 219
 2.016456475296414e-04, // 220
 1.366512477193898e+00, // 221
-4.159360141259632e-03, // 222
 3.471330469474907e-03, // 223
-4.404964041818991e-02, // 224
-4.500585936262677e-01, // 225
-1.250124798741741e-06, // 226
-3.242886559054914e+00, // 227
-1.947489564130786e+00, // 228
-4.949107745303012e-02, // 229
-4.178745845400832e+00, // 230
-4.720016088094134e+00, // 231
 2.944102320932459e-04, // 232
-2.202676721390379e-02, // 233
 6.717792975774976e-06, // 234
 1.412080731885648e-05, // 235
 1.094395539158315e+00, // 236
-2.279905048996276e-03, // 237
 7.122294768127334e-02, // 238
 1.147966535779441e-04, // 239
 3.773437450981571e-03, // 240
 1.640501332131009e+00, // 241
-4.729956802048203e-03, // 242
 1.417233452756655e-01, // 243
 2.190288310135239e+01, // 244
 1.280145100186112e-06, // 245
-7.301101141546973e-01, // 246
 1.623052132056205e-01, // 247
 8.636363487532336e-04, // 248
-3.584902359392768e-03, // 249
 6.581078598802736e-02, // 250
-5.028536936104249e+00, // 251
-6.518859803217133e+00, // 252
 1.719716316710150e+01, // 253
 2.567384158528374e-01, // 254
-6.197392182222530e-04, // 255
-2.227659443049685e-04, // 256
 1.089832904089329e-05, // 257
 4.455637888578302e+01, // 258
-1.436821217777845e-04, // 259
 7.970282073016881e-05, // 260
 2.473372343850116e-05, // 261
-5.207909444187079e-04, // 262
-1.870880661839970e-02, // 263
 2.879823810471109e-05, // 264
-9.118465902183493e+00, // 265
 8.448039998065786e+00, // 266
-1.361728099350209e-02, // 267
 2.662399787802610e-03, // 268
 1.032982533783347e+00, // 269
-4.033168533115844e-04, // 270
-1.815872638658095e-04, // 271
-8.526487913002556e-02, // 272
-8.765592349439226e+00, // 273
 5.072497610687856e-01, // 274
-2.191641107610052e+00, // 275
 5.481407753714113e-01, // 276
 1.559550710163761e-04, // 277
-6.185124129288349e-02, // 278
-2.237463092572627e-04, // 279
-2.089398819591764e+01, // 280
-8.703336851210358e-03, // 281
 6.541947415672726e-05, // 282
 1.728341285949847e+00, // 283
 1.497142421089481e-03, // 284
-1.948483256188695e-02, // 285
 2.594021273684302e-06, // 286
 4.570017397724764e-01, // 287
 2.747602034332343e-04, // 288
 1.960044101318413e-02, // 289
-6.041296861204350e-02, // 290
 1.910509798511568e-03, // 291
-3.700803826378579e+00, // 292
-1.956706190075194e+01, // 293
-2.185293032382910e-03, // 294
 1.641338299036894e-03, // 295
-7.918515993798962e-01, // 296
-3.333556528291309e-02, // 297
 1.442955122790666e-01, // 298
-3.249563002938236e-05, // 299
-5.918206834839962e-01, // 300
-3.602295106550204e+01, // 301
 4.854807893332195e-05, // 302
-1.903232381838350e-02, // 303
 8.099728129752078e-02, // 304
-8.663691661274097e-01, // 305
 4.460149530942868e+00, // 306
-8.792656247479300e-02, // 307
 3.352093031570502e-03, // 308
-8.979783418357606e-08, // 309
 1.819932068622865e+00, // 310
 2.084889738183337e-03, // 311
 3.603430842648738e-06, // 312
-7.698412303536710e-03, // 313
-1.063623354200667e-05, // 314
-1.759649525557960e-06, // 315
-8.624847707484009e-07, // 316
-7.061524786375042e-02, // 317
 3.294916097058167e-04, // 318
 1.041447081637456e-05, // 319
-2.278634032345849e-03, // 320
-4.303938557973321e-06, // 321
-1.191147943444961e-02, // 322
-7.071580124621977e+01, // 323
-3.585473590935298e+00, // 324
-4.316489172540047e-04, // 325
-5.538891973708038e-04, // 326
 2.521214897740748e+00, // 327
 1.114384066722187e-01, // 328
-1.054788374615222e-04, // 329
 7.970882588738210e-03, // 330
 2.367388109796390e+00, // 331
 5.592500081898648e-01, // 332
 3.979716918153460e-05, // 333
-4.022755909830956e-03, // 334
 7.837574441448897e-01, // 335
-1.319296483411865e-03, // 336
 3.675737657429756e-03, // 337
 1.638803905649210e+00, // 338
 2.463503799379349e+00, // 339
 4.965094315056151e-03, // 340
 6.249770490009886e-01, // 341
-3.167266950446613e+00, // 342
 6.706928686085325e-01, // 343
-4.150098629347470e-02, // 344
-9.293076112907592e+00, // 345
-6.877384294856461e-01, // 346
 1.191095857735023e+00, // 347
 1.392232053672131e+00, // 348
 1.833481481695164e-05, // 349
-4.040623139748674e+01, // 350
-3.693529718357135e-03, // 351
 1.815106232039463e-03, // 352
-1.906976965031933e-05, // 353
-3.324367801242023e-03, // 354
 4.953164936993969e-04, // 355
 2.085939185207961e+01, // 356
-1.713560284046888e-01, // 357
 3.886181453046564e-03, // 358
-4.472780501674337e-02, // 359
-5.162173712023976e-01, // 360
 8.276488330670262e-03, // 361
 1.042786457337499e-01, // 362
 4.814030825500011e-09, // 363
-1.317822944718832e+00, // 364
-1.657769724463546e-01, // 365
-2.864816541139041e-01, // 366
 1.276579036680078e-04, // 367
 1.827560346099065e-01, // 368
 3.541738634572847e-01, // 369
-3.216514169750160e-03, // 370
-1.144671278729378e+01, // 371
 1.052857141756397e-02, // 372
-2.881219967174409e+00, // 373
 5.638814851039225e-05, // 374
 3.373469308679403e-04, // 375
 2.605824830894472e+00, // 376
 1.785848341876104e-01, // 377
 2.124059115896991e-04, // 378
-1.932112288204077e-04, // 379
-1.137947893558851e-01, // 380
 6.063745666162636e-06, // 381
 3.665656860676376e-02, // 382
-7.267264223566470e+00, // 383
 1.029269269823815e+00, // 384
-9.809359990402920e-06, // 385
-5.062502787612357e-01, // 386
-1.186696250447493e+00, // 387
 5.898332326987527e-03, // 388
-6.061392399969806e-01, // 389
-1.362355977663409e-01, // 390
 2.656762315049482e-03, // 391
-7.105249615715670e-04, // 392
 2.101422794411375e-01, // 393
 1.305471793427261e-02, // 394
 5.543401573244741e-02, // 395
-7.340571819021552e-01, // 396
 5.716254048728266e-05, // 397
-5.539289150339347e-05, // 398
 3.494296709735978e-01, // 399
 1.517699569943306e-03, // 400
 1.547522580286673e-03, // 401
 1.344668590295925e+00, // 402
 1.450652785365178e-02, // 403
-1.818275064915377e-04, // 404
 5.340820682598365e-04, // 405
 5.207859209869126e-03, // 406
 9.302267897360746e-03, // 407
-1.712320815121609e-06, // 408
-1.863770781932064e-02, // 409
 1.474330743936377e+00, // 410
 1.303033530291778e+01, // 411
 1.558007924156560e-02, // 412
 2.225946969664278e-01, // 413
 1.528374173831095e+01, // 414
-8.643790349568158e-04, // 415
 5.720424614199902e-05, // 416
-1.243098853075343e+01, // 417
-3.694593070286041e-02, // 418
-1.109714649924323e-04, // 419
 3.598563000983962e-06, // 420
 8.645837000411654e-04, // 421
-4.402830220851693e-07, // 422
 2.603934251215589e+00, // 423
 3.384120297935120e-01, // 424
-4.709127387916949e-05, // 425
 3.751015241152863e-03, // 426
-7.034346167935114e-05, // 427
-8.250607456044337e-01, // 428
 1.123303221030975e-01, // 429
 8.814232563882003e-02, // 430
 2.333040562186387e-01, // 431
-2.428555236732082e-04, // 432
 3.476145439871048e+00, // 433
-4.407005421715939e-03, // 434
-2.304203196378447e-03, // 435
 7.309594341371247e-05, // 436
-7.939390872869857e-07, // 437
-9.907676213983911e-03, // 438
-6.037979446115526e-06, // 439
 1.589514196154302e+00, // 440
 2.277414213412047e-01, // 441
-7.611156411452863e-02, // 442
-3.713972524988657e-01, // 443
 2.251026733905673e+01, // 444
-6.330790617295950e-02, // 445
-4.507654841827425e-06, // 446
-1.345062040153815e+00, // 447
-3.149117892225527e-06, // 448
-1.659747506468360e-02, // 449
 2.282265844763968e-02, // 450
-1.001897217387371e-03, // 451
 1.791800022464304e-01, // 452
 3.246491984173906e-03, // 453
 6.049675903562041e+00, // 454
 9.861420293752747e+00, // 455
 5.915920034100980e+00, // 456
 2.868872877464967e-03, // 457
-5.817040623024941e-04, // 458
 3.350016562590796e+00, // 459
-2.186117934588389e+01, // 460
-2.750904339711283e+00, // 461
 5.018013231859462e-03, // 462
 1.265449896104191e+00, // 463
 9.912678844566977e-01, // 464
-1.548181225817962e-01, // 465
 2.463148044792778e+01, // 466
-9.100824325131574e+00, // 467
-1.201773682398348e+01, // 468
-2.320395250078884e-05, // 469
-8.709961162509558e-03, // 470
 2.915639764013196e-06, // 471
 3.793328926150085e+00, // 472
-1.757337657231806e-01, // 473
 2.086755288441725e-07, // 474
 5.419576134796614e-08, // 475
 3.087168484519892e+01, // 476
-1.953769623690833e-01, // 477
 6.020826561119564e+00, // 478
 4.258307443487467e-01, // 479
-7.395848868978366e-01, // 480
 3.316100906823746e-03, // 481
-9.465560758479082e-02, // 482
-2.888831893062410e-05, // 483
-1.267057122640310e-02, // 484
 6.058481018636344e+00, // 485
-2.552012415249206e-04, // 486
-7.635863031106336e-01, // 487
-1.005489320534588e-03, // 488
-2.570598470224293e-04, // 489
-6.201254098380959e-05, // 490
 3.553514818101678e+00, // 491
 1.217096822216591e+00, // 492
 2.613166728160027e-06, // 493
 4.126711501648065e-05, // 494
-4.653592581433141e-02, // 495
-2.685190748209364e-02, // 496
 7.652093621983494e-02, // 497
-3.404632721948964e-05, // 498
-2.735882378286963e+01, // 499
 1.034573048691016e+00, // 500
-2.908517374214299e+00, // 501
-1.261162997048016e-02, // 502
-2.121224736887941e-03, // 503
 1.237076561291443e-03, // 504
 6.571214159963240e-01, // 505
-2.955097401366338e-03, // 506
-1.746459097246691e-01, // 507
-2.625715064983438e+01, // 508
 2.770925083274628e+00, // 509
-3.100928028062838e-01, // 510
 2.508835773370105e-02, // 511
-2.551198658599291e-04, // 512
-6.560399635951975e-01, // 513
-5.824276010605449e-04, // 514
-4.805299520451650e-01, // 515
 7.791875147430943e-02, // 516
-8.608264627451824e-02, // 517
 3.151661688028644e+00, // 518
 1.499994019191514e-01, // 519
 1.953930540405421e-01, // 520
-1.235962586110921e-05, // 521
 3.502372825234062e+00, // 522
-8.704798840836629e-01, // 523
-8.058616682352467e-02, // 524
 6.013725383528730e-01, // 525
-1.374612981223287e-08, // 526
-2.639223907133437e-01, // 527
 5.703857866755898e-05, // 528
 5.082942948154109e-03, // 529
-5.096035021158674e-02, // 530
 6.237511925929360e-02, // 531
-4.251216770012382e-03, // 532
-1.553428405532968e-03, // 533
 5.620741658462652e-02, // 534
 3.461794472702657e-01, // 535
-1.765726385873403e-02, // 536
 2.661888109083499e-03, // 537
 2.861397795835833e-04, // 538
-1.048087404750572e+01, // 539
 2.229518546392815e+01, // 540
-1.212524481889184e+01, // 541
 3.455406089945944e-02, // 542
-2.535123096707588e-02, // 543
 2.463548793384273e-03, // 544
-6.759132230906026e-05, // 545
 5.833806997528915e+00, // 546
 4.621020977503110e-01, // 547
-5.103010069864772e-02, // 548
 4.250310092896397e-08, // 549
-4.169420876823845e-03, // 550
 7.084216772084951e-03, // 551
 7.652206992701990e-06, // 552
 2.206436729250451e+01, // 553
 2.177743364778275e-01, // 554
-2.351543451522541e+00, // 555
 5.020245766693002e-07, // 556
 2.459690864144484e-02, // 557
 3.947935994117779e+00, // 558
-4.743433416301808e-06, // 559
 6.901878019552013e-02, // 560
 1.854462467458241e+00, // 561
 7.107756664169226e-01, // 562
-1.518692884061255e+01, // 563
 1.306443184657559e-02, // 564
-2.213188488708686e-02, // 565
-1.479071077159850e-02, // 566
 1.327328907657271e-04, // 567
-7.744096047647622e-02, // 568
 4.090784780376319e-02, // 569
 5.051028340132949e-03, // 570
 1.646104515192083e-04, // 571
 2.286633114921991e-04, // 572
-1.471053858803108e-03, // 573
 6.793267806689067e-03, // 574
 8.880447439765260e-06, // 575
 1.666970928092246e-04, // 576
 9.273564448091660e-04, // 577
-1.664887839787108e-04, // 578
 1.179414401694698e-01, // 579
-3.759229233152033e-03, // 580
-4.594367397454813e-02, // 581
 9.833935883145141e+00, // 582
 5.352488987025869e-01, // 583
 2.548884021896729e+01, // 584
-1.079544524026296e-07, // 585
 1.527154824268851e-05, // 586
 1.085118480638366e+01, // 587
 6.822481593097792e-05, // 588
-6.616837168990182e-03, // 589
 2.220829374997792e-01, // 590
-1.617996252194019e-03, // 591
-4.195344317411184e-03, // 592
 3.379468338297059e-01, // 593
 6.525500468819983e-03, // 594
 3.234155441538097e-01, // 595
-3.698383831760473e-03, // 596
-5.836648364683098e+00, // 597
 9.401901547900485e-04, // 598
-2.669830601391911e-02, // 599
 4.602833753760017e+00, // 600
 7.345106311449300e+00, // 601
-1.943446707338735e-01, // 602
 6.055655726738611e-04, // 603
-5.201895937151597e-04, // 604
 3.814225002840870e-03, // 605
 3.907950061390925e+01, // 606
-5.089381859064192e-02, // 607
-5.455508514840536e-03, // 608
 8.341811304863424e-02, // 609
-8.469346552263388e-04, // 610
 7.744796469243995e-05, // 611
-3.680754450969872e-03, // 612
-3.338196875249606e-04, // 613
-2.218761120593843e-01, // 614
 3.524382317004851e-07, // 615
-1.556104249442667e-03, // 616
 5.642073002380853e-01, // 617
-7.715371451513409e-01, // 618
 4.383225218248678e-02, // 619
-2.866120253854005e+00, // 620
-3.731369216246530e-04, // 621
 2.148656999216005e-01, // 622
-2.534750089798980e-01, // 623
 2.356485654586857e-03, // 624
-7.271634574765269e-02, // 625
 2.172185919027652e-07, // 626
-2.862515583438104e-03, // 627
 2.178578895722276e-02, // 628
 2.913195437217616e-03, // 629
 6.969081203828215e-09, // 630
 8.019467393867412e-02, // 631
-5.885716969895768e-03, // 632
-8.230589400380470e-03, // 633
-5.840756964488753e-03, // 634
-5.384310589031420e-02, // 635
-3.203113081505670e+00, // 636
 7.146916827196860e-03, // 637
 7.521182605956040e+00, // 638
-2.078506710979780e-02, // 639
-2.395402688008918e-02, // 640
 1.237183360211069e+00, // 641
 2.557779447191019e-07, // 642
-1.816774952436898e-03, // 643
-1.576227354214245e-03, // 644
 2.280128174918912e-02, // 645
 3.886885221048595e-03, // 646
-4.422858034408320e-04, // 647
-6.499289261435337e-05, // 648
-2.247256614908513e-01, // 649
 5.432710538724051e-04, // 650
 1.864873067049021e-04, // 651
 6.641896924699729e-06, // 652
 1.850541674624955e+00, // 653
-8.886047697790519e-09, // 654
-3.037605721242817e+00, // 655
-7.571369687346467e+00, // 656
-2.008108493625891e-03, // 657
 2.457537754952245e-02, // 658
 1.914739882234232e-02, // 659
-4.487553928931534e-06, // 660
-4.682539775591096e+00, // 661
 6.443470904656983e-04, // 662
-7.073761966199877e-01, // 663
-1.956277330700445e-02, // 664
-1.205595892813812e-05, // 665
 3.370857663478844e-06, // 666
 5.785284168898535e-02, // 667
 6.219220235515728e+00, // 668
-9.278639576452993e-03, // 669
-1.513921716817891e+01, // 670
 9.584010075527466e-01, // 671
 1.536341119036601e+00, // 672
-4.205996942449560e-01, // 673
 4.278882924083403e-03, // 674
 5.373829863774906e-03, // 675
 5.943994921514411e-04, // 676
 4.906030798786056e+00, // 677
 1.516352753742291e-03, // 678
-4.026838739290166e-04, // 679
-5.510365788238644e-02, // 680
-4.195643317068415e+01, // 681
-5.497007453753498e-03, // 682
 7.503263532791092e-06, // 683
 1.908748595607391e-03, // 684
-2.572999310412044e+00, // 685
 1.882843989716369e-03, // 686
 1.425081534879649e-03, // 687
-1.339440937757010e-01, // 688
-2.969931489411688e-05, // 689
 1.244799924683267e+01, // 690
 4.737563457368943e+00, // 691
-3.433394662077520e+00, // 692
-2.216553515436708e+01, // 693
-6.201903797399186e-02, // 694
-6.864715636895767e-02, // 695
-1.354445236254468e-03, // 696
 5.861252269174389e-06, // 697
-1.384328733925906e-02, // 698
 3.177889679671107e-02, // 699
 2.578450101273156e-02, // 700
-5.175851301572684e-07, // 701
 5.401303393179725e+01, // 702
 3.635460817346496e-01, // 703
 5.576220121934950e-07, // 704
-1.820180749803754e+00, // 705
 3.153244915406735e-02, // 706
-6.056423234637870e-03, // 707
 3.843232376916893e+00, // 708
 3.392678568318648e-04, // 709
 7.955410880410571e-02, // 710
 1.843691200622895e-03, // 711
-7.219638775554076e-02, // 712
 3.576049361107575e-02, // 713
 3.738493894743782e-02, // 714
 1.868790877971275e-02, // 715
 2.820348159989914e-02, // 716
-3.478253481814388e+01, // 717
 2.608090993544013e-02, // 718
 3.200854744186537e-01, // 719
 5.353820743784442e-01, // 720
-8.193281814222250e-05, // 721
 1.008955388291573e-01, // 722
 4.575758929423087e+01, // 723
 8.071743976921432e+00, // 724
-2.765889558507204e-01, // 725
 5.539025810979652e-03, // 726
 1.437962759367554e-04, // 727
-1.270100329456192e-02, // 728
-1.062985488220571e-04, // 729
-1.346905835036274e-04, // 730
 1.856737218013021e-03, // 731
 2.381135990200177e-04, // 732
 3.394392107030461e-03, // 733
-1.173214056719174e-06, // 734
 2.035511352833443e+00, // 735
 4.578291605778796e-03, // 736
 2.076230199028554e-02, // 737
 3.300677359725098e-02, // 738
 3.796736144104156e+01, // 739
-6.020552789644645e-02, // 740
-2.463691185484404e-03, // 741
-2.649006352537849e+00, // 742
 1.085780560859839e-03, // 743
 2.914287515627619e-05, // 744
 8.790150601484189e+00, // 745
 2.479924933275356e-04, // 746
-5.421211387152441e-05, // 747
-1.522428579639259e-04, // 748
 1.314973268637574e-07, // 749
 1.399063076679608e+01, // 750
-2.801576137402003e-05, // 751
 1.375772308212367e-02, // 752
-6.668287971235230e-02, // 753
-2.565690544397426e-03, // 754
 2.394985822831348e-07, // 755
-8.909205815155252e-03, // 756
 2.979445759809916e-03, // 757
 1.219837610001022e+00, // 758
-4.726424914947804e-03, // 759
-9.293889797111878e-03, // 760
-1.221830467192390e+01, // 761
-1.036239588353596e-04, // 762
 1.818362347447746e-01, // 763
 1.036765827351264e-04, // 764
-6.766375422881494e-03, // 765
 1.921184419092316e-04, // 766
-1.402302015278057e-04, // 767
 4.618581281188987e-02, // 768
 7.848592471823848e-04, // 769
-1.042504050278239e+00, // 770
-5.667978767663008e+00, // 771
-3.203773211234403e-03, // 772
-5.003483783691641e-03, // 773
 1.391392278211739e-01, // 774
-4.676140168868140e-02, // 775
-1.078973060940738e-05, // 776
-5.326403433304576e-04, // 777
 5.878248966168508e-01, // 778
 6.136596184466527e+00, // 779
-2.653706115456927e-01, // 780
-8.676563291088640e-02, // 781
 1.296525124032634e-02, // 782
-6.594041202517369e-05, // 783
 3.570649641055914e-03, // 784
-1.394747443374013e-06, // 785
-2.983548969590654e-03, // 786
-1.633599417268946e-02, // 787
-4.121629789196606e-02, // 788
 1.162091574220884e-02, // 789
-1.461194955234765e-02, // 790
 1.050796873476668e-04, // 791
 3.994909433370458e-04, // 792
-3.683307157881004e-06, // 793
-2.473932861982647e-02, // 794
-1.025391057155442e-03, // 795
-1.800536123372085e+01, // 796
 3.962315549169131e-02, // 797
-1.574912461203589e+00, // 798
 1.949442132327627e-06, // 799
-4.315305748242147e-01, // 800
 6.838466048013912e-02, // 801
-1.451931398220404e-02, // 802
-8.858868752575690e-09, // 803
-1.796064963755179e-01, // 804
-3.695795467817267e+01, // 805
 2.382032794802753e-04, // 806
 8.793755054128081e-03, // 807
-1.169429017846556e+00, // 808
 8.584615646930619e-03, // 809
 5.250668603750173e-07, // 810
-5.777131306518924e-03, // 811
-1.157400553765464e+01, // 812
 1.127346062920138e-04, // 813
-2.427870991454596e-04, // 814
 3.590542900006882e-01, // 815
 3.295854375672742e+00, // 816
-1.193377633240023e+01, // 817
-2.780857796668433e-03, // 818
-1.167607572652069e-02, // 819
-6.653533369079634e-01, // 820
-1.273926233741580e-05, // 821
-2.678388362906480e-03, // 822
-3.365771596438781e-03, // 823
-5.839375805675427e+00, // 824
-1.900667106439992e+00, // 825
 6.907061601634373e-08, // 826
-1.824138031549807e-01, // 827
 4.924054634234853e-02, // 828
-2.647894239220098e-07, // 829
-1.875212071358325e-04, // 830
-3.340138511289314e-01, // 831
 2.191608443171121e-02, // 832
-9.934699332208427e-03, // 833
-2.636886602118498e-08, // 834
 2.903995507508148e-04, // 835
-7.666988721661470e-03, // 836
-5.593946935209778e-01, // 837
 1.140779662759841e-02, // 838
 7.345120761431752e-02, // 839
-8.942396307675557e-03, // 840
-1.121850971873852e-01, // 841
-7.519991801075779e-01, // 842
-1.261821968260946e-03, // 843
 4.433705598083698e+00, // 844
-3.416709451532009e-02, // 845
-2.775796478474746e+00, // 846
 9.247191199109689e-03, // 847
 4.173184522670710e-03, // 848
-8.584579871932809e-01, // 849
-3.459268599585354e-02, // 850
-1.653574740646664e+00, // 851
 1.940967232367471e-04, // 852
-3.378509859832554e-05, // 853
 2.202794299403212e-05, // 854
-9.305068971375620e-04, // 855
-1.680996244491743e-01, // 856
-4.282040233219823e-02, // 857
-1.527299848871937e-05, // 858
 6.730472107047940e+00, // 859
 5.448472758673055e-01, // 860
 7.473028578756805e-02, // 861
 2.857410504486146e-02, // 862
 9.151467053137718e-02, // 863
 1.626217878164710e+00, // 864
-2.210039550484402e-04, // 865
 8.819692085158372e-03, // 866
-3.294557021382434e+01, // 867
-2.045299341641182e-09, // 868
 3.604846196774253e-03, // 869
 3.563280853290296e-05, // 870
 1.938273663382894e+01, // 871
 1.129786465501936e-05, // 872
 1.018921587618464e-01, // 873
 5.099042872746323e+00, // 874
 1.113613630715980e+00, // 875
 2.131258846231242e+00, // 876
 6.431349589072932e-02, // 877
-4.863288804622617e-05, // 878
-2.348758102969053e-03, // 879
 3.398303976386441e-02, // 880
 2.120684060961917e-05, // 881
-6.116474584491617e+00, // 882
-1.714317757862384e-03, // 883
 1.036176958818972e+01, // 884
 2.586093304163663e-05, // 885
 2.715420284570241e-04, // 886
 2.907209434417854e-02, // 887
 5.942386668488138e-01, // 888
-8.074839580992156e-02, // 889
-5.956601432939788e-05, // 890
-6.361682934654608e-01, // 891
 5.489695994316519e-04, // 892
-4.377013513256626e-01, // 893
-1.148165626684590e+01, // 894
 1.356408633059201e-06, // 895
-5.277357932011829e-03, // 896
-1.219108939193602e-01, // 897
 3.201788684235293e-02, // 898
 1.935965396655871e+00, // 899
 5.704472003765364e-01, // 900
-7.387900248701240e-02, // 901
-2.772581013632134e+01, // 902
 3.065589709103284e-05, // 903
-3.327233053039697e+01, // 904
-1.325060732609068e-04, // 905
-4.994925153984554e-02, // 906
-1.429925335881835e+01, // 907
-9.936023934612340e+00, // 908
 4.960986063077030e-02, // 909
-5.182953411096522e-08, // 910
-2.317878075587306e-03, // 911
 2.679923493305910e-03, // 912
 4.625846225204256e-02, // 913
-8.471506132191296e-08, // 914
-3.242828171582393e+00, // 915
 8.752282772861663e-05, // 916
-1.429389383320465e-01, // 917
-1.032765589325390e+00, // 918
 2.947017773372684e+01, // 919
-5.595709786708879e+00, // 920
-1.169504862411487e-01, // 921
 1.629716721508081e-04, // 922
 1.078179459188177e-03, // 923
-3.322713361359469e-03, // 924
-1.510998415652476e-01, // 925
-4.684577863047668e-02, // 926
-1.215378224417742e-01, // 927
-3.559873960376999e-01, // 928
-6.300483915988867e-01, // 929
-2.045491812625914e-03, // 930
 6.710852517093439e-05, // 931
-3.718745394873513e-02, // 932
 3.644076619509210e-04, // 933
 1.063690881735970e-02, // 934
 2.401190685127730e-04, // 935
 4.771424794855791e+00, // 936
 5.936034264043681e-06, // 937
 1.821692906028386e-04, // 938
-3.843354232039568e-03, // 939
 1.439153007804005e-02, // 940
 1.310619029064417e-03, // 941
 2.248270090312536e-05, // 942
 7.267933185006640e+00, // 943
 1.993455611995262e-07, // 944
 3.059451746154108e+00, // 945
 5.237465451027061e-01, // 946
 2.659739695757120e-01, // 947
-7.098894391521995e-01, // 948
 1.544813817782569e+00, // 949
-4.760166871357921e+00, // 950
 9.508795770885127e-06, // 951
 1.839653921462793e+00, // 952
-2.887842066021207e-01, // 953
 6.605855625699254e-03, // 954
 8.004977937148018e-02, // 955
-6.551228307457032e-03, // 956
 4.840077348497321e-05, // 957
 8.899092460069744e-04, // 958
-1.039809997480015e-03, // 959
 9.330182344059390e-05, // 960
 1.751177199807386e-02, // 961
-1.756328575749572e-02, // 962
-3.684999886006661e-03, // 963
 5.387996847318889e-07, // 964
-1.621853599625827e-04, // 965
 4.957811552861964e-01, // 966
-1.616121823047613e+01, // 967
-5.170754160253959e-04, // 968
-2.399226899358833e-04, // 969
 2.116953820009485e+00, // 970
 1.024496648858925e-03, // 971
 3.595545825177629e-03, // 972
-2.192878363381176e-01, // 973
 5.030102708791271e-02, // 974
-1.107921355923058e-03, // 975
-1.819668667126031e+01, // 976
-3.646260323526450e-06, // 977
-3.421792622292328e-03, // 978
 3.818645894768396e-03, // 979
 3.202411715281522e-01, // 980
-1.422102881989488e+01, // 981
 5.919410097817090e-01, // 982
 4.886038229362025e-02, // 983
 1.005667853435985e-01, // 984
-3.658887683979942e+00, // 985
-2.950313410627846e-03, // 986
-7.490817687519010e-04, // 987
 4.961062894122171e+00, // 988
-2.266480265973313e-02, // 989
 5.999657773824230e-05, // 990
 3.509170651260213e-02, // 991
 5.636949645770117e-02, // 992
-5.058173119379472e-07, // 993
 9.559906755444804e-06, // 994
-4.261134301912243e-01, // 995
-1.143397970048063e-02, // 996
 4.861142220341222e+00, // 997
 4.726525113067627e-06, // 998
 7.562495691313791e-04, // 999
 5.964144522402742e-03, // 1000
 7.331270551180781e-02, // 1001
-1.876587611638189e-02, // 1002
-1.506567068947190e-02, // 1003
-7.785623237096412e-01, // 1004
-4.069833977115517e-01, // 1005
-1.121661993822355e-05, // 1006
-2.588665175187388e-01, // 1007
-4.712075769942892e-01, // 1008
-4.012992160603100e-03, // 1009
-8.533514200076990e-01, // 1010
 3.015075040562074e-03, // 1011
 3.465326088189584e-06, // 1012
-3.825214227673853e-07, // 1013
-5.020059476719682e-01, // 1014
-4.531109942676199e-04, // 1015
 4.051647072363208e+00, // 1016
-2.447313099075079e-02, // 1017
 3.727563825210212e-03, // 1018
 1.617991680038638e-01, // 1019
-6.138703626065843e-01, // 1020
-2.785284000273053e+00, // 1021
 4.193831959350773e+00, // 1022
 1.121784846846883e+01, // 1023
-8.109259706564544e-03, // 1024
-4.927729375739277e-02, // 1025
 3.428513788907147e+01, // 1026
-4.708419544093425e+01, // 1027
 1.899975542732963e-06, // 1028
 3.230639327006170e-08, // 1029
 4.589559691250963e-03, // 1030
-2.292161361724706e-01, // 1031
 1.146386558988417e+01, // 1032
 5.720566920868724e-03, // 1033
 8.925907248319620e+00, // 1034
 4.610520977677724e-03, // 1035
 3.821944145010782e-04, // 1036
-4.698855704032695e-01, // 1037
-1.085887612084907e-04, // 1038
 5.179937182561263e-03, // 1039
-6.527762991799544e-01, // 1040
-1.873000435703786e+01, // 1041
 3.096235866825173e+00, // 1042
 2.108665625924912e-04, // 1043
 4.107263600971762e-03, // 1044
 9.256460181251263e+00, // 1045
 1.544897470712902e-01, // 1046
-2.387867335882334e-04, // 1047
-3.066570019299726e-04, // 1048
-6.624097173333641e-07, // 1049
 4.248756009904714e+00, // 1050
 1.633024462248405e-03, // 1051
 3.039525265285263e-04, // 1052
-3.960700914854015e-04, // 1053
 2.485875060768307e-04, // 1054
 1.640602624467303e-05, // 1055
 6.375415289145645e-05, // 1056
 2.790501680902880e-01, // 1057
-4.049975664451355e-05, // 1058
 3.290614628971892e-02, // 1059
-3.426486848848299e-05, // 1060
 2.627826637516196e+01, // 1061
 6.382173355323668e-02, // 1062
 8.208833986977541e-02, // 1063
 6.724902727233984e-03, // 1064
 2.675958983907541e+00, // 1065
 7.780938903915243e-04, // 1066
-1.625481198127058e-04, // 1067
-3.727495426389714e+01, // 1068
-9.511494578582394e-06, // 1069
 5.515123012862666e-06, // 1070
 1.125945430567736e-05, // 1071
-3.481148798307749e-06, // 1072
 6.152226292576030e+00, // 1073
-1.965679129812017e+01, // 1074
-3.115705959778571e-07, // 1075
 2.450322018611112e+01, // 1076
 3.275285332088020e-03, // 1077
 2.658030839341301e-01, // 1078
 1.529372565661387e-01, // 1079
 2.534508872810616e-02, // 1080
-6.862824101421496e-01, // 1081
 3.675382767450909e+01, // 1082
-1.479427969364611e+01, // 1083
-7.750345925809081e-04, // 1084
 2.143764802440212e-05, // 1085
-7.876561562289284e-01, // 1086
 2.624580619273404e-06, // 1087
-1.933842262878658e-01, // 1088
-4.456007722127988e+00, // 1089
 1.226429825999959e-03, // 1090
-6.676792397519821e-06, // 1091
-9.330746579541247e-08, // 1092
 4.938124145755326e-04, // 1093
 1.370276129925357e-02, // 1094
-5.471522105232261e-04, // 1095
 2.758109001065285e+00, // 1096
-1.916824504980832e-03, // 1097
-2.861574677575530e-02, // 1098
 3.645845097234857e+01, // 1099
 3.417090128974336e-01, // 1100
 3.001397342199453e-04, // 1101
-3.158832669736865e-02, // 1102
 2.469779863002113e+01, // 1103
-3.973411113399681e-01, // 1104
-2.562462572992932e-05, // 1105
 7.071677122088189e-02, // 1106
-2.761450869737769e+01, // 1107
-1.297497281168175e+00, // 1108
-3.779003591558317e-01, // 1109
 2.138102531735684e-05, // 1110
 1.017321288843137e-04, // 1111
 1.385420398487414e-01, // 1112
-1.041451784072084e-01, // 1113
-2.151672298492472e-04, // 1114
 2.832816016454615e+00, // 1115
 1.892819492498616e-01, // 1116
-3.929840148770116e-06, // 1117
 5.989463961379190e-03, // 1118
-7.082905759068934e-03, // 1119
-9.914346190592096e-07, // 1120
 4.253012009831640e+00, // 1121
-7.920774867188362e-07, // 1122
 8.151038012593285e-01, // 1123
 1.262773414088211e-04, // 1124
 8.503895512734696e-05, // 1125
 2.646992101575182e-02, // 1126
-3.873057178713138e-05, // 1127
 6.218619381762836e-02, // 1128
-1.615424354133568e+00, // 1129
 7.364002374399809e-05, // 1130
-1.925567023197362e+01, // 1131
-1.398545266979470e-02, // 1132
-4.511266224094748e-05, // 1133
 6.863735713874466e+00, // 1134
-1.758026549806399e-04, // 1135
-2.648815865374152e-02, // 1136
 2.996884285981141e-01, // 1137
 8.784738448344048e-01, // 1138
-2.305119487326839e-06, // 1139
 7.136622687857974e-04, // 1140
 1.874301539765773e+00, // 1141
-6.029968100492211e-03, // 1142
-8.669656092256148e-01, // 1143
 1.558741605840441e+01, // 1144
-8.769869583771261e-04, // 1145
 2.259817473796693e-06, // 1146
-2.879360837959542e+01, // 1147
-2.085301210949298e-03, // 1148
 3.942205460826419e-07, // 1149
-3.306348873061745e-03, // 1150
 1.222444128672915e+00, // 1151
 4.054333863565826e+00, // 1152
-6.798818388793365e-03, // 1153
 2.120664290995000e-01, // 1154
 7.324740362780387e+00, // 1155
-4.784182700805872e-04, // 1156
 5.017768532910752e+01, // 1157
 3.535331414870995e+00, // 1158
-1.125859429256157e-05, // 1159
-2.568800260036163e-03, // 1160
 9.191882032520031e+00, // 1161
 5.033731744501829e-01, // 1162
 2.156077759884708e-03, // 1163
-1.794628013770184e-04, // 1164
 6.629611730976698e-01, // 1165
-5.572726090224956e-06, // 1166
-1.296954945278037e-04, // 1167
-1.016354817830957e-04, // 1168
-9.027109019966798e-01, // 1169
 1.213414425844759e+00, // 1170
 9.113657725484103e-05, // 1171
-1.306878632598747e-07, // 1172
-8.163993183639701e-01, // 1173
 1.042635525167467e+00, // 1174
 1.288397127279193e-01, // 1175
-7.072932756083340e-02, // 1176
-1.677261528887530e-04, // 1177
 4.965060732627878e-02, // 1178
-1.407190280659572e-01, // 1179
-1.133868991479745e+00, // 1180
 2.343344460225165e+01, // 1181
-1.425395335858322e-03, // 1182
 3.167922901070984e-05, // 1183
-6.992740541531443e-03, // 1184
 3.059708244754718e-02, // 1185
 1.901195435207410e-02, // 1186
 2.631689416588736e-02, // 1187
-1.299501236879314e-01, // 1188
-1.695857909591056e-02, // 1189
 6.102439248983705e-03, // 1190
-6.552876599433814e-03, // 1191
-8.738528624217210e+00, // 1192
-1.253950569188806e-09, // 1193
 5.438622912804559e-04, // 1194
 2.576864441842010e-04, // 1195
-2.072752943935192e+00, // 1196
 3.180122347329918e+00, // 1197
 7.025119693196491e-03, // 1198
 1.657470550549532e-08, // 1199
 4.147316913338664e-01, // 1200
-1.864833070933556e-02, // 1201
-4.437070414296980e-07, // 1202
 6.345809651420915e-03, // 1203
-1.094297558635484e+01, // 1204
-1.421579478377596e+01, // 1205
-3.331480832679309e-01, // 1206
 1.042456067063260e-03, // 1207
-4.077528402944282e-01, // 1208
 2.415881929759357e-02, // 1209
 6.726194877817987e-02, // 1210
 3.240465660508152e-03, // 1211
 3.161586098740612e+00, // 1212
-2.540181319401348e-06, // 1213
-2.229291727891068e+01, // 1214
-2.998591870554428e-02, // 1215
-2.016619605237410e-03, // 1216
-7.333614912946012e-01, // 1217
 9.349341539505571e-05, // 1218
-1.150013327776374e-01, // 1219
 6.210033659932547e-03, // 1220
 5.839865013257727e-02, // 1221
 2.821337988408600e-04, // 1222
-4.105345392680047e+00, // 1223
 6.551794594078981e-01, // 1224
-8.049706406078606e-04, // 1225
-1.876326305421721e-02, // 1226
-2.142000936710373e-05, // 1227
-2.716525093614387e+01, // 1228
 6.061945622979798e-03, // 1229
 7.955349326913405e-02, // 1230
 1.177532381341826e-05, // 1231
 1.049546746902161e+01, // 1232
 6.174483656828747e-05, // 1233
 9.158681319961818e-01, // 1234
 9.440087903622326e-04, // 1235
-1.461351985312000e-01, // 1236
-8.923931010774534e-03, // 1237
-1.702884880939702e-05, // 1238
-3.673602844202234e-03, // 1239
-4.209655280696561e-01, // 1240
-5.101846318025599e-01, // 1241
-3.730563664473788e-03, // 1242
 3.542140810660133e-03, // 1243
 3.075531142009396e+00, // 1244
-4.938481025961542e-02, // 1245
-3.691101368573284e-01, // 1246
 7.711612108828887e-02, // 1247
 1.815340831143074e-02, // 1248
-4.523398803892798e-08, // 1249
 4.046284946021455e+00, // 1250
 4.428330334897504e-05, // 1251
 1.674349815520887e+00, // 1252
-4.048877104677431e-02, // 1253
-4.666892505413262e-02, // 1254
 2.569128874777063e-04, // 1255
 5.139553557156708e-04, // 1256
-6.196493013630290e-01, // 1257
 1.707989450749896e-04, // 1258
-8.571240609359359e-04, // 1259
 8.998717625950205e-05, // 1260
-2.922276468918383e-07, // 1261
 7.333721201205377e-05, // 1262
 1.171015621680401e-09, // 1263
-7.843028659625174e-08, // 1264
 5.543953154913471e+00, // 1265
 2.075289942420768e+00, // 1266
-5.680609900115673e-03, // 1267
 1.734496493911254e+01, // 1268
-4.727197301426728e-01, // 1269
-2.174249360619798e-05, // 1270
-3.304816500960019e-01, // 1271
-1.452068814952142e+01, // 1272
-4.108620217852394e-05, // 1273
-4.744132453600592e+00, // 1274
-2.101849297290470e-03, // 1275
 7.277376436948850e-02, // 1276
-2.895183366380676e-01, // 1277
 1.350897946607245e-02, // 1278
 1.911493346807947e+01, // 1279
-3.348982729490725e-03, // 1280
-5.999321096566665e-06, // 1281
 5.756002458592718e+00, // 1282
-9.723807557690095e-01, // 1283
 1.570118134597683e+01, // 1284
-5.045505793909026e-04, // 1285
-2.204107284552995e-03, // 1286
-1.203642461877044e+00, // 1287
-1.448892290998504e-05, // 1288
-2.199063865689063e-06, // 1289
 1.209374758138352e-02, // 1290
-6.971262914676421e-02, // 1291
 6.585818075581118e-03, // 1292
-2.851873870059720e+01, // 1293
-1.411022084050705e-04, // 1294
 5.840195744440036e-06, // 1295
 4.760277704975864e-04, // 1296
-2.484628375993481e-07, // 1297
 1.938666573419381e-02, // 1298
-2.511631521268098e-02, // 1299
 7.126536720591825e-06, // 1300
 4.320350473293295e-03, // 1301
 3.215510827095035e-04, // 1302
-2.495619067062463e-03, // 1303
-1.804235124528875e+00, // 1304
 1.543821669639797e+01, // 1305
 1.415302767218123e-03, // 1306
-1.593823107671214e+00, // 1307
 4.117349426017302e-01, // 1308
-2.053707972176918e-02, // 1309
-3.153196244246832e-02, // 1310
-1.325289491357691e-06, // 1311
-3.200728070037300e+01, // 1312
-8.796409397948676e-04, // 1313
-2.509288670695743e+00, // 1314
 1.740602785252937e-05, // 1315
-1.835293545732876e-01, // 1316
 3.286796082370582e+00, // 1317
-3.781575073318374e-03, // 1318
-3.607659880492452e-10, // 1319
 5.923074845395059e-06, // 1320
 4.058881421234979e+01, // 1321
-1.408157815215555e+00, // 1322
 1.391903839442306e-03, // 1323
-9.888242942790709e+00, // 1324
-3.738973073435103e-05, // 1325
 1.823284565153348e-02, // 1326
-9.017425155510817e-04, // 1327
-5.397178906553365e-05, // 1328
-1.697044080549411e-03, // 1329
 6.193965526974751e+00, // 1330
-1.929075290567580e-02, // 1331
-2.665442225863983e-04, // 1332
 1.149381655079882e-01, // 1333
-6.216446490059496e-03, // 1334
-1.634683541709846e-05, // 1335
 1.449892998671862e+00, // 1336
-2.802758189838056e+00, // 1337
 5.528433845209551e-02, // 1338
 1.787729724447993e-03, // 1339
-1.995938068840936e-04, // 1340
 1.980900667084929e-01, // 1341
-2.525725461230817e+01, // 1342
-1.013056528855576e-02, // 1343
-1.475000998506019e-06}; // 1344

  m_k_intra_AB =  1.216569220088874e+00; // A^(-1))
  m_d_intra_AB =  2.301504692694771e+00; // A^(-1))
  m_k_intra_BB =  5.904685350838593e-01; // A^(-1))
  m_d_intra_BB =  2.258601151865597e-02; // A^(-1))
  m_k_AA =  7.150995477228211e-01; // A^(-1))
  m_d_AA =  5.505978574540709e+00; // A^(-1))
  m_k_AB =  1.281112798843487e+00; // A^(-1))
  m_d_AB =  5.986769242850276e+00; // A^(-1))
  m_k_BB =  8.380059156636788e-01; // A^(-1))
  m_d_BB =  4.345966683008691e+00; // A^(-1))
  m_r2i =  8.000000000000000e+00; // A
  m_r2f =  9.000000000000000e+00; // A

  }
}

double x2b_A1B4_A1B4_v1x::f_switch(const double& r, double& g) const
{
    if (r > m_r2f) {
        g = 0.0;
        return 0.0;
    } else if (r > m_r2i) {
        const double t1 = M_PI/(m_r2f - m_r2i);
        const double x = (r - m_r2i)*t1;
        g = - std::sin(x)*t1/2.0;
        return (1.0 + std::cos(x))/2.0;
    } else {
        g = 0.0;
        return 1.0;
    }
}

//----------------------------------------------------------------------------//

double x2b_A1B4_A1B4_v1x::eval(const double* xyz1, const double* xyz2, const size_t ndim) const
{

    std::vector<double> energies(ndim,0.0);

    for (size_t j = 0; j < ndim; j++) {
        double mon1[15];
        double mon2[15];

        std::copy(xyz1 + j * 15, xyz1 + (j+1) * 15, mon1);
        std::copy(xyz2 + j * 15, xyz2 + (j+1) * 15, mon2);

        const double d12[3] = {mon1[0] -  mon2[0],
                               mon1[1] -  mon2[1],
                               mon1[2] -  mon2[2]};
    
        const double r12sq = d12[0]*d12[0] + d12[1]*d12[1] + d12[2]*d12[2];
        const double r12 = std::sqrt(r12sq);
    
        if (r12 > m_r2f)
            return 0.0;
    
        double xcrd[30]; // coordinates of real sites ONLY
    
        std::copy(mon1, mon1 + 15, xcrd);
        std::copy(mon2, mon2 + 15, xcrd + 15);
        
        double v[45];
        
        double sw = 0.0;
        double gsw = 0.0;
        
        const double* A_1_a= xcrd + 0;
        const double* B_1_a= xcrd + 3;
        const double* B_2_a= xcrd + 6;
        const double* B_3_a= xcrd + 9;
        const double* B_4_a= xcrd + 12;
    
        const double* A_1_b= xcrd + 15;
        const double* B_1_b= xcrd + 18;
        const double* B_2_b= xcrd + 21;
        const double* B_3_b= xcrd + 24;
        const double* B_4_b= xcrd + 27;
    
    
        
        variable vr[45];
        
        v[0]  = vr[0].v_exp0(m_d_intra_AB, m_k_intra_AB, A_1_a, B_1_a);
        v[1]  = vr[1].v_exp0(m_d_intra_AB, m_k_intra_AB, A_1_a, B_2_a);
        v[2]  = vr[2].v_exp0(m_d_intra_AB, m_k_intra_AB, A_1_a, B_3_a);
        v[3]  = vr[3].v_exp0(m_d_intra_AB, m_k_intra_AB, A_1_a, B_4_a);
        v[4]  = vr[4].v_exp0(m_d_intra_BB, m_k_intra_BB, B_1_a, B_2_a);
        v[5]  = vr[5].v_exp0(m_d_intra_BB, m_k_intra_BB, B_1_a, B_3_a);
        v[6]  = vr[6].v_exp0(m_d_intra_BB, m_k_intra_BB, B_1_a, B_4_a);
        v[7]  = vr[7].v_exp0(m_d_intra_BB, m_k_intra_BB, B_2_a, B_3_a);
        v[8]  = vr[8].v_exp0(m_d_intra_BB, m_k_intra_BB, B_2_a, B_4_a);
        v[9]  = vr[9].v_exp0(m_d_intra_BB, m_k_intra_BB, B_3_a, B_4_a);
    
        v[10]  = vr[10].v_exp0(m_d_intra_AB, m_k_intra_AB, A_1_b, B_1_b);
        v[11]  = vr[11].v_exp0(m_d_intra_AB, m_k_intra_AB, A_1_b, B_2_b);
        v[12]  = vr[12].v_exp0(m_d_intra_AB, m_k_intra_AB, A_1_b, B_3_b);
        v[13]  = vr[13].v_exp0(m_d_intra_AB, m_k_intra_AB, A_1_b, B_4_b);
        v[14]  = vr[14].v_exp0(m_d_intra_BB, m_k_intra_BB, B_1_b, B_2_b);
        v[15]  = vr[15].v_exp0(m_d_intra_BB, m_k_intra_BB, B_1_b, B_3_b);
        v[16]  = vr[16].v_exp0(m_d_intra_BB, m_k_intra_BB, B_1_b, B_4_b);
        v[17]  = vr[17].v_exp0(m_d_intra_BB, m_k_intra_BB, B_2_b, B_3_b);
        v[18]  = vr[18].v_exp0(m_d_intra_BB, m_k_intra_BB, B_2_b, B_4_b);
        v[19]  = vr[19].v_exp0(m_d_intra_BB, m_k_intra_BB, B_3_b, B_4_b);
    
        v[20]  = vr[20].v_exp0(m_d_AA, m_k_AA, A_1_a, A_1_b);
        v[21]  = vr[21].v_exp0(m_d_AB, m_k_AB, A_1_a, B_1_b);
        v[22]  = vr[22].v_exp0(m_d_AB, m_k_AB, A_1_a, B_2_b);
        v[23]  = vr[23].v_exp0(m_d_AB, m_k_AB, A_1_a, B_3_b);
        v[24]  = vr[24].v_exp0(m_d_AB, m_k_AB, A_1_a, B_4_b);
    
        v[25]  = vr[25].v_exp0(m_d_AB, m_k_AB, B_1_a, A_1_b);
        v[26]  = vr[26].v_exp0(m_d_BB, m_k_BB, B_1_a, B_1_b);
        v[27]  = vr[27].v_exp0(m_d_BB, m_k_BB, B_1_a, B_2_b);
        v[28]  = vr[28].v_exp0(m_d_BB, m_k_BB, B_1_a, B_3_b);
        v[29]  = vr[29].v_exp0(m_d_BB, m_k_BB, B_1_a, B_4_b);
    
        v[30]  = vr[30].v_exp0(m_d_AB, m_k_AB, B_2_a, A_1_b);
        v[31]  = vr[31].v_exp0(m_d_BB, m_k_BB, B_2_a, B_1_b);
        v[32]  = vr[32].v_exp0(m_d_BB, m_k_BB, B_2_a, B_2_b);
        v[33]  = vr[33].v_exp0(m_d_BB, m_k_BB, B_2_a, B_3_b);
        v[34]  = vr[34].v_exp0(m_d_BB, m_k_BB, B_2_a, B_4_b);
    
        v[35]  = vr[35].v_exp0(m_d_AB, m_k_AB, B_3_a, A_1_b);
        v[36]  = vr[36].v_exp0(m_d_BB, m_k_BB, B_3_a, B_1_b);
        v[37]  = vr[37].v_exp0(m_d_BB, m_k_BB, B_3_a, B_2_b);
        v[38]  = vr[38].v_exp0(m_d_BB, m_k_BB, B_3_a, B_3_b);
        v[39]  = vr[39].v_exp0(m_d_BB, m_k_BB, B_3_a, B_4_b);
    
        v[40]  = vr[40].v_exp0(m_d_AB, m_k_AB, B_4_a, A_1_b);
        v[41]  = vr[41].v_exp0(m_d_BB, m_k_BB, B_4_a, B_1_b);
        v[42]  = vr[42].v_exp0(m_d_BB, m_k_BB, B_4_a, B_2_b);
        v[43]  = vr[43].v_exp0(m_d_BB, m_k_BB, B_4_a, B_3_b);
        v[44]  = vr[44].v_exp0(m_d_BB, m_k_BB, B_4_a, B_4_b);
    
         
        
        sw = f_switch(r12, gsw);
        
        energies[j] = sw*polynomial::eval(coefficients.data(), v);
        
    }

    double energy = 0.0;
    for (size_t i = 0; i < ndim; i++) {
      energy += energies[i];
    }

    return energy;
}


double x2b_A1B4_A1B4_v1x::eval(const double* xyz1, const double* xyz2,
                double * grad1, double * grad2, const size_t ndim) const
{

    std::vector<double> energies(ndim,0.0);

    for (size_t j = 0; j < ndim; j++) {
        double mon1[15];
        double mon2[15];

        std::copy(xyz1 + j * 15, xyz1 + (j+1) * 15, mon1);
        std::copy(xyz2 + j * 15, xyz2 + (j+1) * 15, mon2);

        const double d12[3] = {mon1[0] -  mon2[0],
                               mon1[1] -  mon2[1],
                               mon1[2] -  mon2[2]};

        const double r12sq = d12[0]*d12[0] + d12[1]*d12[1] + d12[2]*d12[2];
        const double r12 = std::sqrt(r12sq);

        if (r12 > m_r2f)
            return 0.0;

        double xcrd[30]; // coordinates of real sites ONLY

        std::copy(mon1, mon1 + 15, xcrd);
        std::copy(mon2, mon2 + 15, xcrd + 15);
        
        double v[45];
        
        double sw = 0.0;
        double gsw = 0.0;
        
        const double* A_1_a= xcrd + 0;
        const double* B_1_a= xcrd + 3;
        const double* B_2_a= xcrd + 6;
        const double* B_3_a= xcrd + 9;
        const double* B_4_a= xcrd + 12;

        const double* A_1_b= xcrd + 15;
        const double* B_1_b= xcrd + 18;
        const double* B_2_b= xcrd + 21;
        const double* B_3_b= xcrd + 24;
        const double* B_4_b= xcrd + 27;


        
        variable vr[45];
        
        v[0]  = vr[0].v_exp0(m_d_intra_AB, m_k_intra_AB, A_1_a, B_1_a);
        v[1]  = vr[1].v_exp0(m_d_intra_AB, m_k_intra_AB, A_1_a, B_2_a);
        v[2]  = vr[2].v_exp0(m_d_intra_AB, m_k_intra_AB, A_1_a, B_3_a);
        v[3]  = vr[3].v_exp0(m_d_intra_AB, m_k_intra_AB, A_1_a, B_4_a);
        v[4]  = vr[4].v_exp0(m_d_intra_BB, m_k_intra_BB, B_1_a, B_2_a);
        v[5]  = vr[5].v_exp0(m_d_intra_BB, m_k_intra_BB, B_1_a, B_3_a);
        v[6]  = vr[6].v_exp0(m_d_intra_BB, m_k_intra_BB, B_1_a, B_4_a);
        v[7]  = vr[7].v_exp0(m_d_intra_BB, m_k_intra_BB, B_2_a, B_3_a);
        v[8]  = vr[8].v_exp0(m_d_intra_BB, m_k_intra_BB, B_2_a, B_4_a);
        v[9]  = vr[9].v_exp0(m_d_intra_BB, m_k_intra_BB, B_3_a, B_4_a);

        v[10]  = vr[10].v_exp0(m_d_intra_AB, m_k_intra_AB, A_1_b, B_1_b);
        v[11]  = vr[11].v_exp0(m_d_intra_AB, m_k_intra_AB, A_1_b, B_2_b);
        v[12]  = vr[12].v_exp0(m_d_intra_AB, m_k_intra_AB, A_1_b, B_3_b);
        v[13]  = vr[13].v_exp0(m_d_intra_AB, m_k_intra_AB, A_1_b, B_4_b);
        v[14]  = vr[14].v_exp0(m_d_intra_BB, m_k_intra_BB, B_1_b, B_2_b);
        v[15]  = vr[15].v_exp0(m_d_intra_BB, m_k_intra_BB, B_1_b, B_3_b);
        v[16]  = vr[16].v_exp0(m_d_intra_BB, m_k_intra_BB, B_1_b, B_4_b);
        v[17]  = vr[17].v_exp0(m_d_intra_BB, m_k_intra_BB, B_2_b, B_3_b);
        v[18]  = vr[18].v_exp0(m_d_intra_BB, m_k_intra_BB, B_2_b, B_4_b);
        v[19]  = vr[19].v_exp0(m_d_intra_BB, m_k_intra_BB, B_3_b, B_4_b);

        v[20]  = vr[20].v_exp0(m_d_AA, m_k_AA, A_1_a, A_1_b);
        v[21]  = vr[21].v_exp0(m_d_AB, m_k_AB, A_1_a, B_1_b);
        v[22]  = vr[22].v_exp0(m_d_AB, m_k_AB, A_1_a, B_2_b);
        v[23]  = vr[23].v_exp0(m_d_AB, m_k_AB, A_1_a, B_3_b);
        v[24]  = vr[24].v_exp0(m_d_AB, m_k_AB, A_1_a, B_4_b);

        v[25]  = vr[25].v_exp0(m_d_AB, m_k_AB, B_1_a, A_1_b);
        v[26]  = vr[26].v_exp0(m_d_BB, m_k_BB, B_1_a, B_1_b);
        v[27]  = vr[27].v_exp0(m_d_BB, m_k_BB, B_1_a, B_2_b);
        v[28]  = vr[28].v_exp0(m_d_BB, m_k_BB, B_1_a, B_3_b);
        v[29]  = vr[29].v_exp0(m_d_BB, m_k_BB, B_1_a, B_4_b);

        v[30]  = vr[30].v_exp0(m_d_AB, m_k_AB, B_2_a, A_1_b);
        v[31]  = vr[31].v_exp0(m_d_BB, m_k_BB, B_2_a, B_1_b);
        v[32]  = vr[32].v_exp0(m_d_BB, m_k_BB, B_2_a, B_2_b);
        v[33]  = vr[33].v_exp0(m_d_BB, m_k_BB, B_2_a, B_3_b);
        v[34]  = vr[34].v_exp0(m_d_BB, m_k_BB, B_2_a, B_4_b);

        v[35]  = vr[35].v_exp0(m_d_AB, m_k_AB, B_3_a, A_1_b);
        v[36]  = vr[36].v_exp0(m_d_BB, m_k_BB, B_3_a, B_1_b);
        v[37]  = vr[37].v_exp0(m_d_BB, m_k_BB, B_3_a, B_2_b);
        v[38]  = vr[38].v_exp0(m_d_BB, m_k_BB, B_3_a, B_3_b);
        v[39]  = vr[39].v_exp0(m_d_BB, m_k_BB, B_3_a, B_4_b);

        v[40]  = vr[40].v_exp0(m_d_AB, m_k_AB, B_4_a, A_1_b);
        v[41]  = vr[41].v_exp0(m_d_BB, m_k_BB, B_4_a, B_1_b);
        v[42]  = vr[42].v_exp0(m_d_BB, m_k_BB, B_4_a, B_2_b);
        v[43]  = vr[43].v_exp0(m_d_BB, m_k_BB, B_4_a, B_3_b);
        v[44]  = vr[44].v_exp0(m_d_BB, m_k_BB, B_4_a, B_4_b);

         
        
        double g[45];
        
        sw = f_switch(r12, gsw);

        energies[j] = polynomial::eval(coefficients.data(), v, g);
        
        double xgrd[30];
        std::fill(xgrd, xgrd + 30, 0.0);

        double* A_1_a_g = xgrd + 0;
        double* B_1_a_g = xgrd + 3;
        double* B_2_a_g = xgrd + 6;
        double* B_3_a_g = xgrd + 9;
        double* B_4_a_g = xgrd + 12;

        double* A_1_b_g = xgrd + 15;
        double* B_1_b_g = xgrd + 18;
        double* B_2_b_g = xgrd + 21;
        double* B_3_b_g = xgrd + 24;
        double* B_4_b_g = xgrd + 27;


        vr[0].grads(g[0], A_1_a_g, B_1_a_g, A_1_a, B_1_a);
        vr[1].grads(g[1], A_1_a_g, B_2_a_g, A_1_a, B_2_a);
        vr[2].grads(g[2], A_1_a_g, B_3_a_g, A_1_a, B_3_a);
        vr[3].grads(g[3], A_1_a_g, B_4_a_g, A_1_a, B_4_a);
        vr[4].grads(g[4], B_1_a_g, B_2_a_g, B_1_a, B_2_a);
        vr[5].grads(g[5], B_1_a_g, B_3_a_g, B_1_a, B_3_a);
        vr[6].grads(g[6], B_1_a_g, B_4_a_g, B_1_a, B_4_a);
        vr[7].grads(g[7], B_2_a_g, B_3_a_g, B_2_a, B_3_a);
        vr[8].grads(g[8], B_2_a_g, B_4_a_g, B_2_a, B_4_a);
        vr[9].grads(g[9], B_3_a_g, B_4_a_g, B_3_a, B_4_a);

        vr[10].grads(g[10], A_1_b_g, B_1_b_g, A_1_b, B_1_b);
        vr[11].grads(g[11], A_1_b_g, B_2_b_g, A_1_b, B_2_b);
        vr[12].grads(g[12], A_1_b_g, B_3_b_g, A_1_b, B_3_b);
        vr[13].grads(g[13], A_1_b_g, B_4_b_g, A_1_b, B_4_b);
        vr[14].grads(g[14], B_1_b_g, B_2_b_g, B_1_b, B_2_b);
        vr[15].grads(g[15], B_1_b_g, B_3_b_g, B_1_b, B_3_b);
        vr[16].grads(g[16], B_1_b_g, B_4_b_g, B_1_b, B_4_b);
        vr[17].grads(g[17], B_2_b_g, B_3_b_g, B_2_b, B_3_b);
        vr[18].grads(g[18], B_2_b_g, B_4_b_g, B_2_b, B_4_b);
        vr[19].grads(g[19], B_3_b_g, B_4_b_g, B_3_b, B_4_b);

        vr[20].grads(g[20], A_1_a_g, A_1_b_g, A_1_a, A_1_b);
        vr[21].grads(g[21], A_1_a_g, B_1_b_g, A_1_a, B_1_b);
        vr[22].grads(g[22], A_1_a_g, B_2_b_g, A_1_a, B_2_b);
        vr[23].grads(g[23], A_1_a_g, B_3_b_g, A_1_a, B_3_b);
        vr[24].grads(g[24], A_1_a_g, B_4_b_g, A_1_a, B_4_b);

        vr[25].grads(g[25], B_1_a_g, A_1_b_g, B_1_a, A_1_b);
        vr[26].grads(g[26], B_1_a_g, B_1_b_g, B_1_a, B_1_b);
        vr[27].grads(g[27], B_1_a_g, B_2_b_g, B_1_a, B_2_b);
        vr[28].grads(g[28], B_1_a_g, B_3_b_g, B_1_a, B_3_b);
        vr[29].grads(g[29], B_1_a_g, B_4_b_g, B_1_a, B_4_b);

        vr[30].grads(g[30], B_2_a_g, A_1_b_g, B_2_a, A_1_b);
        vr[31].grads(g[31], B_2_a_g, B_1_b_g, B_2_a, B_1_b);
        vr[32].grads(g[32], B_2_a_g, B_2_b_g, B_2_a, B_2_b);
        vr[33].grads(g[33], B_2_a_g, B_3_b_g, B_2_a, B_3_b);
        vr[34].grads(g[34], B_2_a_g, B_4_b_g, B_2_a, B_4_b);

        vr[35].grads(g[35], B_3_a_g, A_1_b_g, B_3_a, A_1_b);
        vr[36].grads(g[36], B_3_a_g, B_1_b_g, B_3_a, B_1_b);
        vr[37].grads(g[37], B_3_a_g, B_2_b_g, B_3_a, B_2_b);
        vr[38].grads(g[38], B_3_a_g, B_3_b_g, B_3_a, B_3_b);
        vr[39].grads(g[39], B_3_a_g, B_4_b_g, B_3_a, B_4_b);

        vr[40].grads(g[40], B_4_a_g, A_1_b_g, B_4_a, A_1_b);
        vr[41].grads(g[41], B_4_a_g, B_1_b_g, B_4_a, B_1_b);
        vr[42].grads(g[42], B_4_a_g, B_2_b_g, B_4_a, B_2_b);
        vr[43].grads(g[43], B_4_a_g, B_3_b_g, B_4_a, B_3_b);
        vr[44].grads(g[44], B_4_a_g, B_4_b_g, B_4_a, B_4_b);



        // ##DEFINE HERE## the redistribution of the gradients
        

        
        for (int i = 0; i < 15; ++i) {
            grad1[i + j*15] += sw*xgrd[i];
        }

        for (int i = 0; i < 15; ++i) {
            grad2[i + j*15] += sw*xgrd[i + 15];
        }

        // gradient of the switch

        gsw *= energies[j]/r12;
        energies[j] *= sw;
        for (int i = 0; i < 3; ++i) {
            const double d = gsw*d12[i];
            grad1[i + j*15] += d;
            grad2[i + j*15] -= d;
        }

    }


    double energy = 0.0;
    for (size_t i = 0; i < ndim; i++) {
      energy += energies[i];
    }

    return energy;
}

} // namespace x2b_A1B4_A1B4

////////////////////////////////////////////////////////////////////////////////

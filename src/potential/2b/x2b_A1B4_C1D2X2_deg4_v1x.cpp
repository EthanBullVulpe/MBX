

#include "x2b_A1B4_C1D2X2_deg4_v1x.h" 
 

////////////////////////////////////////////////////////////////////////////////

namespace {

struct variable {
    double v_exp0(const double& r0, const double& k,
                 const double * p1, const double * p2 );
                 
    double v_exp(const double& k,
                 const double * p1, const double * p2 );

    double v_coul0(const double& r0, const double& k,
                  const double * p1, const double * p2 );
                  
    double v_coul(const double& k,
                  const double * p1, const double * p2 );

    double v_gau0(const double& r0, const double& k,
                 const double * p1, const double * p2 );
                  
    void grads(const double& gg, double * grd1, double * grd2,
               const double * p1, const double * p2);

    double g[3]; // diff(value, p1 - p2)
};

//----------------------------------------------------------------------------//

double variable::v_gau0(const double& r0, const double& k,
                       const double * p1, const double * p2)
{
    g[0] = p1[0] - p2[0];
    g[1] = p1[1] - p2[1];
    g[2] = p1[2] - p2[2];

    const double r = std::sqrt(g[0]*g[0] + g[1]*g[1] + g[2]*g[2]);

    const double exp1 = std::exp(-k*(r0 - r)*(r0 - r));
    const double gg = 2*k*(r0 - r)*exp1/r;

    g[0] *= gg;
    g[1] *= gg;
    g[2] *= gg;

    return exp1;
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

double variable::v_exp0(const double& r0, const double& k,
                       const double * p1, const double * p2)
{
    g[0] = p1[0] - p2[0];
    g[1] = p1[1] - p2[1];
    g[2] = p1[2] - p2[2];

    const double r = std::sqrt(g[0]*g[0] + g[1]*g[1] + g[2]*g[2]);

    const double exp1 = std::exp(k*(r0 - r));
    const double gg = - k*exp1/r;

    g[0] *= gg;
    g[1] *= gg;
    g[2] *= gg;

    return exp1;
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

double variable::v_exp(const double& k,
                       const double * p1, const double * p2)
{
    g[0] = p1[0] - p2[0];
    g[1] = p1[1] - p2[1];
    g[2] = p1[2] - p2[2];

    const double r = std::sqrt(g[0]*g[0] + g[1]*g[1] + g[2]*g[2]);

    const double exp1 = std::exp(k*(- r));
    const double gg = - k*exp1/r;

    g[0] *= gg;
    g[1] *= gg;
    g[2] *= gg;

    return exp1;
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //


double variable::v_coul(const double& k,
                        const double * p1, const double * p2)
{
    g[0] = p1[0] - p2[0];
    g[1] = p1[1] - p2[1];
    g[2] = p1[2] - p2[2];

    const double rsq = g[0]*g[0] + g[1]*g[1] + g[2]*g[2];
    const double r = std::sqrt(rsq);

    const double exp1 = std::exp(k*(-r));
    const double rinv = 1.0/r;
    const double val = exp1*rinv;

    const double gg = - (k + rinv)*val*rinv;

    g[0] *= gg;
    g[1] *= gg;
    g[2] *= gg;

    return val;
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

double variable::v_coul0(const double& r0, const double& k,
                        const double * p1, const double * p2)
{
    g[0] = p1[0] - p2[0];
    g[1] = p1[1] - p2[1];
    g[2] = p1[2] - p2[2];

    const double rsq = g[0]*g[0] + g[1]*g[1] + g[2]*g[2];
    const double r = std::sqrt(rsq);

    const double exp1 = std::exp(k*(r0 - r));
    const double rinv = 1.0/r;
    const double val = exp1*rinv;

    const double gg = - (k + rinv)*val*rinv;

    g[0] *= gg;
    g[1] *= gg;
    g[2] *= gg;

    return val;
}

//----------------------------------------------------------------------------//

void variable::grads(const double& gg, double * grd1, double * grd2, 
                     const double * p1, const double * p2) {
    for (size_t i = 0; i < 3 ; i++) {
        double d = gg*g[i];
        grd1[i] += d;
        grd2[i] -= d;
    }
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

struct monomer {
    double oh1[3];
    double oh2[3];

    void setup(const double* ohh,
               const double& in_plane_g, const double& out_of_plane_g,
               double x1[3], double x2[3]);

    void grads(const double* g1, const double* g2,
               const double& in_plane_g, const double& out_of_plane_g,
               double* grd) const;
};

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

void monomer::setup(const double* ohh,
                    const double& in_plane_g, const double& out_of_plane_g,
                    double* x1, double* x2)
{
    for (int i = 0; i < 3; ++i) {
        oh1[i] = ohh[i + 3] - ohh[i];
        oh2[i] = ohh[i + 6] - ohh[i];
    }

    const double v[3] = {
        oh1[1]*oh2[2] - oh1[2]*oh2[1],
        oh1[2]*oh2[0] - oh1[0]*oh2[2],
        oh1[0]*oh2[1] - oh1[1]*oh2[0]
    };

    for (int i = 0; i < 3; ++i) {
        const double in_plane = ohh[i] + 0.5*in_plane_g*(oh1[i] + oh2[i]);
        const double out_of_plane = out_of_plane_g*v[i];

        x1[i] = in_plane + out_of_plane;
        x2[i] = in_plane - out_of_plane;
    }
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

void monomer::grads(const double* g1, const double* g2,
                    const double& in_plane_g, const double& out_of_plane_g,
                    double* grd) const
{
    const double gm[3] = {
        g1[0] - g2[0],
        g1[1] - g2[1],
        g1[2] - g2[2]
    };

    const double t1[3] = {
        oh2[1]*gm[2] - oh2[2]*gm[1],
        oh2[2]*gm[0] - oh2[0]*gm[2],
        oh2[0]*gm[1] - oh2[1]*gm[0]
    };

    const double t2[3] = {
        oh1[1]*gm[2] - oh1[2]*gm[1],
        oh1[2]*gm[0] - oh1[0]*gm[2],
        oh1[0]*gm[1] - oh1[1]*gm[0]
    };

    for (int i = 0; i < 3; ++i) {
        const double gsum = g1[i] + g2[i];
        const double in_plane = 0.5*in_plane_g*gsum;

        const double gh1 = in_plane + out_of_plane_g*t1[i];
        const double gh2 = in_plane - out_of_plane_g*t2[i];

        grd[i + 0] += gsum - (gh1 + gh2); // O
        grd[i + 3] += gh1; // H1
        grd[i + 6] += gh2; // H2
    }
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

//struct vsites {
//    //void TwoParticleAverageSite() {}
//    //void ThreeParticleAverageSite() {}
//    void OutOfPlaneSite(const double& w12, const double& w13,
//                        const double& wcross, const double x1[3],
//                        const double y1[3], const double y2[3],
//                        double vs[3]);
//    //void LocalCoordinatesSite{}
//};
//
//void vsites::OutOfPlaneSite(const double& w12,
//                            const double& w13,
//                            const double& wcross,
//                            const double x1[3],
//                            const double y1[3],
//                            const double y2[3],
//                            double vs[3]) {
//    double r12[3], r13[3];
//
//    for (int i = 0; i < 3; ++i) {
//        r12[i] = y1[i] - x1[i];
//        r13[i] = y2[i] - x1[i];
//    }
//                            
//    double rc[3];
//    rc[0] = r12[1]*r13[2] - r12[2]*r13[1];
//    rc[1] = r12[2]*r13[0] - r12[0]*r13[2];
//    rc[2] = r12[0]*r13[1] - r12[1]*r13[0];
//    
//    vs[0] = x1[0] + w12 * r12[0] + w13 * r13[0] + wcross * rc[0];
//    vs[1] = x1[1] + w12 * r12[1] + w13 * r13[1] + wcross * rc[1];
//    vs[2] = x1[2] + w12 * r12[2] + w13 * r13[2] + wcross * rc[2];
//}

} // namespace

////////////////////////////////////////////////////////////////////////////////

namespace x2b_A1B4_C1D2X2_deg4 {

//----------------------------------------------------------------------------//

x2b_A1B4_C1D2X2_v1x::x2b_A1B4_C1D2X2_v1x(std::string mon1, std::string mon2) {

    // =====>> SECTION CONSTRUCTOR <<=====
    // =>> PASTE RIGHT BELOW THIS LINE <==
    if (mon1 == "h2o" && mon2  == "nh4+") {
        coefficients = std::vector<double> { 
             6.496612870767704e+01, // 0
            -6.498014572803966e+00, // 1
            -2.575347889703564e+01, // 2
             2.131371783413933e+03, // 3
             3.799692068761694e+02, // 4
            -3.059479560364044e+02, // 5
            -2.530230200282125e+03, // 6
             1.070861651582822e+02, // 7
            -1.834586182792586e+03, // 8
             2.820211804347191e+03, // 9
            -1.467834565753284e+02, // 10
            -3.101337399178826e+01, // 11
             1.335438599814946e+02, // 12
            -5.185320239831814e+02, // 13
             4.406425578631366e+02, // 14
             6.355130714450355e+02, // 15
            -1.914166490207305e+03, // 16
             6.118239821492140e+02, // 17
             2.532047613572516e+03, // 18
             3.134507520449340e+02, // 19
            -7.236680245550278e+02, // 20
            -1.228509934751623e+03, // 21
            -7.537567284083907e+02, // 22
            -2.506971717156783e+03, // 23
            -1.092167159022736e+03, // 24
             1.792034514298581e+03, // 25
             2.728406413370632e+03, // 26
            -7.933432038662813e+02, // 27
             5.089247116378756e+02, // 28
            -3.935480208090964e+02, // 29
             5.655212915604781e+02, // 30
             9.496430421025631e+02, // 31
            -6.340508842367811e+02, // 32
            -1.906231010436145e+03, // 33
             1.032799090351605e+03, // 34
            -4.356103496226353e+02, // 35
             7.231800307083719e+02, // 36
             5.111524885262772e+01, // 37
            -1.707460113446985e+02, // 38
            -5.942059558818773e+02, // 39
             1.673506230935683e+02, // 40
             3.837745179557140e+02, // 41
            -1.220341726993207e+03, // 42
             5.137013111075767e+03, // 43
            -6.719320576095843e+01, // 44
            -1.989437956337766e+03, // 45
            -2.148521559549813e+03, // 46
             8.226507892019599e+02, // 47
            -9.693202102991677e+02, // 48
             1.762410346959869e+02, // 49
             1.483012987801851e+03, // 50
            -3.077468910324739e+03, // 51
            -6.391831473748982e+01, // 52
            -1.828775534437440e+02, // 53
             1.675209550882591e+03, // 54
             4.827277200775717e+02, // 55
            -1.320981163595695e+03, // 56
             1.511948733373787e+03, // 57
             1.746619977333314e+03, // 58
            -4.089227935856680e+02, // 59
            -2.169289419944484e+02, // 60
             2.673075422124505e+03, // 61
             3.587350828707417e+02, // 62
            -2.423173864206652e+03, // 63
            -2.426652773218344e+03, // 64
             3.076314093350035e+02, // 65
             9.659851929199250e+02, // 66
            -4.002978024662654e+02, // 67
             4.225885724585818e+02, // 68
            -2.404479200517709e+02, // 69
             4.214038524148690e+02, // 70
             1.396430136812521e+03, // 71
            -1.306321634707325e+03, // 72
            -3.191879748174151e+02, // 73
            -6.475392691898601e+02, // 74
             1.118435498062865e+03, // 75
             1.998206409571925e+03, // 76
            -1.228454460607096e+03, // 77
            -1.597730259510585e+03, // 78
            -8.115543932008043e+02, // 79
            -1.884385752318839e+02, // 80
            -1.197748319734187e+03, // 81
             6.729314821658701e+02, // 82
            -1.928395141690758e+02, // 83
             3.037687632410567e+02, // 84
             2.014651747090555e+03, // 85
            -1.314484166260404e+03, // 86
             4.151850181348110e+02, // 87
            -1.479369647721790e+03, // 88
             7.348550478679896e+02, // 89
            -8.461503101328626e+02, // 90
             1.670751941845311e+03, // 91
             2.506366306051984e+02, // 92
            -1.191231835267947e+03, // 93
            -1.481364683058563e+02, // 94
             1.109973679114724e+03, // 95
            -2.072362245367896e+03, // 96
            -1.010687086874226e+01, // 97
            -5.661116276984218e+02, // 98
             2.185035838823777e+03, // 99
             6.984595485464346e+02, // 100
            -9.532743596837628e+02, // 101
             1.009746236334290e+01, // 102
             6.920157542792459e+02, // 103
             1.940648771591531e+03, // 104
             1.843800338029436e+03, // 105
             8.797213037146082e+02, // 106
            -3.618298691116033e+02, // 107
            -2.537777038303985e+03, // 108
             1.614510646181782e+02, // 109
             8.533183264216913e+01, // 110
             4.594779620738451e+03, // 111
             9.898816315581170e+02, // 112
            -7.477167055150868e+02, // 113
             3.003026308013859e+02, // 114
            -1.813524929638473e+02, // 115
             6.415378048284377e+02, // 116
            -1.650514718610036e+03, // 117
             8.347077685757332e+02, // 118
             1.342618185223823e+03, // 119
            -1.467808352198856e+03, // 120
             1.926216339257325e+02, // 121
             2.158875969576942e+02, // 122
            -9.907984285182608e+02, // 123
             9.772221659348548e+01, // 124
            -1.710217885359508e+03, // 125
            -1.389233635849567e+02, // 126
            -1.003543620345797e+03, // 127
            -7.003494927864480e+02, // 128
             1.074706242299631e+03, // 129
            -4.813373463091914e+02, // 130
             1.177918909517476e+03, // 131
             3.398391983639022e+02, // 132
            -8.834725713932102e+02, // 133
             1.599969343661516e+03, // 134
             2.174595069015902e+03, // 135
             1.029621669803523e+02, // 136
             1.170193213300889e+03, // 137
             1.135954897453352e+03, // 138
             8.779671004129017e+02, // 139
             1.992955143239314e+03, // 140
            -6.123114320111512e+02, // 141
            -7.170422617217309e+02, // 142
             1.229952647236266e+03, // 143
            -2.136190114078375e+03, // 144
            -1.447659067207448e+03, // 145
             3.252152648803152e+03, // 146
             1.242413162525287e+02, // 147
            -3.209871092217417e+03, // 148
             1.760810839363374e+03, // 149
            -4.742622367345386e+03, // 150
            -6.608169971948214e+02, // 151
            -1.751658776835779e+03, // 152
             1.940635109120007e+03, // 153
             5.146531227153635e+02, // 154
             3.561262382809722e+02, // 155
             8.215964675372571e+02, // 156
             1.236997538540847e+03, // 157
            -3.452254794312337e+02, // 158
            -3.558693469269803e+02, // 159
            -1.684861284225821e+03, // 160
             1.053871245714416e+03, // 161
            -8.888743115051494e+01, // 162
            -1.294873418811816e+02, // 163
            -1.316220660929969e+02, // 164
            -1.576327521840280e+03, // 165
             3.970347793443898e+02, // 166
            -1.694078540830769e+03, // 167
             3.274949047445916e+02, // 168
            -4.655333392612518e+02, // 169
            -9.544963726322894e+02, // 170
             3.443116592495966e+02, // 171
             5.264194608387874e+01, // 172
             1.892019122044382e+02, // 173
            -4.768606133235850e+02, // 174
            -1.242484130937506e+03, // 175
            -4.823657566802320e+02, // 176
            -4.799320907366085e+02, // 177
            -5.314062049608831e+02, // 178
             8.077041523855370e+01, // 179
            -1.379619605444558e+02, // 180
             2.298686469433179e+02, // 181
            -3.803509712540936e+03, // 182
            -1.351641667890856e+02, // 183
             1.883872015334539e+02, // 184
            -8.405396419754455e+02, // 185
            -1.146164712318841e+03, // 186
            -1.438148617039109e+03, // 187
             2.007123360391134e+02, // 188
            -1.080333134432192e+03, // 189
             4.040446052462524e+01, // 190
            -6.325140643605438e+01, // 191
             5.316200201039080e+02, // 192
             5.994646658920427e+02, // 193
            -2.779465925530286e+02, // 194
             4.753297850971801e+02, // 195
            -8.335730933968437e+02, // 196
            -4.383979676982377e+02, // 197
            -1.245136683770519e+03, // 198
            -2.348559980560338e+03, // 199
            -4.102677103678852e+02, // 200
            -5.499116450108575e+02, // 201
             6.946962213392209e+02, // 202
            -9.738870354568337e+02, // 203
            -1.907714489142094e+01, // 204
             4.657494594984603e+00, // 205
             9.209267580842454e+02, // 206
            -9.073660307798048e+02, // 207
            -3.313108642906332e+01, // 208
             3.715786694410679e+02, // 209
             1.441915060986651e+02, // 210
            -1.642135721422414e+03, // 211
            -5.100417088614186e+02, // 212
            -1.037598177943154e+03, // 213
            -7.799205740098718e+02, // 214
             1.419750764558825e+03, // 215
            -2.277634610205248e+03, // 216
            -1.358407621541632e+03, // 217
             1.077681968612036e+02, // 218
            -1.433216794061016e+03, // 219
            -1.600295087767303e+02, // 220
             3.035474525915353e+02, // 221
             1.706607312896553e+03, // 222
             1.089295852446332e+03, // 223
            -1.986747967269650e+02, // 224
             2.302593263945396e+02, // 225
            -8.737066304454294e+02, // 226
            -1.332929188847449e+02, // 227
             3.623852968436647e+03, // 228
            -4.815304917142939e+02, // 229
             3.605878442424723e+02, // 230
            -5.841855678661153e+02, // 231
             9.561723907166336e+02, // 232
             1.878811683577876e+03, // 233
             1.589530919808928e+03, // 234
            -1.319356939413081e+03, // 235
             3.500250072438075e+01, // 236
             4.005829292165162e+02, // 237
             8.891707122672206e+02, // 238
            -1.075006567850351e+02, // 239
            -1.331658393049156e+03, // 240
            -2.765355100405643e+02, // 241
             1.514788605415358e+03, // 242
            -9.718649403135269e+02, // 243
             7.453666846072543e+02, // 244
            -3.641433464668627e+02, // 245
             2.591568137795902e+02, // 246
            -9.183603184580652e+02, // 247
            -4.727881247847463e+02, // 248
            -2.098542456591605e+03, // 249
            -1.128362136612613e+03, // 250
             1.987554917635344e+02, // 251
             2.049390124316132e+03, // 252
             3.009581409464950e+02, // 253
            -1.084214308676889e+03, // 254
             1.721525792172847e+03, // 255
            -7.365797843783828e+02, // 256
            -1.226119664977953e+03, // 257
             1.361584830355511e+03, // 258
            -7.660300579657919e+02, // 259
             7.910544180552645e+01, // 260
             5.043608976998692e+02, // 261
             5.413583760074118e+02, // 262
            -2.186894767372728e+03, // 263
            -5.613749706878634e+02, // 264
             3.343572177887626e+02, // 265
             7.790511552206041e+02, // 266
            -1.018372008671082e+03, // 267
            -7.133534313828085e+02, // 268
             1.417757133207219e+02, // 269
            -1.862241682580080e+02, // 270
             1.187833003097550e+03, // 271
            -4.664283195727182e+02, // 272
            -3.688067317423365e+02, // 273
             1.136395144782128e+03, // 274
             2.357966821529784e+02, // 275
            -2.278755381391517e+03, // 276
            -1.236195858374206e+03, // 277
            -1.118794486319812e+03, // 278
             2.661283404382478e+02, // 279
            -3.018562513282854e+03, // 280
            -1.534658833503360e+03, // 281
             2.840272757931933e+03, // 282
             1.696377600566391e+03, // 283
            -2.801188927145686e+03, // 284
             2.300087969010993e+03, // 285
            -2.053297681304686e+02, // 286
            -9.357485391967508e+02, // 287
             3.082058207023748e+02, // 288
            -1.184823751937325e+03, // 289
            -1.057454478063345e+03, // 290
             5.594609670767821e+02, // 291
            -3.758893297426611e+02, // 292
            -2.280473102986746e+03, // 293
            -9.507193750148294e+01, // 294
            -1.955919103943921e+03, // 295
             1.946017945078878e+03, // 296
             2.231479122330504e+03, // 297
            -1.005741344238623e+03, // 298
             3.396931268445081e+01, // 299
             2.328902107916806e+02, // 300
            -9.394397122926301e+02, // 301
            -3.963220672957965e+03, // 302
             1.191440510309888e+03, // 303
            -4.584303800083487e+02, // 304
            -1.013091350890381e+03, // 305
            -1.637524340095797e+03, // 306
             1.440239121408464e+03, // 307
            -1.679797167773054e+03, // 308
            -3.266676970780583e+02, // 309
            -8.384244557763635e+02, // 310
            -3.565670491210331e+02, // 311
             3.134770403498481e+03, // 312
             1.200572087260513e+02, // 313
            -1.411181986583065e+03, // 314
             2.213185687349800e+03, // 315
             2.808263794047430e+03, // 316
            -1.767102778975504e+02, // 317
            -3.041603073182694e+03, // 318
            -1.005589045368079e+03, // 319
            -1.925109252287918e+02, // 320
            -2.557565911280458e+03, // 321
            -6.870790772183767e+02, // 322
            -1.143806892703646e+01, // 323
            -2.508266028092730e+03, // 324
             1.506116184120817e+03, // 325
            -1.662240541544536e+03, // 326
            -1.692283480566918e+03, // 327
             6.036199868842425e+02, // 328
            -7.995113326096150e+02, // 329
            -4.011583580370350e+02, // 330
            -6.995035397332857e+01, // 331
             2.214291718767302e+02, // 332
            -4.300037791306808e+02, // 333
            -1.850213660054459e+02, // 334
            -4.252396760982986e+02, // 335
             1.860471536898496e+02, // 336
            -7.006822559161325e+02, // 337
             1.467468708947272e+03, // 338
             1.028289513088528e+03, // 339
            -3.371369930505655e+02, // 340
            -1.012290621626131e+03, // 341
            -4.157148444708139e+03, // 342
             6.193919971888763e+03, // 343
            -1.093214514128818e+01, // 344
            -6.956337105518691e+02, // 345
            -9.950956038034413e+02, // 346
            -2.727118901309745e+02, // 347
             2.380593313381786e+03, // 348
             4.836219171882859e+02, // 349
             4.687397651486615e+02, // 350
            -7.769093475859812e+02, // 351
            -2.426972937693063e+02, // 352
             1.534797769707974e+03, // 353
            -2.790037223015853e+03, // 354
            -5.439748935440125e+02, // 355
             1.642446358806817e+03, // 356
            -2.161354940455287e+03, // 357
            -5.535977277146247e+01, // 358
             9.309906860056764e+02, // 359
            -3.327203768793932e+03, // 360
             8.646611616992261e+02, // 361
             4.532917102578596e+02, // 362
            -1.687513433069319e+03, // 363
            -2.184274195211616e+03, // 364
            -2.376988318044539e+03, // 365
             7.714250059113604e+02, // 366
            -8.169573092378575e+02, // 367
            -5.414943358001115e+02, // 368
             1.161439386940725e+03, // 369
             2.178297675849547e+03, // 370
            -7.069666609782957e+02, // 371
             1.411524064521846e+03, // 372
             1.161245111003880e+02, // 373
            -7.072259725940738e+02, // 374
             1.447350608451588e+02, // 375
             5.839651574833953e+01, // 376
             6.349100889732024e+02, // 377
            -1.333425962396504e+03, // 378
             3.787374436640608e+03, // 379
             4.106282272875405e+02, // 380
             5.050122109656330e+02, // 381
            -3.168954954664582e+02, // 382
             3.186678966868047e+03, // 383
            -1.520313992225826e+03, // 384
            -1.373769556598797e+02, // 385
             2.343541636896348e+03, // 386
            -2.943196655986220e+02, // 387
             1.451252475972205e+03, // 388
             1.994361585540935e+02, // 389
            -8.221487510210360e+01, // 390
             9.262724040766582e+02, // 391
             2.994763853711744e+03, // 392
             1.099314149803508e+02, // 393
            -2.112719273667587e+03, // 394
             2.409929328408406e+03, // 395
            -6.345018512998048e+02, // 396
            -6.972234451317338e+03, // 397
             3.672983308296905e+03, // 398
            -5.567193755467666e+02, // 399
            -3.906977860898972e+02, // 400
            -1.595657902218974e+03, // 401
            -1.594738568960395e+03, // 402
             5.041739586035822e+02, // 403
            -2.187734201560255e+03, // 404
            -3.011378832810325e+02, // 405
             1.170761177853348e+03, // 406
            -7.438365024142302e+02, // 407
            -1.078793288713478e+03, // 408
             9.804257748228897e+02, // 409
             2.172635637318197e+03, // 410
             2.344096174688999e+02, // 411
             1.504887374257280e+03, // 412
            -1.060855324344802e+03, // 413
             9.149214805222022e+02, // 414
             2.661063551469739e+03, // 415
             1.373016662538421e+03, // 416
            -2.740633330338033e+03, // 417
             3.652900462340704e+03, // 418
             1.019008081653943e+03, // 419
            -3.813492476805992e+03, // 420
            -2.048478324881795e+03, // 421
             1.824045031067486e+03, // 422
            -1.291428890691617e+03, // 423
             2.782361084039848e+03, // 424
            -8.411070052643145e+02, // 425
            -3.466825446260917e+02, // 426
             1.921833363327066e+03, // 427
             8.594939350506392e+02, // 428
            -1.756405233449288e+02, // 429
            -1.272734502813494e+03, // 430
            -5.693004162708124e+02, // 431
            -3.150216847933215e+02, // 432
             9.326864988176393e+02, // 433
            -7.651637066646377e+02, // 434
            -5.658329514891401e+02, // 435
            -4.149017527329107e+02, // 436
             8.738097446648198e+02, // 437
             1.817275116613820e+03, // 438
             8.475439491099016e+02, // 439
             9.037571019445789e+02, // 440
             8.642239465300413e+01, // 441
            -1.839700879574878e+02, // 442
            -1.850720172198905e+03, // 443
            -1.357149787910410e+03, // 444
            -9.890945874394780e+02, // 445
            -6.738845639252968e+01, // 446
             2.058446224958533e+02, // 447
             7.974038620815511e+02, // 448
             4.195539041134456e+02, // 449
            -1.628694892770667e+03, // 450
             1.379358611866048e+03, // 451
             1.133675683532656e+03, // 452
            -1.041464245598675e+03, // 453
            -1.493838839035668e+02, // 454
            -1.081501763199451e+03, // 455
             4.745298195325061e+02, // 456
            -4.488223567748940e+02, // 457
            -1.071633667207584e+03, // 458
            -1.420295328880168e+03, // 459
            -2.551643097596299e+03, // 460
             2.363812849708521e+02, // 461
            -1.336724461436635e+03, // 462
            -8.841097386005383e+02, // 463
            -7.474154442804173e+02, // 464
             2.361438299433744e+03, // 465
             1.068898633102406e+03, // 466
             1.846170913549850e+03, // 467
            -2.474924469058204e+02, // 468
             1.354552011601162e+03, // 469
            -8.619815488913048e+01, // 470
            -5.808732003057539e+02, // 471
            -2.021358928154934e+03, // 472
            -1.161550293833653e+03, // 473
             1.164692692327197e+03, // 474
            -2.693798024797362e+02, // 475
             3.015189680132524e+02, // 476
            -4.029156485477874e+03, // 477
            -2.321823794731817e+03, // 478
            -1.663863996294684e+02, // 479
             3.971081008041539e+02, // 480
            -5.069851953198904e+03, // 481
             4.557945595341896e+03, // 482
             2.471589688563125e+03, // 483
            -3.433577037004216e+02, // 484
            -1.023146459521365e+03, // 485
            -2.875301928648261e+02, // 486
             3.803124909752862e+02, // 487
             5.728363741705103e+02, // 488
             8.128554045559023e+02, // 489
             9.914566329805493e+02, // 490
            -8.858577645062059e+02, // 491
             1.897901284812334e+02, // 492
             2.309129646015062e+03, // 493
             2.116789564153719e+02, // 494
             1.990171946959576e+02, // 495
            -2.741640391676995e+03, // 496
            -1.705326702653449e+03, // 497
            -2.480192645572068e+02, // 498
            -1.666755436885395e+03, // 499
            -1.805645380320980e+01, // 500
            -3.717159962225025e+02, // 501
             1.457364301288355e+03, // 502
             1.166531796343510e+03, // 503
             1.285771412588046e+03, // 504
             3.451427907676348e+02, // 505
             8.816560010805695e+02, // 506
             3.328506708932388e+03, // 507
            -2.322883010834809e+03, // 508
            -1.206966143326986e+03, // 509
            -2.499531623305724e+03, // 510
            -2.589892922024687e+03, // 511
             1.836044470358801e+03, // 512
             7.234433377899691e+02, // 513
            -5.799925816525646e+02, // 514
             1.060571497607333e+03, // 515
             5.836754774032822e+02, // 516
            -1.602394578140440e+03, // 517
             6.120808876574353e+02, // 518
            -4.106083732478365e+03, // 519
             1.579036305266443e+02, // 520
            -6.937208224494863e+02, // 521
            -7.961759866240992e+02, // 522
             2.254436725518568e+03, // 523
            -6.758342773471445e+01, // 524
             2.974172001763657e+02, // 525
            -1.593561251918311e+03, // 526
            -1.932275069924676e+03, // 527
             2.508944799928341e+02, // 528
             1.791618820916369e+03, // 529
             1.460533864498493e+02, // 530
            -1.610030038043828e+03, // 531
            -4.663353550516684e+02, // 532
            -1.339810045646383e+03, // 533
             3.249811256234234e+02, // 534
            -1.104941677346163e+03, // 535
            -1.057396654875613e+03, // 536
            -5.855888179547866e+03, // 537
             2.703700057005617e+03, // 538
             2.498699853480139e+03, // 539
             3.727500312716839e+03, // 540
             3.377300472539312e+03, // 541
             3.925990724551368e+02, // 542
            -1.808470237282305e+02, // 543
            -1.151160413357985e+03, // 544
            -1.811770298579982e+03, // 545
            -8.475905376693592e+02, // 546
            -4.070768019832686e+01, // 547
            -6.954871529788724e+02, // 548
             2.561306248328172e+02, // 549
            -2.743118913658959e+02, // 550
            -1.533423043302448e+03, // 551
             5.213338759794191e+02, // 552
            -7.842986089982699e+02, // 553
            -2.191233594267152e+02, // 554
             1.508540271816825e+03, // 555
            -1.283013500039288e+03, // 556
            -8.732323689134270e+02, // 557
            -5.854477704767004e+02, // 558
            -1.259508061940240e+03, // 559
             1.142024943133222e+03, // 560
             3.777506875989242e+02, // 561
            -8.205073736857807e+02, // 562
            -2.808576341847827e+02, // 563
             1.473510143401036e+02, // 564
             6.373948254130529e+02, // 565
            -1.007047842012632e+03, // 566
             1.709775126011458e+03, // 567
             7.855389082059071e+02, // 568
             1.549091281765983e+03, // 569
             3.493249037574374e+02, // 570
             9.554535928672954e+02, // 571
             8.397988822198133e+02, // 572
             8.922282934515671e+02, // 573
            -2.069879534422071e+03, // 574
            -1.416846318366173e+03, // 575
             1.725355038499616e+02, // 576
             1.018788761863354e+03, // 577
            -1.074771677765445e+03, // 578
            -7.982474452817917e+02, // 579
             2.320918082309101e+03, // 580
             1.347901370179652e+03, // 581
            -1.334148440890480e+01, // 582
             2.826221132865848e+02, // 583
            -5.633509442648239e+02, // 584
             7.183654720396462e+02, // 585
             5.664305309061474e+02, // 586
            -1.184958640046647e+03, // 587
             6.397151327685133e+02, // 588
             9.468085650617427e+02, // 589
             3.568513421401913e+01, // 590
            -5.013802155695728e+02, // 591
            -6.741602661295059e+02, // 592
            -1.043790204913775e+03, // 593
             8.003203029684472e+02, // 594
            -1.996528920879460e+02, // 595
             1.172942231349715e+03, // 596
             6.972114480213060e+02, // 597
             9.798034136287549e+02, // 598
             3.585626456126288e+03, // 599
             8.618838465100598e+02, // 600
            -9.454856991813012e+02, // 601
             3.297675316267343e+03, // 602
             1.776654399626480e+03, // 603
            -3.782216708263291e+02, // 604
            -1.004580505427077e+03, // 605
             7.917396321952656e+02, // 606
             1.550903102336571e+03, // 607
             5.869564276891506e+02, // 608
            -8.468194810065888e+02, // 609
            -8.429915534287644e+02, // 610
             2.718974971651778e+03, // 611
             1.055315143851989e+03, // 612
            -1.734165807702674e+03, // 613
            -2.601010205688372e+02, // 614
            -2.375702859941379e+02, // 615
            -1.309118235707714e+03, // 616
            -5.893111294099624e+02, // 617
            -4.483955089274859e+02, // 618
             5.200946143244819e+02, // 619
            -1.686194415015859e+03, // 620
             1.198197208601710e+03, // 621
            -1.110534016054675e+03, // 622
            -7.764402886854903e+02, // 623
            -5.857750274267392e+03, // 624
            -3.715957497629158e+02, // 625
             2.062443977487666e+03, // 626
            -4.148160484349561e+02, // 627
             3.278505630683258e+03, // 628
             1.024375436149710e+03, // 629
            -9.035857248225084e+02, // 630
             4.315319505546836e+02, // 631
            -2.628575553470865e+03, // 632
            -1.260733058932348e+02, // 633
            -2.425703856621251e+03, // 634
            -2.342852104170006e+02, // 635
            -8.619172412014036e+02, // 636
             1.008573010260149e+02, // 637
            -1.655473445400582e+03, // 638
            -2.143084898898348e+03, // 639
            -3.397604340609015e+03, // 640
            -1.203384867354500e+03, // 641
            -1.186686418238300e+03, // 642
            -7.464594227267860e+02, // 643
            -3.030128347653691e+02, // 644
            -2.506029185729804e+02, // 645
            -2.293619033481000e+02, // 646
            -6.167676499171355e+01, // 647
             1.795822238288712e+03, // 648
             1.844465653924149e+02, // 649
             5.379436069536931e+02, // 650
             5.921285678692986e+00, // 651
            -7.804881395557237e+02, // 652
             6.737251444180110e+02, // 653
            -5.027609714695759e+01, // 654
            -1.058801323456979e+03, // 655
             2.229334406646271e+03, // 656
            -8.245710605918717e+02, // 657
            -2.221366218052345e+02, // 658
            -5.759791311084408e+02, // 659
            -2.152396641842286e+03, // 660
             2.181447966193664e+03, // 661
             9.696891143377862e+02, // 662
            -1.210140428516749e+03, // 663
            -1.593695936502866e+03, // 664
             7.204148866300092e+02, // 665
             1.480118491280301e+02, // 666
             2.870798428057675e+02, // 667
            -6.165464264684193e+02, // 668
            -9.247561129382891e+02, // 669
             7.233498730990287e+03, // 670
             1.257621739954407e+03, // 671
             4.050386810628998e+03, // 672
            -1.889215161281355e+03, // 673
            -1.735963792183989e+02, // 674
             9.793036668148909e+02, // 675
             1.714079790191572e+03, // 676
            -1.621865972254179e+03, // 677
             3.151641174817768e+02, // 678
             1.413796697912903e+03, // 679
            -8.998978395902474e+02, // 680
             1.504542038128426e+02, // 681
            -4.070659840364383e+02, // 682
            -1.891413660424801e+02, // 683
             7.872899058339003e+02, // 684
             1.460527756533162e+03, // 685
             7.130899533394708e+02, // 686
            -3.885423027589922e+02, // 687
             1.295016431528925e+03, // 688
            -7.687484142291370e+02, // 689
             2.798408773909328e+03, // 690
            -2.200477749820926e+03, // 691
            -3.444756281803899e+02, // 692
            -2.117917895741851e+03, // 693
            -4.284736861841625e+02, // 694
             8.566290779072951e+02, // 695
             3.092813414813372e+02, // 696
            -9.898123015160986e+02, // 697
             3.425177439151866e+02, // 698
            -2.005288549996689e+02, // 699
             9.628959595304009e+02, // 700
            -5.412090704131709e+02, // 701
            -3.325131445375264e+02, // 702
             6.952137814415752e+02, // 703
            -1.519870810818184e+03, // 704
            -1.423237881336724e+03, // 705
            -3.944456681397839e+00, // 706
            -3.856100117294685e+02, // 707
            -6.203490309951210e+02, // 708
            -1.401871673197871e+03, // 709
            -7.853095827322313e+01, // 710
             2.251461415821016e+03, // 711
            -1.431355213691093e+03, // 712
             4.848469312801520e+02, // 713
             1.566867894346030e+02, // 714
             1.587166536463221e+02, // 715
            -6.466170257282682e+02, // 716
             1.153799029000134e+03, // 717
            -1.507534003702850e+03, // 718
            -1.910598889179190e+03, // 719
            -6.696744125710206e+02, // 720
            -1.396464970402087e+03, // 721
             6.042744668110811e+02, // 722
             4.726199853901362e+02, // 723
            -1.985368649398794e+03, // 724
             1.812335682356048e+03, // 725
            -6.706811262292259e+02, // 726
            -2.734577747590679e+02, // 727
            -4.864155793155411e+02, // 728
             4.109907802325903e+01, // 729
            -2.664017076730807e+03, // 730
            -6.748122102574348e+02, // 731
            -1.203168169556148e+03, // 732
             4.896783550139066e+02, // 733
             3.156506205716571e+03, // 734
             6.704733305314363e+02, // 735
             1.225878787999562e+03, // 736
             1.305464386111469e+02, // 737
             8.735737485370072e+02, // 738
             1.911595941148905e+02, // 739
            -1.982166662511027e+02, // 740
             1.008357321158112e+03, // 741
            -9.478172911832165e+02, // 742
            -1.840961769723547e+03, // 743
            -2.194090710699894e+03, // 744
            -3.543915749149568e+03, // 745
             6.939245410307703e+02, // 746
             1.231930996154559e+02, // 747
             1.133510680503323e+03, // 748
             6.310123641605954e+02, // 749
            -2.420696804124933e+02, // 750
             7.571175101459009e+01, // 751
             8.063458673350497e+02, // 752
            -5.129074339387186e+02, // 753
            -2.274687766844427e+03, // 754
            -2.891530312189269e+02, // 755
            -5.962110735785635e+01, // 756
             1.438001582113895e+03, // 757
             1.080045085062306e+03, // 758
             1.515943527676842e+03, // 759
             3.066162812297433e+03, // 760
             1.443481326712450e+03, // 761
             3.091089868315844e+02, // 762
             1.663752132074486e+02, // 763
            -9.215165464393122e+01, // 764
             1.564684185248676e+03, // 765
            -1.177607763594074e+03, // 766
            -3.933708537903736e+03, // 767
            -1.385988498932759e+02, // 768
             7.289058194707164e+02, // 769
             7.357620103101394e+02, // 770
             8.631817657600153e+02, // 771
             7.098215915316143e+02, // 772
             4.157141656286630e+02, // 773
             1.439543233674569e+03, // 774
             4.392073534665180e+02, // 775
             3.850392516017421e+02, // 776
            -2.780810813783799e+02, // 777
            -6.937329189986983e+01, // 778
             1.174106632050034e+03, // 779
            -3.891890816579103e+02, // 780
             1.871912478962674e+03, // 781
             1.192514137705661e+03, // 782
            -3.550115186013447e+02, // 783
            -7.671758446658770e+02, // 784
            -1.174012785856902e+03, // 785
            -8.769347480686229e+02, // 786
            -2.167819416087665e+02, // 787
             3.084673389122756e+02, // 788
            -1.600925877278325e+03, // 789
             3.133310393077622e+02, // 790
             4.329180162842201e+02, // 791
            -1.213226748745927e+03, // 792
             1.769441061254257e+03, // 793
             4.302925376553738e+02, // 794
            -1.348212549911092e+03, // 795
             1.821136413529686e+03, // 796
            -4.362811910058038e+02, // 797
            -7.016678981479990e+02, // 798
            -2.905027825011638e+02, // 799
            -7.715901731926081e+02, // 800
            -6.902214985050352e+02, // 801
             6.642724324520900e+02, // 802
             3.531839450994723e+02, // 803
            -3.147271823193233e+02, // 804
            -4.885668900456242e+02, // 805
             7.024344170541049e+02, // 806
             7.835109060567714e+02, // 807
             2.054511310175343e+03, // 808
             1.273412213616554e+03, // 809
            -1.087267148408939e+02, // 810
             2.467153734756005e+02, // 811
             5.636619211209307e+02, // 812
             3.686421589571003e+02, // 813
             6.245099180752092e+02, // 814
            -2.035928382923439e+02, // 815
             6.603404015663394e+01, // 816
             6.108878699429854e+02, // 817
             1.053978733288783e+03, // 818
            -2.477329558500052e+03, // 819
             2.300046928276351e+02, // 820
             2.321096794571968e+02, // 821
            -1.694028698545179e+03, // 822
            -1.894399849606709e+02, // 823
            -2.447488766902379e+01, // 824
            -3.824363757983674e+02, // 825
            -6.249183940111187e+01, // 826
             4.065744077237790e+02, // 827
             2.376895237776634e+02, // 828
             9.051689582174778e+02, // 829
             4.987972601217085e+02, // 830
             5.029693215080990e+02, // 831
             3.598767264448882e+02, // 832
            -9.852686084034161e+02, // 833
             3.314433139424541e+02, // 834
            -3.357257305544430e+02, // 835
            -1.998991077209682e+02, // 836
             6.776438077377338e+01, // 837
            -5.818833507408574e+02, // 838
             3.275693896897601e+02, // 839
            -1.090118260341146e+03, // 840
            -7.125488946470264e+01, // 841
            -3.499171834358476e+02, // 842
             5.934154739855803e+02, // 843
            -1.523716074878638e+02, // 844
             1.119765981371645e+02, // 845
            -1.058442261656727e+02, // 846
             2.222188790713345e+03, // 847
            -1.147035946584411e+03, // 848
             1.338761595288871e+02, // 849
            -2.141482966658939e+03, // 850
            -9.815188589294464e+02, // 851
             6.983319039446511e+02, // 852
            -2.486684807977156e+03, // 853
             2.054389395768470e+03, // 854
             4.900427590217856e+02, // 855
             7.642709331164008e+02, // 856
             3.101095402513407e+03, // 857
            -2.327637498967214e+03, // 858
             6.486370156927850e+02, // 859
             8.906322055767047e+02, // 860
             3.677905975870843e+03, // 861
            -2.791207432611498e+03, // 862
             4.506593069208612e+02, // 863
             5.130845374684956e+02, // 864
             2.505891114633865e+03, // 865
             3.785698415999150e+01, // 866
             3.071517804396571e+03, // 867
            -8.288604235944078e+02, // 868
            -1.192809565813481e+03, // 869
             7.061793134864224e+02, // 870
            -1.397117362674270e+03, // 871
             2.432754710064853e+03, // 872
            -9.383939403976839e+02, // 873
             1.322189443809750e+03, // 874
            -2.705683170651706e+03, // 875
            -1.478623241269890e+01, // 876
            -1.403976130563334e+02, // 877
             5.314279047586524e+02, // 878
             1.857079837180216e+02, // 879
             2.360626917510141e+02, // 880
             3.919406804488397e+02, // 881
             8.764432230122951e+02, // 882
            -3.193946895881247e+03, // 883
            -1.215339136113250e+02, // 884
             7.366977331645976e+02, // 885
             1.424842043966525e+03, // 886
            -2.605393847017091e+03, // 887
             1.962040646621055e+02, // 888
             6.066342969895529e+02, // 889
            -2.719412396049256e+02, // 890
             4.364614138068549e+02, // 891
             1.863754688853160e+02, // 892
             6.602830692165115e+02, // 893
            -1.855187811383757e+02, // 894
            -1.101271941616620e+02, // 895
             7.329201225589539e+02, // 896
             3.828212631773208e+02, // 897
             3.500014015310134e+02, // 898
            -1.427932963586694e+03, // 899
             2.090487622386782e+03, // 900
             1.093448311959616e+02, // 901
             5.176660331431902e+02, // 902
            -8.017285598501890e+02, // 903
             1.626608286778122e+03, // 904
            -2.914077471614427e+02, // 905
             1.191961245451629e+03, // 906
            -5.199238855688413e+02, // 907
            -1.323989020951696e+01, // 908
            -9.171360565173377e+02, // 909
            -5.377485604087697e+02, // 910
            -6.169668307300011e+02, // 911
            -1.721820639142214e+03, // 912
             1.229513792494708e+03, // 913
             4.106242065300171e+02, // 914
             1.102982734218140e+03, // 915
             1.128314926944037e+03, // 916
             1.667679537080482e+02, // 917
             1.485683905415943e+03, // 918
             3.628885228357935e+01, // 919
             1.975408870278887e+03, // 920
             5.584980521771668e+02, // 921
             1.126775202201900e+03, // 922
             1.372188303187232e+03, // 923
             1.511335725796750e+03, // 924
            -4.692430197793331e+02, // 925
             1.412325020516795e+03, // 926
             3.244824189719468e+02, // 927
             2.781434513399581e+02, // 928
            -8.532223301081024e+02, // 929
             4.858624172806765e+02, // 930
             5.447899426046432e+02, // 931
            -2.374125238259349e+02, // 932
             1.551134011607828e+01, // 933
             6.162905872246687e+02, // 934
            -8.408185467674706e+02, // 935
            -9.374203243815897e+02, // 936
             3.000519608440184e+01, // 937
            -1.140625676167061e+03, // 938
             3.699656111197669e+02, // 939
             1.063606291524064e+03, // 940
             3.254337095572652e+02, // 941
            -2.004706640123975e+02, // 942
             6.272673816417019e+02, // 943
            -2.332407292799167e+00, // 944
            -5.336787811713220e+02, // 945
            -3.305779599956129e+02, // 946
            -1.155257639585782e+03, // 947
            -4.797272907932746e+02, // 948
             5.919248594581670e+02, // 949
            -2.455278115005753e+02, // 950
             5.535422328248883e+02, // 951
            -5.402898491549347e+02, // 952
            -3.638068250490484e+02, // 953
             5.622084500840930e+02, // 954
            -2.543898290744332e+03, // 955
            -4.379117980947029e+02, // 956
            -8.889339194359945e+02, // 957
            -6.669442478432505e+02, // 958
             5.754828421869979e+02, // 959
            -4.699634502580693e+02, // 960
            -5.312249368540004e+02, // 961
            -2.228121861152061e+02, // 962
             7.868387244751715e+02, // 963
            -3.069521518414362e+02, // 964
            -2.364892820438590e+02, // 965
             1.526677950004329e+03, // 966
            -2.951108772107006e+02, // 967
             4.170836888809783e+02, // 968
             2.024802403150871e+02, // 969
             1.380900935829117e+03, // 970
             5.700789430235562e+02, // 971
            -2.660305999828068e+02, // 972
             1.586827669027689e+02, // 973
             1.635884282988385e+02, // 974
             4.141796585587060e+02, // 975
             4.622171189879589e+02, // 976
            -1.415485686826554e+01, // 977
             5.536592641131834e+02}; // 978

    m_k_AC =  3.946417444513172e-01; // A^(-1))
    m_k_AD =  8.689726353164473e-01; // A^(-1))
    m_k_AX =  5.758236533425753e-01; // A^(-1))
    m_k_BC =  3.726980615095900e-01; // A^(-1))
    m_k_BD =  4.340065128051260e-01; // A^(-1))
    m_k_BX =  1.101880758379851e-01; // A^(-1))
    m_k_intra_BB =  1.852694308372755e+00; // A^(-1))
    m_k_intra_AB =  3.383261802666133e+00; // A^(-1))
    m_k_intra_DD =  4.992873509789318e+00; // A^(-1))
    m_k_intra_XX =  1.302717690622052e+00; // A^(-1))
    m_k_intra_CD =  2.140558766545252e+00; // A^(-1))
    m_k_intra_CX =  2.590582630702841e+00; // A^(-1))
    m_k_intra_DX =  2.035323545008805e+00; // A^(-1))
    m_r2i =  7.000000000000000e+00; // A
    m_r2f =  8.000000000000000e+00; // A

    } // if mon1 == "h2o" && mon2  == "nh4+"

}

//----------------------------------------------------------------------------//

double x2b_A1B4_C1D2X2_v1x::f_switch(const double& r, double& g) const
{
    if (r > m_r2f) {
        g = 0.0;
        return 0.0;
    } else if (r > m_r2i) {
        const double t1 = M_PI/(m_r2f - m_r2i);
        const double x = (r - m_r2i)*t1;
        g = - std::sin(x)*t1/2.0;
        return (1.0 + std::cos(x))/2.0;
    } else {
        g = 0.0;
        return 1.0;
    }
}

//----------------------------------------------------------------------------//

double x2b_A1B4_C1D2X2_v1x::eval(const double* xyz1, const double* xyz2, const size_t ndim) const
{

    std::vector<double> energies(ndim,0.0);

    for (size_t j = 0; j < ndim; j++) {
        double mon1[15];
        double mon2[9];

        std::copy(xyz1 + j * 15, xyz1 + (j+1) * 15, mon1);
        std::copy(xyz2 + j * 9, xyz2 + (j+1) * 9, mon2);

        // Right now it assumes 1st atom of each monomer
        const double d12[3] = {mon1[0] -  mon2[0],
                               mon1[1] -  mon2[1],
                               mon1[2] -  mon2[2]};
    
        const double r12sq = d12[0]*d12[0] + d12[1]*d12[1] + d12[2]*d12[2];
        const double r12 = std::sqrt(r12sq);
    
        if (r12 > m_r2f)
            continue;
    
        double xcrd[24]; // coordinates of real sites ONLY
    
        std::copy(mon1, mon1 + 15, xcrd);
        std::copy(mon2, mon2 + 9, xcrd + 15);
        
        double v[45];
        
        double sw = 0.0;
        double gsw = 0.0;
    
        const double* A_1_a= xcrd + 0;
        const double* B_1_a= xcrd + 3;
        const double* B_2_a= xcrd + 6;
        const double* B_3_a= xcrd + 9;
        const double* B_4_a= xcrd + 12;


        const double* C_1_b= xcrd + 15;
        const double* D_1_b= xcrd + 18;
        const double* D_2_b= xcrd + 21;

        double X_1_b[3];
        double X_2_b[3];


        // vsites virt;
        double w12 =     -9.721486914088159e-02;  //from MBpol
        double w13 =     -9.721486914088159e-02;
        double wcross =   9.859272078406150e-02;

        monomer m;
        
        m.setup(C_1_b, w12, wcross,
                 X_1_b, X_2_b);
                        
        variable vr[45];
    
        v[0]  = vr[0].v_exp(m_k_intra_BB, B_1_a, B_2_a);
        v[1]  = vr[1].v_exp(m_k_intra_BB, B_1_a, B_3_a);
        v[2]  = vr[2].v_exp(m_k_intra_BB, B_1_a, B_4_a);
        v[3]  = vr[3].v_exp(m_k_intra_BB, B_2_a, B_3_a);
        v[4]  = vr[4].v_exp(m_k_intra_BB, B_2_a, B_4_a);
        v[5]  = vr[5].v_exp(m_k_intra_BB, B_3_a, B_4_a);
        v[6]  = vr[6].v_exp(m_k_intra_AB, A_1_a, B_1_a);
        v[7]  = vr[7].v_exp(m_k_intra_AB, A_1_a, B_2_a);
        v[8]  = vr[8].v_exp(m_k_intra_AB, A_1_a, B_3_a);
        v[9]  = vr[9].v_exp(m_k_intra_AB, A_1_a, B_4_a);
        v[10]  = vr[10].v_exp(m_k_intra_DD, D_1_b, D_2_b);
        v[11]  = vr[11].v_exp(m_k_intra_XX, X_1_b, X_2_b);
        v[12]  = vr[12].v_exp(m_k_intra_CD, C_1_b, D_1_b);
        v[13]  = vr[13].v_exp(m_k_intra_CD, C_1_b, D_2_b);
        v[14]  = vr[14].v_exp(m_k_intra_CX, C_1_b, X_1_b);
        v[15]  = vr[15].v_exp(m_k_intra_CX, C_1_b, X_2_b);
        v[16]  = vr[16].v_exp(m_k_intra_DX, D_1_b, X_1_b);
        v[17]  = vr[17].v_exp(m_k_intra_DX, D_1_b, X_2_b);
        v[18]  = vr[18].v_exp(m_k_intra_DX, D_2_b, X_1_b);
        v[19]  = vr[19].v_exp(m_k_intra_DX, D_2_b, X_2_b);
        v[20]  = vr[20].v_exp(m_k_AC, A_1_a, C_1_b);
        v[21]  = vr[21].v_exp(m_k_AD, A_1_a, D_1_b);
        v[22]  = vr[22].v_exp(m_k_AD, A_1_a, D_2_b);
        v[23]  = vr[23].v_coul(m_k_AX, A_1_a, X_1_b);
        v[24]  = vr[24].v_coul(m_k_AX, A_1_a, X_2_b);
        v[25]  = vr[25].v_exp(m_k_BC, B_1_a, C_1_b);
        v[26]  = vr[26].v_exp(m_k_BC, B_2_a, C_1_b);
        v[27]  = vr[27].v_exp(m_k_BC, B_3_a, C_1_b);
        v[28]  = vr[28].v_exp(m_k_BC, B_4_a, C_1_b);
        v[29]  = vr[29].v_exp(m_k_BD, B_1_a, D_1_b);
        v[30]  = vr[30].v_exp(m_k_BD, B_1_a, D_2_b);
        v[31]  = vr[31].v_exp(m_k_BD, B_2_a, D_1_b);
        v[32]  = vr[32].v_exp(m_k_BD, B_2_a, D_2_b);
        v[33]  = vr[33].v_exp(m_k_BD, B_3_a, D_1_b);
        v[34]  = vr[34].v_exp(m_k_BD, B_3_a, D_2_b);
        v[35]  = vr[35].v_exp(m_k_BD, B_4_a, D_1_b);
        v[36]  = vr[36].v_exp(m_k_BD, B_4_a, D_2_b);
        v[37]  = vr[37].v_coul(m_k_BX, B_1_a, X_1_b);
        v[38]  = vr[38].v_coul(m_k_BX, B_1_a, X_2_b);
        v[39]  = vr[39].v_coul(m_k_BX, B_2_a, X_1_b);
        v[40]  = vr[40].v_coul(m_k_BX, B_2_a, X_2_b);
        v[41]  = vr[41].v_coul(m_k_BX, B_3_a, X_1_b);
        v[42]  = vr[42].v_coul(m_k_BX, B_3_a, X_2_b);
        v[43]  = vr[43].v_coul(m_k_BX, B_4_a, X_1_b);
        v[44]  = vr[44].v_coul(m_k_BX, B_4_a, X_2_b);
     
    
        sw = f_switch(r12, gsw);
        
        energies[j] = sw*polynomial::eval(coefficients.data(), v);
    }

    double energy = 0.0;
    for (size_t i = 0; i < ndim; i++) {
      energy += energies[i];
    }

    return energy;
    
}

double x2b_A1B4_C1D2X2_v1x::eval(const double* xyz1, const double* xyz2, 
                double * grad1, double * grad2, const size_t ndim) const
{

    std::vector<double> energies(ndim,0.0);

    for (size_t j = 0; j < ndim; j++) {
        double mon1[15];
        double mon2[9];

        std::copy(xyz1 + j * 15, xyz1 + (j+1) * 15, mon1);
        std::copy(xyz2 + j * 9, xyz2 + (j+1) * 9, mon2);

        // Right now it assumes 1st atom of each monomer
        const double d12[3] = {mon1[0] -  mon2[0],
                               mon1[1] -  mon2[1],
                               mon1[2] -  mon2[2]};
    
        const double r12sq = d12[0]*d12[0] + d12[1]*d12[1] + d12[2]*d12[2];
        const double r12 = std::sqrt(r12sq);
    
        if (r12 > m_r2f)
            continue;
    
        double xcrd[24]; // coordinates of real sites ONLY
    
        std::copy(mon1, mon1 + 15, xcrd);
        std::copy(mon2, mon2 + 9, xcrd + 15);
        
        double v[45];
        
        double sw = 0.0;
        double gsw = 0.0;
    
        const double* A_1_a= xcrd + 0;
        const double* B_1_a= xcrd + 3;
        const double* B_2_a= xcrd + 6;
        const double* B_3_a= xcrd + 9;
        const double* B_4_a= xcrd + 12;


        const double* C_1_b= xcrd + 15;
        const double* D_1_b= xcrd + 18;
        const double* D_2_b= xcrd + 21;

        double X_1_b[3];
        double X_2_b[3];


        //vsites virt;
        double w12 =     -9.721486914088159e-02;  //from MBpol
        double w13 =     -9.721486914088159e-02;
        double wcross =   9.859272078406150e-02;

        monomer m;
        
        m.setup(C_1_b, w12, wcross, 
                 X_1_b, X_2_b);
                        
        variable vr[45];
    
        v[0]  = vr[0].v_exp(m_k_intra_BB, B_1_a, B_2_a);
        v[1]  = vr[1].v_exp(m_k_intra_BB, B_1_a, B_3_a);
        v[2]  = vr[2].v_exp(m_k_intra_BB, B_1_a, B_4_a);
        v[3]  = vr[3].v_exp(m_k_intra_BB, B_2_a, B_3_a);
        v[4]  = vr[4].v_exp(m_k_intra_BB, B_2_a, B_4_a);
        v[5]  = vr[5].v_exp(m_k_intra_BB, B_3_a, B_4_a);
        v[6]  = vr[6].v_exp(m_k_intra_AB, A_1_a, B_1_a);
        v[7]  = vr[7].v_exp(m_k_intra_AB, A_1_a, B_2_a);
        v[8]  = vr[8].v_exp(m_k_intra_AB, A_1_a, B_3_a);
        v[9]  = vr[9].v_exp(m_k_intra_AB, A_1_a, B_4_a);
        v[10]  = vr[10].v_exp(m_k_intra_DD, D_1_b, D_2_b);
        v[11]  = vr[11].v_exp(m_k_intra_XX, X_1_b, X_2_b);
        v[12]  = vr[12].v_exp(m_k_intra_CD, C_1_b, D_1_b);
        v[13]  = vr[13].v_exp(m_k_intra_CD, C_1_b, D_2_b);
        v[14]  = vr[14].v_exp(m_k_intra_CX, C_1_b, X_1_b);
        v[15]  = vr[15].v_exp(m_k_intra_CX, C_1_b, X_2_b);
        v[16]  = vr[16].v_exp(m_k_intra_DX, D_1_b, X_1_b);
        v[17]  = vr[17].v_exp(m_k_intra_DX, D_1_b, X_2_b);
        v[18]  = vr[18].v_exp(m_k_intra_DX, D_2_b, X_1_b);
        v[19]  = vr[19].v_exp(m_k_intra_DX, D_2_b, X_2_b);
        v[20]  = vr[20].v_exp(m_k_AC, A_1_a, C_1_b);
        v[21]  = vr[21].v_exp(m_k_AD, A_1_a, D_1_b);
        v[22]  = vr[22].v_exp(m_k_AD, A_1_a, D_2_b);
        v[23]  = vr[23].v_coul(m_k_AX, A_1_a, X_1_b);
        v[24]  = vr[24].v_coul(m_k_AX, A_1_a, X_2_b);
        v[25]  = vr[25].v_exp(m_k_BC, B_1_a, C_1_b);
        v[26]  = vr[26].v_exp(m_k_BC, B_2_a, C_1_b);
        v[27]  = vr[27].v_exp(m_k_BC, B_3_a, C_1_b);
        v[28]  = vr[28].v_exp(m_k_BC, B_4_a, C_1_b);
        v[29]  = vr[29].v_exp(m_k_BD, B_1_a, D_1_b);
        v[30]  = vr[30].v_exp(m_k_BD, B_1_a, D_2_b);
        v[31]  = vr[31].v_exp(m_k_BD, B_2_a, D_1_b);
        v[32]  = vr[32].v_exp(m_k_BD, B_2_a, D_2_b);
        v[33]  = vr[33].v_exp(m_k_BD, B_3_a, D_1_b);
        v[34]  = vr[34].v_exp(m_k_BD, B_3_a, D_2_b);
        v[35]  = vr[35].v_exp(m_k_BD, B_4_a, D_1_b);
        v[36]  = vr[36].v_exp(m_k_BD, B_4_a, D_2_b);
        v[37]  = vr[37].v_coul(m_k_BX, B_1_a, X_1_b);
        v[38]  = vr[38].v_coul(m_k_BX, B_1_a, X_2_b);
        v[39]  = vr[39].v_coul(m_k_BX, B_2_a, X_1_b);
        v[40]  = vr[40].v_coul(m_k_BX, B_2_a, X_2_b);
        v[41]  = vr[41].v_coul(m_k_BX, B_3_a, X_1_b);
        v[42]  = vr[42].v_coul(m_k_BX, B_3_a, X_2_b);
        v[43]  = vr[43].v_coul(m_k_BX, B_4_a, X_1_b);
        v[44]  = vr[44].v_coul(m_k_BX, B_4_a, X_2_b);
     
    
        double g[45];

        // the switch
        sw = f_switch(r12, gsw);
        
        energies[j] = polynomial::eval(coefficients.data(), v, g);
        
        double xgrd[30];
        std::fill(xgrd, xgrd + 30, 0.0);

        double* A_1_a_g= xgrd + 0;
        double* B_1_a_g= xgrd + 3;
        double* B_2_a_g= xgrd + 6;
        double* B_3_a_g= xgrd + 9;
        double* B_4_a_g= xgrd + 12;

        double* C_1_b_g= xgrd + 15;
        double* D_1_b_g= xgrd + 18;
        double* D_2_b_g= xgrd + 21;


        double* X_1_b_g= xgrd + 24;
        double* X_2_b_g= xgrd + 27;

        vr[0].grads(g[0], B_1_a_g, B_2_a_g, B_1_a, B_2_a);
        vr[1].grads(g[1], B_1_a_g, B_3_a_g, B_1_a, B_3_a);
        vr[2].grads(g[2], B_1_a_g, B_4_a_g, B_1_a, B_4_a);
        vr[3].grads(g[3], B_2_a_g, B_3_a_g, B_2_a, B_3_a);
        vr[4].grads(g[4], B_2_a_g, B_4_a_g, B_2_a, B_4_a);
        vr[5].grads(g[5], B_3_a_g, B_4_a_g, B_3_a, B_4_a);
        vr[6].grads(g[6], A_1_a_g, B_1_a_g, A_1_a, B_1_a);
        vr[7].grads(g[7], A_1_a_g, B_2_a_g, A_1_a, B_2_a);
        vr[8].grads(g[8], A_1_a_g, B_3_a_g, A_1_a, B_3_a);
        vr[9].grads(g[9], A_1_a_g, B_4_a_g, A_1_a, B_4_a);
        vr[10].grads(g[10], D_1_b_g, D_2_b_g, D_1_b, D_2_b);
        vr[11].grads(g[11], X_1_b_g, X_2_b_g, X_1_b, X_2_b);
        vr[12].grads(g[12], C_1_b_g, D_1_b_g, C_1_b, D_1_b);
        vr[13].grads(g[13], C_1_b_g, D_2_b_g, C_1_b, D_2_b);
        vr[14].grads(g[14], C_1_b_g, X_1_b_g, C_1_b, X_1_b);
        vr[15].grads(g[15], C_1_b_g, X_2_b_g, C_1_b, X_2_b);
        vr[16].grads(g[16], D_1_b_g, X_1_b_g, D_1_b, X_1_b);
        vr[17].grads(g[17], D_1_b_g, X_2_b_g, D_1_b, X_2_b);
        vr[18].grads(g[18], D_2_b_g, X_1_b_g, D_2_b, X_1_b);
        vr[19].grads(g[19], D_2_b_g, X_2_b_g, D_2_b, X_2_b);
        vr[20].grads(g[20], A_1_a_g, C_1_b_g, A_1_a, C_1_b);
        vr[21].grads(g[21], A_1_a_g, D_1_b_g, A_1_a, D_1_b);
        vr[22].grads(g[22], A_1_a_g, D_2_b_g, A_1_a, D_2_b);
        vr[23].grads(g[23], A_1_a_g, X_1_b_g, A_1_a, X_1_b);
        vr[24].grads(g[24], A_1_a_g, X_2_b_g, A_1_a, X_2_b);
        vr[25].grads(g[25], B_1_a_g, C_1_b_g, B_1_a, C_1_b);
        vr[26].grads(g[26], B_2_a_g, C_1_b_g, B_2_a, C_1_b);
        vr[27].grads(g[27], B_3_a_g, C_1_b_g, B_3_a, C_1_b);
        vr[28].grads(g[28], B_4_a_g, C_1_b_g, B_4_a, C_1_b);
        vr[29].grads(g[29], B_1_a_g, D_1_b_g, B_1_a, D_1_b);
        vr[30].grads(g[30], B_1_a_g, D_2_b_g, B_1_a, D_2_b);
        vr[31].grads(g[31], B_2_a_g, D_1_b_g, B_2_a, D_1_b);
        vr[32].grads(g[32], B_2_a_g, D_2_b_g, B_2_a, D_2_b);
        vr[33].grads(g[33], B_3_a_g, D_1_b_g, B_3_a, D_1_b);
        vr[34].grads(g[34], B_3_a_g, D_2_b_g, B_3_a, D_2_b);
        vr[35].grads(g[35], B_4_a_g, D_1_b_g, B_4_a, D_1_b);
        vr[36].grads(g[36], B_4_a_g, D_2_b_g, B_4_a, D_2_b);
        vr[37].grads(g[37], B_1_a_g, X_1_b_g, B_1_a, X_1_b);
        vr[38].grads(g[38], B_1_a_g, X_2_b_g, B_1_a, X_2_b);
        vr[39].grads(g[39], B_2_a_g, X_1_b_g, B_2_a, X_1_b);
        vr[40].grads(g[40], B_2_a_g, X_2_b_g, B_2_a, X_2_b);
        vr[41].grads(g[41], B_3_a_g, X_1_b_g, B_3_a, X_1_b);
        vr[42].grads(g[42], B_3_a_g, X_2_b_g, B_3_a, X_2_b);
        vr[43].grads(g[43], B_4_a_g, X_1_b_g, B_4_a, X_1_b);
        vr[44].grads(g[44], B_4_a_g, X_2_b_g, B_4_a, X_2_b);


    // ##DEFINE HERE## the redistribution of the gradients
    

        m.grads(X_1_b_g, X_2_b_g, 
                 w12, wcross, C_1_b_g);

    
        for (int i = 0; i < 15; ++i) {
            grad1[i + j*15] += sw*xgrd[i];
        }

        for (int i = 0; i < 9; ++i) {
            grad2[i + j*9] += sw*xgrd[i + 15];
        }

        // gradient of the switch

        gsw *= energies[j]/r12;
        energies[j] *= sw;
        // ENERGIES ARE ALREADY MULTIPLIED!
        for (int i = 0; i < 3; ++i) {
            const double d = gsw*d12[i];
            grad1[i + j*15] += d;
            grad2[i + j*9] -= d;
        }

    }

    double energy = 0.0;
    for (size_t i = 0; i < ndim; i++) {
      energy += energies[i];
    }

    return energy;
}

} // namespace x2b_A1B4_C1D2X2_deg4

////////////////////////////////////////////////////////////////////////////////

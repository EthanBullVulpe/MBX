

#include "x2b_A1B4_C1D6_deg3_v1x.h" 
 

////////////////////////////////////////////////////////////////////////////////

namespace {

struct variable {
    double v_exp0(const double& r0, const double& k,
                 const double * p1, const double * p2 );
                 
    double v_exp(const double& k,
                 const double * p1, const double * p2 );

    double v_coul0(const double& r0, const double& k,
                  const double * p1, const double * p2 );
                  
    double v_coul(const double& k,
                  const double * p1, const double * p2 );

    double v_gau0(const double& r0, const double& k,
                 const double * p1, const double * p2 );
                  
    void grads(const double& gg, double * grd1, double * grd2,
               const double * p1, const double * p2);

    double g[3]; // diff(value, p1 - p2)
};

//----------------------------------------------------------------------------//

double variable::v_gau0(const double& r0, const double& k,
                       const double * p1, const double * p2)
{
    g[0] = p1[0] - p2[0];
    g[1] = p1[1] - p2[1];
    g[2] = p1[2] - p2[2];

    const double r = std::sqrt(g[0]*g[0] + g[1]*g[1] + g[2]*g[2]);

    const double exp1 = std::exp(-k*(r0 - r)*(r0 - r));
    const double gg = 2*k*(r0 - r)*exp1/r;

    g[0] *= gg;
    g[1] *= gg;
    g[2] *= gg;

    return exp1;
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

double variable::v_exp0(const double& r0, const double& k,
                       const double * p1, const double * p2)
{
    g[0] = p1[0] - p2[0];
    g[1] = p1[1] - p2[1];
    g[2] = p1[2] - p2[2];

    const double r = std::sqrt(g[0]*g[0] + g[1]*g[1] + g[2]*g[2]);

    const double exp1 = std::exp(k*(r0 - r));
    const double gg = - k*exp1/r;

    g[0] *= gg;
    g[1] *= gg;
    g[2] *= gg;

    return exp1;
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

double variable::v_exp(const double& k,
                       const double * p1, const double * p2)
{
    g[0] = p1[0] - p2[0];
    g[1] = p1[1] - p2[1];
    g[2] = p1[2] - p2[2];

    const double r = std::sqrt(g[0]*g[0] + g[1]*g[1] + g[2]*g[2]);

    const double exp1 = std::exp(k*(- r));
    const double gg = - k*exp1/r;

    g[0] *= gg;
    g[1] *= gg;
    g[2] *= gg;

    return exp1;
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //


double variable::v_coul(const double& k,
                        const double * p1, const double * p2)
{
    g[0] = p1[0] - p2[0];
    g[1] = p1[1] - p2[1];
    g[2] = p1[2] - p2[2];

    const double rsq = g[0]*g[0] + g[1]*g[1] + g[2]*g[2];
    const double r = std::sqrt(rsq);

    const double exp1 = std::exp(k*(-r));
    const double rinv = 1.0/r;
    const double val = exp1*rinv;

    const double gg = - (k + rinv)*val*rinv;

    g[0] *= gg;
    g[1] *= gg;
    g[2] *= gg;

    return val;
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

double variable::v_coul0(const double& r0, const double& k,
                        const double * p1, const double * p2)
{
    g[0] = p1[0] - p2[0];
    g[1] = p1[1] - p2[1];
    g[2] = p1[2] - p2[2];

    const double rsq = g[0]*g[0] + g[1]*g[1] + g[2]*g[2];
    const double r = std::sqrt(rsq);

    const double exp1 = std::exp(k*(r0 - r));
    const double rinv = 1.0/r;
    const double val = exp1*rinv;

    const double gg = - (k + rinv)*val*rinv;

    g[0] *= gg;
    g[1] *= gg;
    g[2] *= gg;

    return val;
}

//----------------------------------------------------------------------------//

void variable::grads(const double& gg, double * grd1, double * grd2, 
                     const double * p1, const double * p2) {
    for (size_t i = 0; i < 3 ; i++) {
        double d = gg*g[i];
        grd1[i] += d;
        grd2[i] -= d;
    }
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

struct monomer {
    double oh1[3];
    double oh2[3];

    void setup(const double* ohh,
               const double& in_plane_g, const double& out_of_plane_g,
               double x1[3], double x2[3]);

    void grads(const double* g1, const double* g2,
               const double& in_plane_g, const double& out_of_plane_g,
               double* grd) const;
};

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

void monomer::setup(const double* ohh,
                    const double& in_plane_g, const double& out_of_plane_g,
                    double* x1, double* x2)
{
    for (int i = 0; i < 3; ++i) {
        oh1[i] = ohh[i + 3] - ohh[i];
        oh2[i] = ohh[i + 6] - ohh[i];
    }

    const double v[3] = {
        oh1[1]*oh2[2] - oh1[2]*oh2[1],
        oh1[2]*oh2[0] - oh1[0]*oh2[2],
        oh1[0]*oh2[1] - oh1[1]*oh2[0]
    };

    for (int i = 0; i < 3; ++i) {
        const double in_plane = ohh[i] + 0.5*in_plane_g*(oh1[i] + oh2[i]);
        const double out_of_plane = out_of_plane_g*v[i];

        x1[i] = in_plane + out_of_plane;
        x2[i] = in_plane - out_of_plane;
    }
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

void monomer::grads(const double* g1, const double* g2,
                    const double& in_plane_g, const double& out_of_plane_g,
                    double* grd) const
{
    const double gm[3] = {
        g1[0] - g2[0],
        g1[1] - g2[1],
        g1[2] - g2[2]
    };

    const double t1[3] = {
        oh2[1]*gm[2] - oh2[2]*gm[1],
        oh2[2]*gm[0] - oh2[0]*gm[2],
        oh2[0]*gm[1] - oh2[1]*gm[0]
    };

    const double t2[3] = {
        oh1[1]*gm[2] - oh1[2]*gm[1],
        oh1[2]*gm[0] - oh1[0]*gm[2],
        oh1[0]*gm[1] - oh1[1]*gm[0]
    };

    for (int i = 0; i < 3; ++i) {
        const double gsum = g1[i] + g2[i];
        const double in_plane = 0.5*in_plane_g*gsum;

        const double gh1 = in_plane + out_of_plane_g*t1[i];
        const double gh2 = in_plane - out_of_plane_g*t2[i];

        grd[i + 0] += gsum - (gh1 + gh2); // O
        grd[i + 3] += gh1; // H1
        grd[i + 6] += gh2; // H2
    }
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

//struct vsites {
//    //void TwoParticleAverageSite() {}
//    //void ThreeParticleAverageSite() {}
//    void OutOfPlaneSite(const double& w12, const double& w13,
//                        const double& wcross, const double x1[3],
//                        const double y1[3], const double y2[3],
//                        double vs[3]);
//    //void LocalCoordinatesSite{}
//};
//
//void vsites::OutOfPlaneSite(const double& w12,
//                            const double& w13,
//                            const double& wcross,
//                            const double x1[3],
//                            const double y1[3],
//                            const double y2[3],
//                            double vs[3]) {
//    double r12[3], r13[3];
//
//    for (int i = 0; i < 3; ++i) {
//        r12[i] = y1[i] - x1[i];
//        r13[i] = y2[i] - x1[i];
//    }
//                            
//    double rc[3];
//    rc[0] = r12[1]*r13[2] - r12[2]*r13[1];
//    rc[1] = r12[2]*r13[0] - r12[0]*r13[2];
//    rc[2] = r12[0]*r13[1] - r12[1]*r13[0];
//    
//    vs[0] = x1[0] + w12 * r12[0] + w13 * r13[0] + wcross * rc[0];
//    vs[1] = x1[1] + w12 * r12[1] + w13 * r13[1] + wcross * rc[1];
//    vs[2] = x1[2] + w12 * r12[2] + w13 * r13[2] + wcross * rc[2];
//}

} // namespace

////////////////////////////////////////////////////////////////////////////////

namespace x2b_A1B4_C1D6_deg3 {

//----------------------------------------------------------------------------//

x2b_A1B4_C1D6_v1x::x2b_A1B4_C1D6_v1x(std::string mon1, std::string mon2) {

    // =====>> SECTION CONSTRUCTOR <<=====
    // =>> PASTE RIGHT BELOW THIS LINE <==
    if (mon1 == "nh4+" && mon2  == "pf6-") {
        coefficients = std::vector<double> { 
            -4.493316459391415e+02, // 0
             1.202738008526095e+02, // 1
             1.024595946469891e+03, // 2
            -4.445878377301978e+02, // 3
             3.709476735711389e+02, // 4
             1.581656714675862e+02, // 5
             3.993027130297094e+02, // 6
            -3.896810666322422e+02, // 7
            -2.690972718185239e+03, // 8
             8.816284998062865e+02, // 9
             4.175351433836334e+03, // 10
             3.965349172242453e+03, // 11
            -1.582195536044671e+03, // 12
            -1.807296439793167e+03, // 13
             8.750286524384389e+02, // 14
            -1.491777052250006e+03, // 15
            -1.000731159332784e+04, // 16
            -6.110767016840115e+03, // 17
            -8.249004871646678e+02, // 18
            -2.394305674574123e+03, // 19
             6.435021356878938e+02, // 20
             2.910948980683798e+02, // 21
             2.329927324193508e+03, // 22
             1.352714364352604e+03, // 23
             4.246436514409134e+01, // 24
            -1.690862358134647e+02, // 25
            -1.674501212437203e+03, // 26
             4.408440186178581e+03, // 27
             9.220440063847469e+02, // 28
             1.433420229857073e+03, // 29
             1.173815412394229e+02, // 30
             1.163437291287368e+02, // 31
            -6.779495476495153e+01, // 32
            -5.904221389508398e+02, // 33
             6.581428469394733e+02, // 34
            -1.311907155035386e+03, // 35
            -4.250349766752661e+02, // 36
             4.068018117485998e+02, // 37
            -5.441111944773139e+02, // 38
             3.115682258834503e+02, // 39
             6.441909982794416e+02, // 40
            -2.989593699802110e+02, // 41
             5.469975421453267e+02, // 42
             4.659954948908434e+02, // 43
            -7.572208995888714e+02, // 44
            -2.230305511801052e+01, // 45
            -2.290700537279116e+02, // 46
             8.628874968343792e+00, // 47
            -1.280270916454080e+03, // 48
            -1.696435903328273e+03, // 49
             1.836939041422952e+02, // 50
            -1.505892549374758e+02, // 51
            -6.010694453305894e+02, // 52
             4.895578133713274e+02, // 53
             3.996138566633923e+02, // 54
            -7.149801290126894e+02, // 55
             9.132364550752646e+02, // 56
             3.799794885473488e+01, // 57
            -2.484870160706513e+02, // 58
             1.898063629700438e+03, // 59
            -1.511689547542939e+02, // 60
            -1.459106818728795e+02, // 61
            -2.783221689181854e+02, // 62
             2.353032692147195e+02, // 63
             1.337555299662986e+02, // 64
            -3.516863341990040e+02, // 65
             3.879349894009879e+02, // 66
             9.527607664589858e+01, // 67
             7.509708614972109e+02, // 68
             3.126372010574707e+03, // 69
             1.931650415378513e+03, // 70
             1.506782417684957e+03, // 71
            -3.215252910064466e+04, // 72
            -2.897596399910268e+03, // 73
             5.042294030293608e+02, // 74
            -1.813016594898942e+03, // 75
            -2.110664145927194e+03, // 76
             1.913913074017547e+03, // 77
            -2.183747498303063e+03, // 78
            -5.913681860051910e+02, // 79
            -2.314031638409985e+03, // 80
            -3.728595619994617e+03, // 81
            -1.570061740701706e+02, // 82
            -7.592075456201374e+02, // 83
             1.339784662138406e+03, // 84
             7.275036017778747e+02, // 85
             6.982677242769244e+03, // 86
             6.092485429165705e+03, // 87
            -9.410282816079747e+02, // 88
             3.592483531849643e+03, // 89
             1.250278462706121e+03, // 90
            -6.558993167691632e+03, // 91
            -2.554366307299684e+03, // 92
            -1.585207418192896e+04, // 93
            -1.386393135780933e+04, // 94
            -2.266855872193389e+04, // 95
             8.667151591046793e+03, // 96
            -1.904777074880499e+03, // 97
             8.363852233843767e+03, // 98
            -6.045148716178684e+03, // 99
            -1.408456688758304e+03, // 100
            -2.773485120790686e+03, // 101
             3.939733395212344e+03, // 102
             1.928381937856505e+04, // 103
            -2.164573949570915e+04, // 104
            -6.286485705273893e+02, // 105
             1.948502128234904e+03, // 106
             7.393865932426532e+03, // 107
            -9.524434559486825e+03, // 108
            -1.778328281425455e+03, // 109
            -4.325980269670535e+02, // 110
            -2.629657101076154e+03, // 111
            -1.836481045646816e+02, // 112
            -1.132467948822382e+03, // 113
            -8.497458331743847e+01, // 114
            -1.363696231462166e+03, // 115
            -4.930211338892711e+03, // 116
             3.758782095163997e+02, // 117
             2.784112058010022e+03, // 118
             5.198146294575593e+03, // 119
            -1.930807900137202e+03, // 120
            -1.031613021784885e+04, // 121
            -6.414117061376621e+03, // 122
             3.882264604535476e+03, // 123
             6.002016847431570e+03, // 124
            -4.151527376724385e+03, // 125
            -7.581472504259946e+02, // 126
            -9.005527443452294e+03, // 127
             1.338605502185042e+04, // 128
             5.986315213516655e+02, // 129
             4.616054494587464e+03, // 130
             4.305739974049216e+02, // 131
             1.242224392038356e+03, // 132
             6.771791861398860e+02, // 133
            -3.121774148719850e+03, // 134
            -6.729686840955833e+02, // 135
            -2.458004036128814e+02, // 136
            -3.101414696617370e+02, // 137
             7.268416314984140e+02, // 138
             1.265650812142704e+03, // 139
             6.749734079362913e+02, // 140
             4.601365720578908e+02, // 141
             1.106580663930764e+03, // 142
             2.776808018252184e+03, // 143
             1.481543455276045e+03, // 144
            -6.407492035451424e+03, // 145
            -1.297913290643913e+03, // 146
             1.671917494174714e+03, // 147
            -9.965325353479060e+02, // 148
            -2.163475559976116e+03, // 149
            -2.126005353956985e+03, // 150
             4.125369159401253e+03, // 151
             5.625017945261463e+02, // 152
            -1.039633408534122e+04, // 153
             7.979813429564023e+02, // 154
            -4.998712664318715e+03, // 155
            -4.665738338697559e+03, // 156
            -5.800086285970454e+03, // 157
             6.988587845882334e+02, // 158
            -4.107905397269542e+02, // 159
             6.778649163864620e+03, // 160
             1.682796141314573e+04, // 161
             1.560797706041198e+04, // 162
             4.877176887536318e+02, // 163
            -1.910722004462718e+02, // 164
             2.144289497841734e+03, // 165
            -6.505968558896378e+03, // 166
            -3.183468339510634e+02, // 167
            -1.550392952601555e+03, // 168
             3.266115077493331e+03, // 169
            -5.547917021874365e+02, // 170
             2.331760022550664e+02, // 171
             9.033071583259323e+02, // 172
            -2.718646857251271e+02, // 173
             1.115190736719056e+03, // 174
            -2.417919888854051e+02, // 175
            -8.756877454311867e+02, // 176
            -2.387912440226279e+02, // 177
            -1.744303030919990e+02, // 178
             1.753587515198960e+02, // 179
             1.234759706397838e+03, // 180
            -3.455376648271470e+02, // 181
            -3.110046577379466e+02, // 182
            -1.825809946450263e+03, // 183
             6.333776248019662e+02, // 184
             3.187060404539396e+02, // 185
            -6.213750459256936e+02, // 186
            -5.042526446027759e+02, // 187
            -8.716143276964031e+02, // 188
            -1.312200623900712e+02, // 189
             1.496948528071000e+01, // 190
            -1.480760226941786e+03, // 191
            -1.242052375337648e+03, // 192
            -1.963293932805357e+03, // 193
             5.603116161311540e+02, // 194
            -2.263839387469853e+02, // 195
            -1.201413001821411e+03, // 196
            -1.053198298627141e+03, // 197
             5.877140566815157e+02, // 198
             1.332384430386942e+03, // 199
             6.798367579010645e+02, // 200
            -7.819257222362311e+02, // 201
             9.712798120234302e+01, // 202
            -9.017731930882326e+03, // 203
             9.252766807709663e+02, // 204
             3.535837110511080e+03, // 205
             4.151182827985192e+03, // 206
             4.367444451922827e+03, // 207
             7.784911664862975e+02, // 208
            -4.113701172799933e+03, // 209
             2.040850971622132e+03, // 210
            -1.611028384012524e+04, // 211
             8.914515829010388e+03, // 212
            -9.394699783098193e+02, // 213
             4.877652035509127e+02, // 214
            -7.975676843789851e+01, // 215
             4.559445979411527e+02, // 216
            -1.939962469343055e+02, // 217
             2.152358106493781e+03, // 218
            -7.402576097517771e+02, // 219
            -5.109026796670376e+01, // 220
            -6.291874852885118e+02, // 221
            -7.863132980664864e+01, // 222
            -1.941199186353762e+02, // 223
            -6.790765175520343e+02, // 224
             1.415063022982189e+02, // 225
             3.076662412988006e+02, // 226
             1.227331696856280e+03, // 227
            -1.186460025853866e+02, // 228
            -3.876005030051954e+01, // 229
            -2.202118972097661e+02, // 230
            -1.632974083370215e+02, // 231
             2.061128598461380e+02, // 232
             1.347189512583520e+00, // 233
            -4.496325999884534e+02, // 234
             1.140507745757947e+03, // 235
            -2.405078463190544e+02, // 236
            -1.536304086371585e+03, // 237
             3.305997355812818e+02, // 238
            -1.129428189199315e+03, // 239
             3.807835295982565e+01, // 240
            -4.759600847624527e+01, // 241
            -5.841393127244390e+02, // 242
            -1.137964024088138e+03, // 243
             3.733918741739690e+02, // 244
            -2.160623911328184e+02, // 245
            -1.278480033138225e+02, // 246
            -7.926673517658353e+02, // 247
             6.180262802476879e+02, // 248
             3.750587069413045e+02, // 249
            -4.205964610440030e+02, // 250
             6.180612167520459e+02, // 251
             1.524628438688094e+02, // 252
             8.904256070514787e+02, // 253
            -4.238881599402430e+02, // 254
            -2.373146260753154e+02, // 255
            -8.085972700704806e+02, // 256
             6.743896114300088e+02, // 257
            -5.194724467042167e+02, // 258
            -4.735475440643340e+02, // 259
            -2.326065940487548e+02, // 260
            -4.531419390179533e+02, // 261
             1.275562028190028e+01, // 262
            -2.758999973610563e+02, // 263
            -5.773923477987198e+02, // 264
             4.151024864560578e+01, // 265
             5.616645339280760e+02, // 266
            -7.088133677931175e+02, // 267
            -4.192520019687954e+02, // 268
            -4.461763717626337e+02, // 269
             3.143949467816958e+01, // 270
            -3.650069693043400e+01, // 271
            -6.951679548181037e+02, // 272
             9.174566925841430e+02, // 273
             3.376631444747645e+03, // 274
             2.424331211759880e+02, // 275
             4.500920938894139e+01, // 276
            -1.090293970191983e+02, // 277
             1.063174667200323e+03, // 278
             1.302021037076192e+03, // 279
             1.975920965667050e+03, // 280
            -2.445957476584647e+02, // 281
             4.031097202010204e+03, // 282
            -2.421687809749879e+03, // 283
            -7.583751401211515e+03, // 284
             3.523468695642470e+02, // 285
            -5.423954456572042e+02, // 286
            -1.705500666346223e+03, // 287
             5.169097704577119e+02, // 288
             1.899702618908916e+03, // 289
             2.707315756377551e+03, // 290
             6.208738296284070e+02, // 291
             2.868537847271319e+03, // 292
            -1.660482062112835e+03, // 293
            -2.141908894971802e+03, // 294
            -1.283770846446813e+04, // 295
            -1.254832988825651e+03, // 296
             1.614938161564577e+04, // 297
             4.141690349659205e+03, // 298
            -5.534993868109425e+03, // 299
             8.974166161278901e+03, // 300
            -5.395108579330476e+03, // 301
             1.271685202825411e+03, // 302
             5.805059334744927e+02, // 303
            -6.284521935886528e+02, // 304
             2.185857906410786e+03, // 305
            -1.257141775018271e+03, // 306
             1.942386293431074e+03, // 307
            -2.519645119334963e+03, // 308
             4.145868045070886e+02, // 309
             1.532323315560500e+02, // 310
            -7.390987533276498e+01, // 311
             4.612970588452632e+02, // 312
            -3.829061001808432e+03, // 313
             5.435515401233178e+01, // 314
            -3.631990699065481e+02, // 315
            -5.199401296357523e+02, // 316
            -2.182111647744416e+03, // 317
             1.027726391423073e+01, // 318
             1.316270238577567e+02, // 319
            -2.261950923770637e+01, // 320
            -2.112350519998986e+02, // 321
            -2.198058042317530e+02, // 322
            -1.150300347318224e+03, // 323
            -4.973280575343445e+02, // 324
             9.700828997817592e+00, // 325
             1.352143226074875e+03, // 326
            -3.869397282235290e+03, // 327
            -2.135403923454460e+03, // 328
             1.669101411155869e+02, // 329
             8.567348451883782e+02, // 330
             1.305982403188257e+02, // 331
             1.755763156206875e+02, // 332
             2.749023787829437e+02, // 333
            -5.428238275166627e+02, // 334
            -4.433667744459706e+02, // 335
             4.711063001716471e+02, // 336
             2.667473940946539e+02, // 337
            -4.582578271079545e+02, // 338
            -4.902777423305884e+03, // 339
            -1.321241428643341e+02, // 340
            -2.680605382425452e+02, // 341
            -6.127223362173213e+01, // 342
             8.804347745101776e+02, // 343
            -6.531776237548379e+02, // 344
            -6.332035697425886e+02, // 345
             3.009734287187795e+02, // 346
             7.333188883983349e+02, // 347
            -1.284833702114718e+03, // 348
             7.653581893191454e+02, // 349
             9.644783156611774e+02, // 350
             5.691178875142018e+02, // 351
            -1.102200156507457e+02, // 352
             4.049167327614598e+02, // 353
             9.562493872998568e+02, // 354
            -2.491375066195897e+03, // 355
            -1.190659619480312e+03, // 356
            -6.893301058455188e+03, // 357
            -4.550337753717270e+02, // 358
             9.287723511549823e+02, // 359
             1.440140252891979e+03, // 360
             7.559998834511706e+03, // 361
            -8.888811447817128e+02, // 362
            -1.147423810333705e+04, // 363
             1.341335886397048e+03, // 364
             2.646121810719743e+02, // 365
             8.210000141177329e+02, // 366
             2.210472759559889e+02, // 367
            -1.363084802199934e+03, // 368
            -7.109749725436419e+02, // 369
             2.499348291973583e+02, // 370
            -2.562873689450680e+03, // 371
             2.812377255927666e+03, // 372
            -1.006933903388551e+03, // 373
             1.697872865518113e+03, // 374
            -2.794602975262341e+03, // 375
            -2.665210451193308e+04, // 376
             2.908968310827294e+02, // 377
            -4.376374718114815e+02, // 378
            -5.387497410658922e+03, // 379
             1.197935936791685e+04, // 380
             1.810175966743453e+03, // 381
            -1.233723915252156e+03, // 382
             2.169004316721425e+03, // 383
             1.278449373823362e+02, // 384
             3.047702179497030e+03, // 385
            -1.784769095774954e+03, // 386
            -9.500311407286564e+02, // 387
             4.361473261652075e+02, // 388
            -1.893628855128562e+03, // 389
            -4.414005629896299e+02, // 390
            -2.373532515683767e+02, // 391
             1.007117278754959e+03, // 392
            -3.234565734899588e+02, // 393
             5.937767502339049e+02, // 394
            -4.343962448705152e+02, // 395
             5.744115673502309e+02, // 396
             4.406351939761097e+03, // 397
            -2.076877692676951e+03, // 398
             6.098943978060321e+01, // 399
             1.075013592624492e+02, // 400
             9.647097762386436e+01, // 401
             9.537072137161474e+01, // 402
            -3.010184590158823e+02, // 403
             5.042345327429033e+02, // 404
             6.678265701233919e+02, // 405
             4.645856064511394e+02, // 406
            -8.721729527402767e+02, // 407
            -1.379924207752240e+03, // 408
            -1.083571432763836e+03, // 409
            -1.198220011158087e+02, // 410
            -4.881714553115467e+02, // 411
             2.675273773067299e+02, // 412
            -4.024229496219618e+02, // 413
            -4.555712583995486e+02, // 414
             8.782735233053414e+02, // 415
             9.537562023991555e+02, // 416
             3.436848770709069e+02, // 417
            -1.315204731668426e+03, // 418
             2.183171757899052e+01, // 419
            -6.169871829262529e+02, // 420
             7.998236697922969e+02, // 421
            -3.170745323973088e+03, // 422
             3.449175584268891e+02, // 423
            -3.996967221857942e+02, // 424
            -1.950326015022629e+02, // 425
            -6.564630538359036e+02, // 426
             4.856878980111622e+02, // 427
             7.182978554285794e+02, // 428
             1.796837376136732e+03, // 429
            -3.463738249583224e+02, // 430
            -2.025433675434567e+02, // 431
             4.967344986854865e+02, // 432
            -3.756680182452521e+02, // 433
            -1.805299324249853e+03, // 434
            -7.795613000547247e+02, // 435
            -2.503722003329066e+02, // 436
            -1.169675450414153e+02, // 437
             3.099704678429817e+02, // 438
             7.035567166382823e+01, // 439
            -3.612106531106049e+02, // 440
             1.344194796827253e+03, // 441
            -9.440311908259753e+02, // 442
             8.460424222570082e+01, // 443
            -4.991833689023826e+02, // 444
             2.128892976944951e+02, // 445
             1.022010065547345e+03, // 446
            -2.596198448129546e+02, // 447
            -5.560363517445526e+02, // 448
            -7.226854789710978e+02, // 449
            -8.865506385729237e+02, // 450
            -1.932418528575744e+02, // 451
            -5.677807245179839e+02, // 452
             6.123353280012922e+02, // 453
             1.231438146335703e+03, // 454
             2.084700112587555e+03, // 455
            -1.414420409574018e+02, // 456
             2.161924443363394e+02, // 457
             5.606715225913354e+02, // 458
            -2.595016878614077e+02, // 459
            -3.838166617369163e+02, // 460
            -5.537707707420211e+02, // 461
             1.487193670692576e+01, // 462
            -1.871680650035402e+02, // 463
             7.164891899186872e+02}; // 464

    m_k_AC =  1.412838353464081e-01; // A^(-1))
    m_k_AD =  2.629612021581943e+00; // A^(-1))
    m_k_BC =  5.555414560081364e-01; // A^(-1))
    m_k_BD =  1.255716146677519e+00; // A^(-1))
    m_k_intra_BB =  4.196838682901206e-01; // A^(-1))
    m_k_intra_AB =  9.416320459082645e-01; // A^(-1))
    m_k_intra_DD =  9.169877977668976e-01; // A^(-1))
    m_k_intra_CD =  9.319442313411848e-01; // A^(-1))
    m_r2i =  7.000000000000000e+00; // A
    m_r2f =  8.000000000000000e+00; // A

    } // if mon1 == "nh4+" && mon2  == "pf6-"

}

//----------------------------------------------------------------------------//

double x2b_A1B4_C1D6_v1x::f_switch(const double& r, double& g) const
{
    if (r > m_r2f) {
        g = 0.0;
        return 0.0;
    } else if (r > m_r2i) {
        const double t1 = M_PI/(m_r2f - m_r2i);
        const double x = (r - m_r2i)*t1;
        g = - std::sin(x)*t1/2.0;
        return (1.0 + std::cos(x))/2.0;
    } else {
        g = 0.0;
        return 1.0;
    }
}

//----------------------------------------------------------------------------//

double x2b_A1B4_C1D6_v1x::eval(const double* xyz1, const double* xyz2, const size_t ndim) const
{

    std::vector<double> energies(ndim,0.0);

    for (size_t j = 0; j < ndim; j++) {
        double mon1[15];
        double mon2[21];

        std::copy(xyz1 + j * 15, xyz1 + (j+1) * 15, mon1);
        std::copy(xyz2 + j * 21, xyz2 + (j+1) * 21, mon2);

        // Right now it assumes 1st atom of each monomer
        const double d12[3] = {mon1[0] -  mon2[0],
                               mon1[1] -  mon2[1],
                               mon1[2] -  mon2[2]};
    
        const double r12sq = d12[0]*d12[0] + d12[1]*d12[1] + d12[2]*d12[2];
        const double r12 = std::sqrt(r12sq);
    
        if (r12 > m_r2f)
            continue;
    
        double xcrd[36]; // coordinates of real sites ONLY
    
        std::copy(mon1, mon1 + 15, xcrd);
        std::copy(mon2, mon2 + 21, xcrd + 15);
        
        double v[66];
        
        double sw = 0.0;
        double gsw = 0.0;
    
        const double* A_1_a= xcrd + 0;
        const double* B_1_a= xcrd + 3;
        const double* B_2_a= xcrd + 6;
        const double* B_3_a= xcrd + 9;
        const double* B_4_a= xcrd + 12;


        const double* C_1_b= xcrd + 15;
        const double* D_1_b= xcrd + 18;
        const double* D_2_b= xcrd + 21;
        const double* D_3_b= xcrd + 24;
        const double* D_4_b= xcrd + 27;
        const double* D_5_b= xcrd + 30;
        const double* D_6_b= xcrd + 33;


    
        variable vr[66];
    
        v[0]  = vr[0].v_exp(m_k_intra_BB, B_1_a, B_2_a);
        v[1]  = vr[1].v_exp(m_k_intra_BB, B_1_a, B_3_a);
        v[2]  = vr[2].v_exp(m_k_intra_BB, B_1_a, B_4_a);
        v[3]  = vr[3].v_exp(m_k_intra_BB, B_2_a, B_3_a);
        v[4]  = vr[4].v_exp(m_k_intra_BB, B_2_a, B_4_a);
        v[5]  = vr[5].v_exp(m_k_intra_BB, B_3_a, B_4_a);
        v[6]  = vr[6].v_exp(m_k_intra_AB, A_1_a, B_1_a);
        v[7]  = vr[7].v_exp(m_k_intra_AB, A_1_a, B_2_a);
        v[8]  = vr[8].v_exp(m_k_intra_AB, A_1_a, B_3_a);
        v[9]  = vr[9].v_exp(m_k_intra_AB, A_1_a, B_4_a);
        v[10]  = vr[10].v_exp(m_k_intra_DD, D_1_b, D_2_b);
        v[11]  = vr[11].v_exp(m_k_intra_DD, D_1_b, D_3_b);
        v[12]  = vr[12].v_exp(m_k_intra_DD, D_1_b, D_4_b);
        v[13]  = vr[13].v_exp(m_k_intra_DD, D_1_b, D_5_b);
        v[14]  = vr[14].v_exp(m_k_intra_DD, D_1_b, D_6_b);
        v[15]  = vr[15].v_exp(m_k_intra_DD, D_2_b, D_3_b);
        v[16]  = vr[16].v_exp(m_k_intra_DD, D_2_b, D_4_b);
        v[17]  = vr[17].v_exp(m_k_intra_DD, D_2_b, D_5_b);
        v[18]  = vr[18].v_exp(m_k_intra_DD, D_2_b, D_6_b);
        v[19]  = vr[19].v_exp(m_k_intra_DD, D_3_b, D_4_b);
        v[20]  = vr[20].v_exp(m_k_intra_DD, D_3_b, D_5_b);
        v[21]  = vr[21].v_exp(m_k_intra_DD, D_3_b, D_6_b);
        v[22]  = vr[22].v_exp(m_k_intra_DD, D_4_b, D_5_b);
        v[23]  = vr[23].v_exp(m_k_intra_DD, D_4_b, D_6_b);
        v[24]  = vr[24].v_exp(m_k_intra_DD, D_5_b, D_6_b);
        v[25]  = vr[25].v_exp(m_k_intra_CD, C_1_b, D_1_b);
        v[26]  = vr[26].v_exp(m_k_intra_CD, C_1_b, D_2_b);
        v[27]  = vr[27].v_exp(m_k_intra_CD, C_1_b, D_3_b);
        v[28]  = vr[28].v_exp(m_k_intra_CD, C_1_b, D_4_b);
        v[29]  = vr[29].v_exp(m_k_intra_CD, C_1_b, D_5_b);
        v[30]  = vr[30].v_exp(m_k_intra_CD, C_1_b, D_6_b);
        v[31]  = vr[31].v_exp(m_k_AC, A_1_a, C_1_b);
        v[32]  = vr[32].v_exp(m_k_AD, A_1_a, D_1_b);
        v[33]  = vr[33].v_exp(m_k_AD, A_1_a, D_2_b);
        v[34]  = vr[34].v_exp(m_k_AD, A_1_a, D_3_b);
        v[35]  = vr[35].v_exp(m_k_AD, A_1_a, D_4_b);
        v[36]  = vr[36].v_exp(m_k_AD, A_1_a, D_5_b);
        v[37]  = vr[37].v_exp(m_k_AD, A_1_a, D_6_b);
        v[38]  = vr[38].v_exp(m_k_BC, B_1_a, C_1_b);
        v[39]  = vr[39].v_exp(m_k_BC, B_2_a, C_1_b);
        v[40]  = vr[40].v_exp(m_k_BC, B_3_a, C_1_b);
        v[41]  = vr[41].v_exp(m_k_BC, B_4_a, C_1_b);
        v[42]  = vr[42].v_exp(m_k_BD, B_1_a, D_1_b);
        v[43]  = vr[43].v_exp(m_k_BD, B_1_a, D_2_b);
        v[44]  = vr[44].v_exp(m_k_BD, B_1_a, D_3_b);
        v[45]  = vr[45].v_exp(m_k_BD, B_1_a, D_4_b);
        v[46]  = vr[46].v_exp(m_k_BD, B_1_a, D_5_b);
        v[47]  = vr[47].v_exp(m_k_BD, B_1_a, D_6_b);
        v[48]  = vr[48].v_exp(m_k_BD, B_2_a, D_1_b);
        v[49]  = vr[49].v_exp(m_k_BD, B_2_a, D_2_b);
        v[50]  = vr[50].v_exp(m_k_BD, B_2_a, D_3_b);
        v[51]  = vr[51].v_exp(m_k_BD, B_2_a, D_4_b);
        v[52]  = vr[52].v_exp(m_k_BD, B_2_a, D_5_b);
        v[53]  = vr[53].v_exp(m_k_BD, B_2_a, D_6_b);
        v[54]  = vr[54].v_exp(m_k_BD, B_3_a, D_1_b);
        v[55]  = vr[55].v_exp(m_k_BD, B_3_a, D_2_b);
        v[56]  = vr[56].v_exp(m_k_BD, B_3_a, D_3_b);
        v[57]  = vr[57].v_exp(m_k_BD, B_3_a, D_4_b);
        v[58]  = vr[58].v_exp(m_k_BD, B_3_a, D_5_b);
        v[59]  = vr[59].v_exp(m_k_BD, B_3_a, D_6_b);
        v[60]  = vr[60].v_exp(m_k_BD, B_4_a, D_1_b);
        v[61]  = vr[61].v_exp(m_k_BD, B_4_a, D_2_b);
        v[62]  = vr[62].v_exp(m_k_BD, B_4_a, D_3_b);
        v[63]  = vr[63].v_exp(m_k_BD, B_4_a, D_4_b);
        v[64]  = vr[64].v_exp(m_k_BD, B_4_a, D_5_b);
        v[65]  = vr[65].v_exp(m_k_BD, B_4_a, D_6_b);
     
    
        sw = f_switch(r12, gsw);
        
        energies[j] = sw*polynomial::eval(coefficients.data(), v);
    }

    double energy = 0.0;
    for (size_t i = 0; i < ndim; i++) {
      energy += energies[i];
    }

    return energy;
    
}

double x2b_A1B4_C1D6_v1x::eval(const double* xyz1, const double* xyz2, 
                double * grad1, double * grad2, const size_t ndim) const
{

    std::vector<double> energies(ndim,0.0);

    for (size_t j = 0; j < ndim; j++) {
        double mon1[15];
        double mon2[21];

        std::copy(xyz1 + j * 15, xyz1 + (j+1) * 15, mon1);
        std::copy(xyz2 + j * 21, xyz2 + (j+1) * 21, mon2);

        // Right now it assumes 1st atom of each monomer
        const double d12[3] = {mon1[0] -  mon2[0],
                               mon1[1] -  mon2[1],
                               mon1[2] -  mon2[2]};
    
        const double r12sq = d12[0]*d12[0] + d12[1]*d12[1] + d12[2]*d12[2];
        const double r12 = std::sqrt(r12sq);
    
        if (r12 > m_r2f)
            continue;
    
        double xcrd[36]; // coordinates of real sites ONLY
    
        std::copy(mon1, mon1 + 15, xcrd);
        std::copy(mon2, mon2 + 21, xcrd + 15);
        
        double v[66];
        
        double sw = 0.0;
        double gsw = 0.0;
    
        const double* A_1_a= xcrd + 0;
        const double* B_1_a= xcrd + 3;
        const double* B_2_a= xcrd + 6;
        const double* B_3_a= xcrd + 9;
        const double* B_4_a= xcrd + 12;


        const double* C_1_b= xcrd + 15;
        const double* D_1_b= xcrd + 18;
        const double* D_2_b= xcrd + 21;
        const double* D_3_b= xcrd + 24;
        const double* D_4_b= xcrd + 27;
        const double* D_5_b= xcrd + 30;
        const double* D_6_b= xcrd + 33;


    
        variable vr[66];
    
        v[0]  = vr[0].v_exp(m_k_intra_BB, B_1_a, B_2_a);
        v[1]  = vr[1].v_exp(m_k_intra_BB, B_1_a, B_3_a);
        v[2]  = vr[2].v_exp(m_k_intra_BB, B_1_a, B_4_a);
        v[3]  = vr[3].v_exp(m_k_intra_BB, B_2_a, B_3_a);
        v[4]  = vr[4].v_exp(m_k_intra_BB, B_2_a, B_4_a);
        v[5]  = vr[5].v_exp(m_k_intra_BB, B_3_a, B_4_a);
        v[6]  = vr[6].v_exp(m_k_intra_AB, A_1_a, B_1_a);
        v[7]  = vr[7].v_exp(m_k_intra_AB, A_1_a, B_2_a);
        v[8]  = vr[8].v_exp(m_k_intra_AB, A_1_a, B_3_a);
        v[9]  = vr[9].v_exp(m_k_intra_AB, A_1_a, B_4_a);
        v[10]  = vr[10].v_exp(m_k_intra_DD, D_1_b, D_2_b);
        v[11]  = vr[11].v_exp(m_k_intra_DD, D_1_b, D_3_b);
        v[12]  = vr[12].v_exp(m_k_intra_DD, D_1_b, D_4_b);
        v[13]  = vr[13].v_exp(m_k_intra_DD, D_1_b, D_5_b);
        v[14]  = vr[14].v_exp(m_k_intra_DD, D_1_b, D_6_b);
        v[15]  = vr[15].v_exp(m_k_intra_DD, D_2_b, D_3_b);
        v[16]  = vr[16].v_exp(m_k_intra_DD, D_2_b, D_4_b);
        v[17]  = vr[17].v_exp(m_k_intra_DD, D_2_b, D_5_b);
        v[18]  = vr[18].v_exp(m_k_intra_DD, D_2_b, D_6_b);
        v[19]  = vr[19].v_exp(m_k_intra_DD, D_3_b, D_4_b);
        v[20]  = vr[20].v_exp(m_k_intra_DD, D_3_b, D_5_b);
        v[21]  = vr[21].v_exp(m_k_intra_DD, D_3_b, D_6_b);
        v[22]  = vr[22].v_exp(m_k_intra_DD, D_4_b, D_5_b);
        v[23]  = vr[23].v_exp(m_k_intra_DD, D_4_b, D_6_b);
        v[24]  = vr[24].v_exp(m_k_intra_DD, D_5_b, D_6_b);
        v[25]  = vr[25].v_exp(m_k_intra_CD, C_1_b, D_1_b);
        v[26]  = vr[26].v_exp(m_k_intra_CD, C_1_b, D_2_b);
        v[27]  = vr[27].v_exp(m_k_intra_CD, C_1_b, D_3_b);
        v[28]  = vr[28].v_exp(m_k_intra_CD, C_1_b, D_4_b);
        v[29]  = vr[29].v_exp(m_k_intra_CD, C_1_b, D_5_b);
        v[30]  = vr[30].v_exp(m_k_intra_CD, C_1_b, D_6_b);
        v[31]  = vr[31].v_exp(m_k_AC, A_1_a, C_1_b);
        v[32]  = vr[32].v_exp(m_k_AD, A_1_a, D_1_b);
        v[33]  = vr[33].v_exp(m_k_AD, A_1_a, D_2_b);
        v[34]  = vr[34].v_exp(m_k_AD, A_1_a, D_3_b);
        v[35]  = vr[35].v_exp(m_k_AD, A_1_a, D_4_b);
        v[36]  = vr[36].v_exp(m_k_AD, A_1_a, D_5_b);
        v[37]  = vr[37].v_exp(m_k_AD, A_1_a, D_6_b);
        v[38]  = vr[38].v_exp(m_k_BC, B_1_a, C_1_b);
        v[39]  = vr[39].v_exp(m_k_BC, B_2_a, C_1_b);
        v[40]  = vr[40].v_exp(m_k_BC, B_3_a, C_1_b);
        v[41]  = vr[41].v_exp(m_k_BC, B_4_a, C_1_b);
        v[42]  = vr[42].v_exp(m_k_BD, B_1_a, D_1_b);
        v[43]  = vr[43].v_exp(m_k_BD, B_1_a, D_2_b);
        v[44]  = vr[44].v_exp(m_k_BD, B_1_a, D_3_b);
        v[45]  = vr[45].v_exp(m_k_BD, B_1_a, D_4_b);
        v[46]  = vr[46].v_exp(m_k_BD, B_1_a, D_5_b);
        v[47]  = vr[47].v_exp(m_k_BD, B_1_a, D_6_b);
        v[48]  = vr[48].v_exp(m_k_BD, B_2_a, D_1_b);
        v[49]  = vr[49].v_exp(m_k_BD, B_2_a, D_2_b);
        v[50]  = vr[50].v_exp(m_k_BD, B_2_a, D_3_b);
        v[51]  = vr[51].v_exp(m_k_BD, B_2_a, D_4_b);
        v[52]  = vr[52].v_exp(m_k_BD, B_2_a, D_5_b);
        v[53]  = vr[53].v_exp(m_k_BD, B_2_a, D_6_b);
        v[54]  = vr[54].v_exp(m_k_BD, B_3_a, D_1_b);
        v[55]  = vr[55].v_exp(m_k_BD, B_3_a, D_2_b);
        v[56]  = vr[56].v_exp(m_k_BD, B_3_a, D_3_b);
        v[57]  = vr[57].v_exp(m_k_BD, B_3_a, D_4_b);
        v[58]  = vr[58].v_exp(m_k_BD, B_3_a, D_5_b);
        v[59]  = vr[59].v_exp(m_k_BD, B_3_a, D_6_b);
        v[60]  = vr[60].v_exp(m_k_BD, B_4_a, D_1_b);
        v[61]  = vr[61].v_exp(m_k_BD, B_4_a, D_2_b);
        v[62]  = vr[62].v_exp(m_k_BD, B_4_a, D_3_b);
        v[63]  = vr[63].v_exp(m_k_BD, B_4_a, D_4_b);
        v[64]  = vr[64].v_exp(m_k_BD, B_4_a, D_5_b);
        v[65]  = vr[65].v_exp(m_k_BD, B_4_a, D_6_b);
     
    
        double g[66];

        // the switch
        sw = f_switch(r12, gsw);
        
        energies[j] = polynomial::eval(coefficients.data(), v, g);
        
        double xgrd[36];
        std::fill(xgrd, xgrd + 36, 0.0);

        double* A_1_a_g= xgrd + 0;
        double* B_1_a_g= xgrd + 3;
        double* B_2_a_g= xgrd + 6;
        double* B_3_a_g= xgrd + 9;
        double* B_4_a_g= xgrd + 12;

        double* C_1_b_g= xgrd + 15;
        double* D_1_b_g= xgrd + 18;
        double* D_2_b_g= xgrd + 21;
        double* D_3_b_g= xgrd + 24;
        double* D_4_b_g= xgrd + 27;
        double* D_5_b_g= xgrd + 30;
        double* D_6_b_g= xgrd + 33;



        vr[0].grads(g[0], B_1_a_g, B_2_a_g, B_1_a, B_2_a);
        vr[1].grads(g[1], B_1_a_g, B_3_a_g, B_1_a, B_3_a);
        vr[2].grads(g[2], B_1_a_g, B_4_a_g, B_1_a, B_4_a);
        vr[3].grads(g[3], B_2_a_g, B_3_a_g, B_2_a, B_3_a);
        vr[4].grads(g[4], B_2_a_g, B_4_a_g, B_2_a, B_4_a);
        vr[5].grads(g[5], B_3_a_g, B_4_a_g, B_3_a, B_4_a);
        vr[6].grads(g[6], A_1_a_g, B_1_a_g, A_1_a, B_1_a);
        vr[7].grads(g[7], A_1_a_g, B_2_a_g, A_1_a, B_2_a);
        vr[8].grads(g[8], A_1_a_g, B_3_a_g, A_1_a, B_3_a);
        vr[9].grads(g[9], A_1_a_g, B_4_a_g, A_1_a, B_4_a);
        vr[10].grads(g[10], D_1_b_g, D_2_b_g, D_1_b, D_2_b);
        vr[11].grads(g[11], D_1_b_g, D_3_b_g, D_1_b, D_3_b);
        vr[12].grads(g[12], D_1_b_g, D_4_b_g, D_1_b, D_4_b);
        vr[13].grads(g[13], D_1_b_g, D_5_b_g, D_1_b, D_5_b);
        vr[14].grads(g[14], D_1_b_g, D_6_b_g, D_1_b, D_6_b);
        vr[15].grads(g[15], D_2_b_g, D_3_b_g, D_2_b, D_3_b);
        vr[16].grads(g[16], D_2_b_g, D_4_b_g, D_2_b, D_4_b);
        vr[17].grads(g[17], D_2_b_g, D_5_b_g, D_2_b, D_5_b);
        vr[18].grads(g[18], D_2_b_g, D_6_b_g, D_2_b, D_6_b);
        vr[19].grads(g[19], D_3_b_g, D_4_b_g, D_3_b, D_4_b);
        vr[20].grads(g[20], D_3_b_g, D_5_b_g, D_3_b, D_5_b);
        vr[21].grads(g[21], D_3_b_g, D_6_b_g, D_3_b, D_6_b);
        vr[22].grads(g[22], D_4_b_g, D_5_b_g, D_4_b, D_5_b);
        vr[23].grads(g[23], D_4_b_g, D_6_b_g, D_4_b, D_6_b);
        vr[24].grads(g[24], D_5_b_g, D_6_b_g, D_5_b, D_6_b);
        vr[25].grads(g[25], C_1_b_g, D_1_b_g, C_1_b, D_1_b);
        vr[26].grads(g[26], C_1_b_g, D_2_b_g, C_1_b, D_2_b);
        vr[27].grads(g[27], C_1_b_g, D_3_b_g, C_1_b, D_3_b);
        vr[28].grads(g[28], C_1_b_g, D_4_b_g, C_1_b, D_4_b);
        vr[29].grads(g[29], C_1_b_g, D_5_b_g, C_1_b, D_5_b);
        vr[30].grads(g[30], C_1_b_g, D_6_b_g, C_1_b, D_6_b);
        vr[31].grads(g[31], A_1_a_g, C_1_b_g, A_1_a, C_1_b);
        vr[32].grads(g[32], A_1_a_g, D_1_b_g, A_1_a, D_1_b);
        vr[33].grads(g[33], A_1_a_g, D_2_b_g, A_1_a, D_2_b);
        vr[34].grads(g[34], A_1_a_g, D_3_b_g, A_1_a, D_3_b);
        vr[35].grads(g[35], A_1_a_g, D_4_b_g, A_1_a, D_4_b);
        vr[36].grads(g[36], A_1_a_g, D_5_b_g, A_1_a, D_5_b);
        vr[37].grads(g[37], A_1_a_g, D_6_b_g, A_1_a, D_6_b);
        vr[38].grads(g[38], B_1_a_g, C_1_b_g, B_1_a, C_1_b);
        vr[39].grads(g[39], B_2_a_g, C_1_b_g, B_2_a, C_1_b);
        vr[40].grads(g[40], B_3_a_g, C_1_b_g, B_3_a, C_1_b);
        vr[41].grads(g[41], B_4_a_g, C_1_b_g, B_4_a, C_1_b);
        vr[42].grads(g[42], B_1_a_g, D_1_b_g, B_1_a, D_1_b);
        vr[43].grads(g[43], B_1_a_g, D_2_b_g, B_1_a, D_2_b);
        vr[44].grads(g[44], B_1_a_g, D_3_b_g, B_1_a, D_3_b);
        vr[45].grads(g[45], B_1_a_g, D_4_b_g, B_1_a, D_4_b);
        vr[46].grads(g[46], B_1_a_g, D_5_b_g, B_1_a, D_5_b);
        vr[47].grads(g[47], B_1_a_g, D_6_b_g, B_1_a, D_6_b);
        vr[48].grads(g[48], B_2_a_g, D_1_b_g, B_2_a, D_1_b);
        vr[49].grads(g[49], B_2_a_g, D_2_b_g, B_2_a, D_2_b);
        vr[50].grads(g[50], B_2_a_g, D_3_b_g, B_2_a, D_3_b);
        vr[51].grads(g[51], B_2_a_g, D_4_b_g, B_2_a, D_4_b);
        vr[52].grads(g[52], B_2_a_g, D_5_b_g, B_2_a, D_5_b);
        vr[53].grads(g[53], B_2_a_g, D_6_b_g, B_2_a, D_6_b);
        vr[54].grads(g[54], B_3_a_g, D_1_b_g, B_3_a, D_1_b);
        vr[55].grads(g[55], B_3_a_g, D_2_b_g, B_3_a, D_2_b);
        vr[56].grads(g[56], B_3_a_g, D_3_b_g, B_3_a, D_3_b);
        vr[57].grads(g[57], B_3_a_g, D_4_b_g, B_3_a, D_4_b);
        vr[58].grads(g[58], B_3_a_g, D_5_b_g, B_3_a, D_5_b);
        vr[59].grads(g[59], B_3_a_g, D_6_b_g, B_3_a, D_6_b);
        vr[60].grads(g[60], B_4_a_g, D_1_b_g, B_4_a, D_1_b);
        vr[61].grads(g[61], B_4_a_g, D_2_b_g, B_4_a, D_2_b);
        vr[62].grads(g[62], B_4_a_g, D_3_b_g, B_4_a, D_3_b);
        vr[63].grads(g[63], B_4_a_g, D_4_b_g, B_4_a, D_4_b);
        vr[64].grads(g[64], B_4_a_g, D_5_b_g, B_4_a, D_5_b);
        vr[65].grads(g[65], B_4_a_g, D_6_b_g, B_4_a, D_6_b);


    // ##DEFINE HERE## the redistribution of the gradients
    

    
        for (int i = 0; i < 15; ++i) {
            grad1[i + j*15] += sw*xgrd[i];
        }

        for (int i = 0; i < 21; ++i) {
            grad2[i + j*21] += sw*xgrd[i + 15];
        }

        // gradient of the switch

        gsw *= energies[j]/r12;
        energies[j] *= sw;
        for (int i = 0; i < 3; ++i) {
            const double d = gsw*d12[i];
            grad1[i + j*15] += d;
            grad2[i + j*21] -= d;
        }

    }

    double energy = 0.0;
    for (size_t i = 0; i < ndim; i++) {
      energy += energies[i];
    }

    return energy;
}

} // namespace x2b_A1B4_C1D6_deg3

////////////////////////////////////////////////////////////////////////////////



#include "x2b_A1B6_C1D2X2_deg3_v1x.h" 
 

////////////////////////////////////////////////////////////////////////////////

namespace {

struct variable {
    double v_exp0(const double& r0, const double& k,
                 const double * p1, const double * p2 );
                 
    double v_exp(const double& k,
                 const double * p1, const double * p2 );

    double v_coul0(const double& r0, const double& k,
                  const double * p1, const double * p2 );
                  
    double v_coul(const double& k,
                  const double * p1, const double * p2 );

    double v_gau0(const double& r0, const double& k,
                 const double * p1, const double * p2 );
                  
    void grads(const double& gg, double * grd1, double * grd2,
               const double * p1, const double * p2);

    double g[3]; // diff(value, p1 - p2)
};

//----------------------------------------------------------------------------//

double variable::v_gau0(const double& r0, const double& k,
                       const double * p1, const double * p2)
{
    g[0] = p1[0] - p2[0];
    g[1] = p1[1] - p2[1];
    g[2] = p1[2] - p2[2];

    const double r = std::sqrt(g[0]*g[0] + g[1]*g[1] + g[2]*g[2]);

    const double exp1 = std::exp(-k*(r0 - r)*(r0 - r));
    const double gg = 2*k*(r0 - r)*exp1/r;

    g[0] *= gg;
    g[1] *= gg;
    g[2] *= gg;

    return exp1;
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

double variable::v_exp0(const double& r0, const double& k,
                       const double * p1, const double * p2)
{
    g[0] = p1[0] - p2[0];
    g[1] = p1[1] - p2[1];
    g[2] = p1[2] - p2[2];

    const double r = std::sqrt(g[0]*g[0] + g[1]*g[1] + g[2]*g[2]);

    const double exp1 = std::exp(k*(r0 - r));
    const double gg = - k*exp1/r;

    g[0] *= gg;
    g[1] *= gg;
    g[2] *= gg;

    return exp1;
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

double variable::v_exp(const double& k,
                       const double * p1, const double * p2)
{
    g[0] = p1[0] - p2[0];
    g[1] = p1[1] - p2[1];
    g[2] = p1[2] - p2[2];

    const double r = std::sqrt(g[0]*g[0] + g[1]*g[1] + g[2]*g[2]);

    const double exp1 = std::exp(k*(- r));
    const double gg = - k*exp1/r;

    g[0] *= gg;
    g[1] *= gg;
    g[2] *= gg;

    return exp1;
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //


double variable::v_coul(const double& k,
                        const double * p1, const double * p2)
{
    g[0] = p1[0] - p2[0];
    g[1] = p1[1] - p2[1];
    g[2] = p1[2] - p2[2];

    const double rsq = g[0]*g[0] + g[1]*g[1] + g[2]*g[2];
    const double r = std::sqrt(rsq);

    const double exp1 = std::exp(k*(-r));
    const double rinv = 1.0/r;
    const double val = exp1*rinv;

    const double gg = - (k + rinv)*val*rinv;

    g[0] *= gg;
    g[1] *= gg;
    g[2] *= gg;

    return val;
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

double variable::v_coul0(const double& r0, const double& k,
                        const double * p1, const double * p2)
{
    g[0] = p1[0] - p2[0];
    g[1] = p1[1] - p2[1];
    g[2] = p1[2] - p2[2];

    const double rsq = g[0]*g[0] + g[1]*g[1] + g[2]*g[2];
    const double r = std::sqrt(rsq);

    const double exp1 = std::exp(k*(r0 - r));
    const double rinv = 1.0/r;
    const double val = exp1*rinv;

    const double gg = - (k + rinv)*val*rinv;

    g[0] *= gg;
    g[1] *= gg;
    g[2] *= gg;

    return val;
}

//----------------------------------------------------------------------------//

void variable::grads(const double& gg, double * grd1, double * grd2, 
                     const double * p1, const double * p2) {
    for (size_t i = 0; i < 3 ; i++) {
        double d = gg*g[i];
        grd1[i] += d;
        grd2[i] -= d;
    }
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

struct monomer {
    double oh1[3];
    double oh2[3];

    void setup(const double* ohh,
               const double& in_plane_g, const double& out_of_plane_g,
               double x1[3], double x2[3]);

    void grads(const double* g1, const double* g2,
               const double& in_plane_g, const double& out_of_plane_g,
               double* grd) const;
};

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

void monomer::setup(const double* ohh,
                    const double& in_plane_g, const double& out_of_plane_g,
                    double* x1, double* x2)
{
    for (int i = 0; i < 3; ++i) {
        oh1[i] = ohh[i + 3] - ohh[i];
        oh2[i] = ohh[i + 6] - ohh[i];
    }

    const double v[3] = {
        oh1[1]*oh2[2] - oh1[2]*oh2[1],
        oh1[2]*oh2[0] - oh1[0]*oh2[2],
        oh1[0]*oh2[1] - oh1[1]*oh2[0]
    };

    for (int i = 0; i < 3; ++i) {
        const double in_plane = ohh[i] + 0.5*in_plane_g*(oh1[i] + oh2[i]);
        const double out_of_plane = out_of_plane_g*v[i];

        x1[i] = in_plane + out_of_plane;
        x2[i] = in_plane - out_of_plane;
    }
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

void monomer::grads(const double* g1, const double* g2,
                    const double& in_plane_g, const double& out_of_plane_g,
                    double* grd) const
{
    const double gm[3] = {
        g1[0] - g2[0],
        g1[1] - g2[1],
        g1[2] - g2[2]
    };

    const double t1[3] = {
        oh2[1]*gm[2] - oh2[2]*gm[1],
        oh2[2]*gm[0] - oh2[0]*gm[2],
        oh2[0]*gm[1] - oh2[1]*gm[0]
    };

    const double t2[3] = {
        oh1[1]*gm[2] - oh1[2]*gm[1],
        oh1[2]*gm[0] - oh1[0]*gm[2],
        oh1[0]*gm[1] - oh1[1]*gm[0]
    };

    for (int i = 0; i < 3; ++i) {
        const double gsum = g1[i] + g2[i];
        const double in_plane = 0.5*in_plane_g*gsum;

        const double gh1 = in_plane + out_of_plane_g*t1[i];
        const double gh2 = in_plane - out_of_plane_g*t2[i];

        grd[i + 0] += gsum - (gh1 + gh2); // O
        grd[i + 3] += gh1; // H1
        grd[i + 6] += gh2; // H2
    }
}

//- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - //

//struct vsites {
//    //void TwoParticleAverageSite() {}
//    //void ThreeParticleAverageSite() {}
//    void OutOfPlaneSite(const double& w12, const double& w13,
//                        const double& wcross, const double x1[3],
//                        const double y1[3], const double y2[3],
//                        double vs[3]);
//    //void LocalCoordinatesSite{}
//};
//
//void vsites::OutOfPlaneSite(const double& w12,
//                            const double& w13,
//                            const double& wcross,
//                            const double x1[3],
//                            const double y1[3],
//                            const double y2[3],
//                            double vs[3]) {
//    double r12[3], r13[3];
//
//    for (int i = 0; i < 3; ++i) {
//        r12[i] = y1[i] - x1[i];
//        r13[i] = y2[i] - x1[i];
//    }
//                            
//    double rc[3];
//    rc[0] = r12[1]*r13[2] - r12[2]*r13[1];
//    rc[1] = r12[2]*r13[0] - r12[0]*r13[2];
//    rc[2] = r12[0]*r13[1] - r12[1]*r13[0];
//    
//    vs[0] = x1[0] + w12 * r12[0] + w13 * r13[0] + wcross * rc[0];
//    vs[1] = x1[1] + w12 * r12[1] + w13 * r13[1] + wcross * rc[1];
//    vs[2] = x1[2] + w12 * r12[2] + w13 * r13[2] + wcross * rc[2];
//}

} // namespace

////////////////////////////////////////////////////////////////////////////////

namespace x2b_A1B6_C1D2X2_deg3 {

//----------------------------------------------------------------------------//

x2b_A1B6_C1D2X2_v1x::x2b_A1B6_C1D2X2_v1x(std::string mon1, std::string mon2) {

    // =====>> SECTION CONSTRUCTOR <<=====
    // =>> PASTE RIGHT BELOW THIS LINE <==
    if (mon1 == "h2o" && mon2  == "pf6-") {
        coefficients = std::vector<double> { 
            -5.980591225784996e+03, // 0
            -2.975494833440248e+02, // 1
             7.396843697235225e+03, // 2
            -1.758370721647804e+04, // 3
             1.295448949473815e+03, // 4
             1.544481552729305e+03, // 5
             2.112591444008761e+03, // 6
            -1.120201246885674e+03, // 7
            -7.360730647175066e+02, // 8
             5.723386365800406e+01, // 9
             7.108745174042151e+02, // 10
            -7.667197282363662e+02, // 11
            -5.550380979938893e+03, // 12
             6.079603556795930e+03, // 13
             9.715903241881936e+02, // 14
             1.247787290469206e+03, // 15
            -5.021323738290966e+03, // 16
             8.613393557607297e+01, // 17
            -8.124649936268414e+02, // 18
             5.422563450721489e+02, // 19
            -2.337868682382710e+04, // 20
            -2.312425459350102e+04, // 21
             1.109712842631741e+04, // 22
            -2.024557420634905e+04, // 23
            -4.136610745484198e+04, // 24
             8.179964498238506e+03, // 25
            -1.632480326664133e+03, // 26
            -3.857499219123102e+03, // 27
             1.710286832549862e+04, // 28
             2.231415299230584e+03, // 29
            -9.535915099322972e+03, // 30
             6.081284664571874e+03, // 31
             2.357432353435760e+03, // 32
             5.226399543243036e+02, // 33
            -1.166568894193537e+02, // 34
            -5.501234425337331e+02, // 35
            -3.053937614081927e+03, // 36
             2.324847113693466e+03, // 37
             1.107487997151919e+03, // 38
             4.219205370923278e+03, // 39
             1.418948350921525e+04, // 40
            -4.095265851549742e+02, // 41
             1.683637587018892e+04, // 42
            -4.729645122141439e+03, // 43
             5.389104969727651e+03, // 44
            -8.342612905393655e+02, // 45
             1.588033229889813e+03, // 46
             1.785487180759374e+02, // 47
            -7.247255758619320e+01, // 48
             1.333735962100041e+04, // 49
            -2.927563518275203e+03, // 50
            -8.012917325037551e+03, // 51
             1.892878896515295e+03, // 52
            -1.350023919010553e+03, // 53
            -5.407581938949668e+02, // 54
            -1.707491983569221e+02, // 55
             1.495287200166720e+03, // 56
            -2.939454078143361e+03, // 57
            -3.272735002947736e+03, // 58
             2.976098062422962e+03, // 59
            -2.408686163150854e+03, // 60
             9.343855675071583e+02, // 61
             1.708416935856930e+03, // 62
            -6.878262226838742e+02, // 63
             2.425475899316711e+03, // 64
             3.972953791613991e+03, // 65
             3.479074939195528e+02, // 66
            -3.759728272635029e+02, // 67
             8.507121876930772e+03, // 68
            -4.542485457687934e+03, // 69
             9.684092870298224e+03, // 70
            -3.850052527049512e+02, // 71
            -1.177930670055245e+03, // 72
            -1.251725739054596e+03, // 73
             7.497541280540507e+02, // 74
             1.511468668344313e+03, // 75
            -1.239377433116729e-04, // 76
            -5.353214201709227e+02, // 77
            -7.706014701348619e+00, // 78
            -2.245872441218407e+02, // 79
            -5.776297532269089e+02, // 80
            -3.621827329902181e+01, // 81
            -5.465814565363207e+00, // 82
            -2.561925709785337e+02, // 83
            -1.260096448681419e+02, // 84
            -1.595066916704155e+02, // 85
             7.207264526139821e+01, // 86
            -1.409330690355760e-01, // 87
             1.193880214030692e+02, // 88
             3.222313786417114e+01, // 89
            -8.571297887963926e-06, // 90
             7.594224257603046e-07, // 91
            -4.125207805306510e+04, // 92
            -2.859258095309258e+04, // 93
             5.154084933938440e+04, // 94
             1.414619888693983e+03, // 95
            -2.608582911310995e+04, // 96
             6.192367824755391e+04, // 97
             1.741509612154421e+04, // 98
            -1.010422342531599e+00, // 99
            -8.582528544554415e+02, // 100
             9.888634721277123e+03, // 101
            -1.605050457518097e+03, // 102
             6.993469742893304e+02, // 103
            -9.837351757837098e+02, // 104
            -2.236637299729108e+03, // 105
             9.722392029238212e+03, // 106
            -1.014314112442159e+04, // 107
             1.340731709127014e+04, // 108
            -2.033378864139941e+04, // 109
             5.685873653748761e+01, // 110
             6.950208619805635e+01, // 111
            -6.512802260372096e+02, // 112
             2.515765648601504e+02, // 113
             4.235726538605784e+02, // 114
            -9.060441924049238e+02, // 115
             2.174485421438709e+02, // 116
            -3.735666105415033e+02, // 117
            -1.182540809789895e+03, // 118
            -3.800214095050801e+02, // 119
             1.078554976859541e+04, // 120
             1.889375140528965e+02, // 121
            -7.913211467000400e+03, // 122
            -4.543515625595432e+04, // 123
            -4.797138218403789e+04, // 124
            -5.035662907387251e+04, // 125
            -2.886262923567005e+04, // 126
            -1.731899444170433e+04, // 127
             2.209819628684144e+04, // 128
             1.767489892888605e+04, // 129
            -4.346952287753075e+02, // 130
            -1.137393116310085e+05, // 131
            -7.063999505321955e+04, // 132
            -4.691641512684446e+04, // 133
            -3.670022902778539e+04, // 134
             1.522480303461393e+03, // 135
             1.062853570262287e+04, // 136
             1.898597128822216e+04, // 137
             1.890371142994540e+04, // 138
             2.409437188788114e+02, // 139
            -2.030746937906871e+04, // 140
            -4.183673692855746e+03, // 141
             3.944412604711638e+04, // 142
             3.454354332535002e+03, // 143
            -1.523999426392275e+04, // 144
             7.247305269565157e+03, // 145
             1.716730819783120e+04, // 146
            -1.683562540931362e+04, // 147
            -5.508813048459162e+03, // 148
             1.029937344303719e+04, // 149
            -2.716657237565053e+04, // 150
             3.571342718497859e+03, // 151
            -1.325427187237569e+04, // 152
             6.422973243181871e+02, // 153
             3.337621296260978e+04, // 154
             3.297989963850440e+04, // 155
            -3.187494907409923e+03, // 156
             6.920432876250657e+03, // 157
             3.825328658823437e+03, // 158
             5.600266956317007e+03, // 159
             2.228326183583427e+04, // 160
            -1.510839114642751e+04, // 161
             4.821014118921898e+03, // 162
            -2.104549357080085e+03, // 163
             2.024744983687496e+04, // 164
            -1.521537903358160e+03, // 165
             2.497078108851958e+03, // 166
            -7.204196875315516e+03, // 167
             2.787620301604882e+04, // 168
            -3.073471149488241e+04, // 169
             1.007641962608091e+02, // 170
            -1.756570751519355e+03, // 171
             1.833461263257071e+03, // 172
            -2.342304505837974e+04, // 173
            -4.750918782740484e+04, // 174
            -3.684454631096184e+04, // 175
            -2.711065193955908e+04, // 176
            -3.735181986089690e+04, // 177
             9.403593303101210e+03, // 178
             3.179764143999856e+04, // 179
            -1.230454103185900e+04, // 180
             1.519863313804651e+02, // 181
            -3.944466032338170e+04, // 182
            -6.105607414097936e+03, // 183
            -5.546322593534808e+03, // 184
            -8.745097360460082e+02, // 185
            -2.396135611169027e+03, // 186
             1.961636387415069e+03, // 187
             1.848744116826034e+03, // 188
            -8.698792368381924e+03, // 189
            -1.229104829253390e+02, // 190
             1.527327656217724e+03, // 191
            -1.320638531790731e+04, // 192
             1.823348255258213e+04, // 193
             2.339050741588719e+04, // 194
             4.062113751588603e+02, // 195
            -1.803597951312939e+03, // 196
             6.984963940701269e+03, // 197
            -2.707539486622928e+02, // 198
            -4.392020163089766e+02, // 199
             2.992296287978445e+03, // 200
            -2.986495554829743e+03, // 201
            -7.753286482763403e+02, // 202
            -1.207108317375481e+02, // 203
            -1.299650655338472e+03, // 204
            -2.434605434451852e+04, // 205
            -4.782750635968085e+04, // 206
            -6.848080476454317e+04, // 207
             2.015634586793843e+04, // 208
            -7.600669553087442e+03, // 209
            -5.949404343095568e+04, // 210
             1.209863952568011e+04, // 211
            -6.025904705742533e+03, // 212
             1.471689125514998e+03, // 213
             6.697014742291596e+03, // 214
             7.881039252017501e+03, // 215
            -1.592596654252555e+03, // 216
             2.626669988801073e+03, // 217
            -2.077207153597230e+04, // 218
            -1.252289117470019e+04, // 219
            -9.842991899187653e+03, // 220
            -3.081453405452139e+02, // 221
             6.128687274468673e+02, // 222
            -5.517195514741172e+03, // 223
             1.045842978109039e+04, // 224
             1.967785382227918e+03, // 225
            -1.488029913458793e+04, // 226
            -6.534722405128661e+02, // 227
            -1.125194634405381e+04, // 228
             4.606320235337815e+04, // 229
            -1.412521313688884e+04, // 230
             1.579447015674228e+04, // 231
            -3.363580987123896e+02, // 232
            -1.345233562540073e+04, // 233
            -6.389327790445458e+04, // 234
             4.993986140145470e+02, // 235
             3.388287000340553e+03, // 236
            -3.832134179350162e+03, // 237
             7.792256419377028e+01, // 238
            -6.110924839787065e+02, // 239
            -1.118772402567040e+02, // 240
            -1.679367829459707e+04, // 241
             1.863129942997095e+04, // 242
            -4.462966945416185e+02, // 243
            -9.928232408543645e+03, // 244
             1.575057365930576e+04, // 245
             2.604864643778184e+03, // 246
            -2.807268611270008e+04, // 247
            -6.204694098250997e+03, // 248
            -1.943945988107634e+03, // 249
            -2.418786165385921e+03, // 250
            -2.498155707933453e+03, // 251
            -1.618276844788311e+04, // 252
            -9.436283018793321e+03, // 253
            -1.102372187593243e+02, // 254
            -3.018843475855633e+02, // 255
             2.699316310626464e+03, // 256
            -1.434621628048735e+03, // 257
            -1.248714155754032e+04, // 258
             1.491698772938467e+04, // 259
            -1.243659530425728e-01, // 260
             1.646860426633189e+03, // 261
             8.509408858371381e+01, // 262
            -3.464170639505303e+02, // 263
            -4.747802783312499e+04, // 264
            -1.406185462350015e+03, // 265
             5.524048002225683e+02, // 266
             2.165444414932493e+03, // 267
            -1.624599279399731e+02, // 268
             4.985745925790972e+03, // 269
             1.172531021792398e+04, // 270
            -1.636103558388721e+04, // 271
            -1.848624618245033e+04, // 272
             6.308025221779104e+02, // 273
            -6.274172125228254e+02, // 274
            -3.312553324737404e+03, // 275
             3.557815910374069e+02, // 276
             8.549538366215238e+02, // 277
             2.403958937483206e+03, // 278
            -4.191916422809490e+03, // 279
            -7.535168104873019e+01, // 280
            -1.220883933017606e+03, // 281
             3.060757230939545e+01, // 282
            -1.082683120552617e+04, // 283
            -7.908448866957756e+03, // 284
             3.367573532443777e+04, // 285
             9.641575635994193e+03, // 286
            -1.598723634469169e+04, // 287
             6.026591175491015e+03, // 288
            -8.256688944033282e+03, // 289
             4.027877324930401e+03, // 290
            -1.287509626348366e+04, // 291
             1.425782236279738e+04, // 292
            -1.089656266070260e+04, // 293
             6.942011864112498e+02, // 294
            -2.177831242231102e+03, // 295
             2.971545528742245e+02, // 296
             1.710632758858047e+04, // 297
             2.863525114426207e+03, // 298
            -1.126020603901784e+03, // 299
            -1.510612961508222e+03, // 300
            -3.456439795366176e+02, // 301
             1.069382230385663e+04, // 302
            -1.694690375548197e+03, // 303
            -3.247887528665561e+02, // 304
            -4.016479143572298e+03, // 305
            -2.157396644851331e+02, // 306
             3.042642666891827e+03, // 307
            -3.000500689122741e+03, // 308
             8.209908149728917e+03, // 309
            -4.806728421709419e+03, // 310
             1.169527185843013e+03, // 311
             2.808258064469383e+02, // 312
            -3.987336818161091e+02, // 313
             1.115245525948527e+03, // 314
             2.628726230781174e+04, // 315
             7.350424946169251e+03, // 316
             7.231694727942303e+03, // 317
            -6.118753830022749e+03, // 318
            -2.373559798200424e+01, // 319
             2.999850998263880e+02, // 320
             1.997409841927590e+02, // 321
             5.263184575078071e+03, // 322
            -1.072130025976493e+03, // 323
            -2.999115640746916e+02, // 324
            -2.937629576736972e+02, // 325
            -7.877595785410232e+01, // 326
             1.336148345584206e+04, // 327
             2.038745524548892e+04, // 328
             6.028163378204388e+02, // 329
             4.080338081843551e+03, // 330
             2.734137787290810e+03, // 331
             5.861427341675636e+03, // 332
            -3.496577623834107e+02, // 333
            -1.227775735390172e+03, // 334
             2.045734145195878e+04, // 335
             1.877841950054990e+04, // 336
            -2.029666609738242e+03, // 337
             3.777013942276523e+03, // 338
            -7.553898673135106e+03, // 339
            -1.250710163385131e+03, // 340
             1.142684627487271e+03, // 341
            -2.220469860493070e+03, // 342
            -9.610766953039816e+03, // 343
             1.248746444070036e+02, // 344
             7.076247758315179e+03, // 345
             6.231998140832457e+02, // 346
             2.580298133598601e+03, // 347
            -2.240173555409606e+03, // 348
             3.016834522322242e+02, // 349
            -3.896620815636141e+02, // 350
             1.768639881501071e+04, // 351
             1.679968930126097e+04, // 352
            -1.721491176210721e+04, // 353
             2.860257297950162e+03, // 354
             3.156270360302452e+02, // 355
             3.008714214433263e+03, // 356
             9.133536306772264e+02, // 357
             2.121731910185834e+04, // 358
             1.460561233684648e+04, // 359
             9.993399308049777e+02, // 360
            -6.993035443077119e+03, // 361
             3.542432838142613e+03, // 362
             4.485147046222507e+03, // 363
             1.963790585849937e+03, // 364
             1.990802794019448e+03, // 365
            -7.330564853418490e+02, // 366
             2.055108815796298e+03, // 367
            -2.552503266215409e+03, // 368
            -9.528937702971381e+02, // 369
             9.123799779036177e+03, // 370
             1.700064447809169e+03, // 371
            -3.410875743632816e+03, // 372
            -2.423982746071703e+03, // 373
             4.500442789055895e+03, // 374
            -8.387245392646238e+02, // 375
            -1.223698353650878e+03, // 376
            -1.064030592249692e+03, // 377
             1.358670843552976e+03, // 378
            -3.048171702096268e+01, // 379
             2.201002047330461e+03, // 380
            -4.795468795402418e+03, // 381
            -2.020489830249623e+02, // 382
             7.505809711679374e+02, // 383
            -1.666969875257311e+04, // 384
            -2.306190540454582e+04, // 385
            -3.212776931331162e+03, // 386
             3.476086607751374e+02, // 387
             1.960340923733979e+02, // 388
             4.729017412335201e+02, // 389
            -4.693740153715697e+03, // 390
            -4.723175086418857e+03, // 391
            -1.020115535288391e+03, // 392
             9.814772200894100e+03, // 393
            -8.311733988547852e+03, // 394
             2.461962933267343e+04, // 395
             3.524785591449465e+04, // 396
            -4.201426492818617e+04, // 397
            -4.023918146506596e+04, // 398
            -9.091927364068819e+02, // 399
            -1.257987762056706e+03, // 400
             2.746883347249309e+03, // 401
            -1.524661802241741e+03, // 402
            -1.713661976954812e+02, // 403
             8.030059969425134e+02, // 404
            -2.701243884936400e+01, // 405
             1.031088636590093e+03, // 406
             1.175199791776838e+03, // 407
             6.363919154714545e+02, // 408
             1.829091972922812e+02, // 409
            -1.947621624779901e+02, // 410
            -4.739600471026415e+02, // 411
            -4.738749748099822e+04, // 412
            -2.259036674071778e+04, // 413
             4.138276785957604e+04, // 414
             2.073160616031321e+04, // 415
             1.198083050399347e+04, // 416
            -3.443530972995792e+04, // 417
            -5.935621708950190e+03, // 418
             1.491888446329059e+04, // 419
            -2.124824244057762e+02, // 420
             3.416162376099828e+04, // 421
             5.253725412202351e+04, // 422
             4.160384147437642e+03, // 423
             9.007283733488019e+03, // 424
             1.216507349672868e+04, // 425
            -1.116808211483342e+04, // 426
            -1.168074785518480e+04, // 427
             1.254896621820807e+04, // 428
            -1.295044052452251e+04, // 429
             1.176602892744117e+04, // 430
             6.964733731504698e+02, // 431
            -1.855428075127865e+03, // 432
            -8.308438550370867e+03, // 433
             3.614316440396218e+04, // 434
             2.008905144640508e+04, // 435
             4.421900253771236e+02, // 436
            -1.685349928620023e+03, // 437
             3.286841298838695e+03, // 438
             6.470968379948542e+02, // 439
            -2.405572934916846e+02, // 440
            -2.357946281988063e+03, // 441
            -8.029503788941093e+02, // 442
             6.210315388627770e+03, // 443
             1.789023831031628e+04, // 444
             1.029734060763046e+03, // 445
             5.185166183815791e+02, // 446
            -2.292302695075002e+03, // 447
            -3.622283849912229e+03, // 448
             5.545890838161800e+03, // 449
            -7.346959344022218e+01, // 450
             9.829637982416704e+02, // 451
             3.804321224152274e+04, // 452
            -2.176509103399673e+03, // 453
            -1.373353620096858e+04, // 454
             1.686390491997744e+03, // 455
             3.483493547745592e+02, // 456
            -1.298626950780250e+03, // 457
            -1.681451781526103e+02, // 458
            -1.189296019041048e+02, // 459
             4.200155943722316e+01, // 460
             4.341571786922372e+01, // 461
            -2.188517501118219e+02, // 462
             2.121108249566929e+04, // 463
            -9.565719315508304e+03, // 464
            -6.098365077844886e+02, // 465
             2.097056205446420e+03, // 466
            -8.489724142581247e+02, // 467
             5.033362931530211e+02, // 468
             2.429608763134458e+02, // 469
            -3.667490954625398e+02, // 470
            -2.617352643286002e+03, // 471
            -9.306685642884400e+03, // 472
             2.370590925580604e+03, // 473
            -3.559420375475313e+03, // 474
            -7.277521846595417e+03, // 475
            -2.244832232014482e+03, // 476
             2.260234774842315e+03, // 477
            -6.274212172072643e+03, // 478
            -9.215825613201890e+02, // 479
            -4.989004572223592e+02, // 480
             1.741858456477927e+02, // 481
            -1.160075178375311e+03, // 482
            -9.400990569532114e+02, // 483
            -9.696315585297850e+00, // 484
            -1.637472129295930e+02, // 485
             1.413712229789958e+02, // 486
            -1.109209761475542e+04, // 487
             2.157800071414900e+03, // 488
            -6.539936154902435e+02, // 489
             5.393976987575603e+02, // 490
             1.968033276759944e+02, // 491
             1.590819955293487e+03, // 492
            -1.212175950236348e+03, // 493
            -1.650386902706824e-06, // 494
            -2.643462475923458e-04, // 495
            -4.113605113796155e-05, // 496
            -3.741198332710299e-04, // 497
            -3.715198334549276e-04, // 498
            -1.632737677410850e-05, // 499
            -3.987377387757902e-06, // 500
            -1.761137141241524e-04, // 501
            -9.914303011576292e-05, // 502
            -1.862981694367422e-04, // 503
            -5.035474625128394e-05, // 504
            -6.629617792617209e-06, // 505
            -1.937470679137384e-04, // 506
            -1.225167464502880e-04, // 507
            -1.092962686977728e+02, // 508
            -6.224149442053655e+01, // 509
            -6.161839090650924e+01, // 510
            -5.285313616783958e+01, // 511
            -2.970752766758935e+01, // 512
            -7.144450795015135e+01, // 513
            -6.963509480074067e+01, // 514
            -1.481868779149695e+01, // 515
            -1.533679850235433e+01, // 516
            -1.431130294022796e+01, // 517
            -5.619652453077328e+01, // 518
            -4.389396182793271e+02, // 519
            -2.652877883284536e+02, // 520
            -1.218557869992880e+02, // 521
            -8.811981701596235e+01, // 522
            -9.154583049199185e+01, // 523
            -3.998347001300385e+01, // 524
            -1.840013409430393e+02, // 525
            -3.450102445165191e+02, // 526
            -1.068811185169583e+02, // 527
            -6.620062265560004e+01, // 528
            -2.470033029696525e+02, // 529
            -2.762479597306197e+02, // 530
            -5.176036704085237e+01, // 531
            -4.900046395689041e+01, // 532
            -6.002087042726620e+01, // 533
            -9.757490199842037e-01, // 534
            -1.332878154974073e+01, // 535
            -1.425937366583738e+01, // 536
            -9.294383203759272e+00, // 537
            -2.863667195077436e+01, // 538
            -1.939377498104878e+01, // 539
            -2.051381764552866e+01, // 540
            -3.173952002899775e-01, // 541
            -5.347333401149026e-01, // 542
            -9.191321329974949e+00, // 543
            -3.226737242994218e+00, // 544
            -6.146635253600727e+00, // 545
            -1.189952091230173e+01, // 546
            -7.674569672124886e+00, // 547
            -6.531080631248710e+00, // 548
            -5.575913715344621e-01, // 549
            -5.634182372442671e-02, // 550
            -8.063524370205091e+01, // 551
            -1.236948224457790e+02, // 552
            -1.237226358438334e+02, // 553
            -6.043976974748367e+01, // 554
            -6.040060613798361e+01, // 555
            -3.549762928244599e+02, // 556
            -2.381328073949817e+02, // 557
            -1.506931116462274e+01, // 558
            -8.168843874552788e+00, // 559
            -4.023272878106351e+01, // 560
            -2.609687618650519e+01, // 561
            -1.343561607807488e+02, // 562
            -5.273267591546286e+01, // 563
            -7.686711109644862e+01, // 564
            -8.756697937689792e+01, // 565
            -5.954758446894918e+01, // 566
            -7.600463750307802e+01, // 567
            -8.588218410476001e+00, // 568
            -3.946800347848968e+00, // 569
            -8.076600228996968e+01, // 570
            -8.838204157219698e+00, // 571
            -1.681893442016062e+02, // 572
            -3.640356202427138e+02, // 573
            -5.733769001790155e+01, // 574
            -2.749883805739195e+02, // 575
            -3.383143376970242e+02, // 576
            -2.398736367452322e+01, // 577
            -6.652541384762047e+00, // 578
            -1.914289354863525e+02, // 579
            -9.281453312273020e+01, // 580
             3.576253161647714e+01, // 581
            -3.749702621025083e+02, // 582
            -3.981451986610081e+00, // 583
            -7.251560227285367e+01, // 584
            -7.436647783995555e+01, // 585
            -1.945465310311596e+02, // 586
            -1.947254665886421e+02, // 587
            -2.548983278421492e+01, // 588
            -3.754646621888252e+00, // 589
            -1.792281701657630e+02, // 590
            -4.272758847766827e+01, // 591
            -4.298254366764640e+01, // 592
            -1.007872844182871e+02, // 593
             1.758302253687546e+01, // 594
            -1.279556265788884e-03, // 595
            -7.321941199571792e-01, // 596
            -1.062887123245411e-01, // 597
            -1.557381618023398e-01, // 598
            -9.867802099210783e-01, // 599
            -4.861464054781284e-02, // 600
            -1.391882397413306e-02, // 601
            -3.672135834583049e-01, // 602
            -1.652818526306331e-01, // 603
            -3.564378310404542e-01, // 604
            -1.283267304652878e-01, // 605
             5.948725574362179e+01, // 606
            -6.819483522417243e+02, // 607
            -2.281312896502192e+02, // 608
            -1.333045858859413e+01, // 609
            -2.731014151208421e+02, // 610
            -9.122967717153301e+01, // 611
            -9.833769363805354e+02, // 612
            -4.623553553229247e+01, // 613
            -1.550560665555867e+01, // 614
            -9.365303783662371e+00, // 615
            -4.376050367018066e+02, // 616
            -2.131158689915967e+02, // 617
            -2.632983725728384e+02, // 618
             1.378048486670689e+02, // 619
            -2.647069267784153e-01, // 620
             9.064105594100600e+01, // 621
             5.993626022589184e+00, // 622
            -4.589358657659879e+02, // 623
            -3.334656954737374e+00, // 624
            -2.220717488075887e+00, // 625
            -2.025663999558159e+02, // 626
            -2.495624306727513e+02, // 627
            -2.473645836322015e+02, // 628
            -3.110919504525041e+01, // 629
            -2.322660013059232e+00, // 630
            -2.325262670931445e+00, // 631
            -2.188146710763127e+02, // 632
            -1.088855692257085e+02, // 633
            -1.421634938251912e+02, // 634
             5.084540279625390e+01, // 635
            -1.930127119593827e-01, // 636
             7.404182256345584e+01, // 637
             3.063098545904542e+00, // 638
            -2.425909959037336e-07, // 639
            -1.225717936027410e-04, // 640
            -1.318639201361358e-04, // 641
            -5.737174178579663e-05, // 642
            -3.406508339455144e-04, // 643
             1.179786854679678e-06, // 644
            -7.900679051874066e-06, // 645
            -1.254914947107649e-04, // 646
            -6.208069890758255e-05, // 647
            -9.029693779242402e-05, // 648
             1.353317166284869e-05, // 649
             3.533162898059275e-07, // 650
            -1.644572953711933e-06, // 651
            -1.757683904138514e-05, // 652
            -3.596213881729316e-06, // 653
             2.670828589746304e-06, // 654
            -1.993401547543046e-04, // 655
            -3.531048861562808e-05, // 656
             3.691577377212448e-06, // 657
            -3.896767997494557e-05, // 658
            -2.017211149389125e-04, // 659
            -2.072843080852975e-04, // 660
            -2.238893439994730e-05, // 661
            -9.985578955046659e-06, // 662
            -1.829829624648793e-06, // 663
            -1.294626202909322e-04, // 664
            -6.704239476761458e-05, // 665
            -1.041269104144666e-04, // 666
            -3.256009888863223e-06, // 667
            -3.279253551357196e-06, // 668
             6.317390219159811e-06, // 669
             2.738548567896358e-06, // 670
             5.231728731149465e-07, // 671
            -4.684294848529236e-07, // 672
            -1.980943953606623e-06, // 673
             2.719303648129534e-06, // 674
            -3.681547201573096e-07}; // 675

    m_k_AC =  2.394631289047430e-01; // A^(-1))
    m_k_AD =  1.018306573860110e+00; // A^(-1))
    m_k_AX =  7.033396692322010e-01; // A^(-1))
    m_k_BC =  2.758604520993028e+00; // A^(-1))
    m_k_BD =  7.790763042892922e-01; // A^(-1))
    m_k_BX =  1.044248767446673e+00; // A^(-1))
    m_k_intra_BB =  6.999849023695601e+00; // A^(-1))
    m_k_intra_AB =  5.147471324674024e-01; // A^(-1))
    m_k_intra_DD =  4.426281078500250e+00; // A^(-1))
    m_k_intra_XX =  1.572484257951561e+00; // A^(-1))
    m_k_intra_CD =  1.076724950107807e+00; // A^(-1))
    m_k_intra_CX =  4.475980711535284e+00; // A^(-1))
    m_k_intra_DX =  6.589086262933553e+00; // A^(-1))
    m_r2i =  7.000000000000000e+00; // A
    m_r2f =  8.000000000000000e+00; // A

    } // if mon1 == "h2o" && mon2  == "pf6-"


}

//----------------------------------------------------------------------------//

double x2b_A1B6_C1D2X2_v1x::f_switch(const double& r, double& g) const
{
    if (r > m_r2f) {
        g = 0.0;
        return 0.0;
    } else if (r > m_r2i) {
        const double t1 = M_PI/(m_r2f - m_r2i);
        const double x = (r - m_r2i)*t1;
        g = - std::sin(x)*t1/2.0;
        return (1.0 + std::cos(x))/2.0;
    } else {
        g = 0.0;
        return 1.0;
    }
}

//----------------------------------------------------------------------------//

double x2b_A1B6_C1D2X2_v1x::eval(const double* xyz1, const double* xyz2, const size_t ndim) const
{

    std::vector<double> energies(ndim,0.0);

    for (size_t j = 0; j < ndim; j++) {
        double mon1[21];
        double mon2[9];

        std::copy(xyz1 + j * 21, xyz1 + (j+1) * 21, mon1);
        std::copy(xyz2 + j * 9, xyz2 + (j+1) * 9, mon2);

        // Right now it assumes 1st atom of each monomer
        const double d12[3] = {mon1[0] -  mon2[0],
                               mon1[1] -  mon2[1],
                               mon1[2] -  mon2[2]};
    
        const double r12sq = d12[0]*d12[0] + d12[1]*d12[1] + d12[2]*d12[2];
        const double r12 = std::sqrt(r12sq);
    
        if (r12 > m_r2f)
            continue;
    
        double xcrd[30]; // coordinates of real sites ONLY
    
        std::copy(mon1, mon1 + 21, xcrd);
        std::copy(mon2, mon2 + 9, xcrd + 21);
        
        double v[66];
        
        double sw = 0.0;
        double gsw = 0.0;
    
        const double* A_1_a= xcrd + 0;
        const double* B_1_a= xcrd + 3;
        const double* B_2_a= xcrd + 6;
        const double* B_3_a= xcrd + 9;
        const double* B_4_a= xcrd + 12;
        const double* B_5_a= xcrd + 15;
        const double* B_6_a= xcrd + 18;


        const double* C_1_b= xcrd + 21;
        const double* D_1_b= xcrd + 24;
        const double* D_2_b= xcrd + 27;

        double X_1_b[3];
        double X_2_b[3];


        // vsites virt;
        double w12 =     -9.721486914088159e-02;  //from MBpol
        double w13 =     -9.721486914088159e-02;
        double wcross =   9.859272078406150e-02;

        monomer m;
        
        m.setup(C_1_b, w12, wcross,
                 X_1_b, X_2_b);
                        
        variable vr[66];
    
        v[0]  = vr[0].v_exp(m_k_intra_BB, B_1_a, B_2_a);
        v[1]  = vr[1].v_exp(m_k_intra_BB, B_1_a, B_3_a);
        v[2]  = vr[2].v_exp(m_k_intra_BB, B_1_a, B_4_a);
        v[3]  = vr[3].v_exp(m_k_intra_BB, B_1_a, B_5_a);
        v[4]  = vr[4].v_exp(m_k_intra_BB, B_1_a, B_6_a);
        v[5]  = vr[5].v_exp(m_k_intra_BB, B_2_a, B_3_a);
        v[6]  = vr[6].v_exp(m_k_intra_BB, B_2_a, B_4_a);
        v[7]  = vr[7].v_exp(m_k_intra_BB, B_2_a, B_5_a);
        v[8]  = vr[8].v_exp(m_k_intra_BB, B_2_a, B_6_a);
        v[9]  = vr[9].v_exp(m_k_intra_BB, B_3_a, B_4_a);
        v[10]  = vr[10].v_exp(m_k_intra_BB, B_3_a, B_5_a);
        v[11]  = vr[11].v_exp(m_k_intra_BB, B_3_a, B_6_a);
        v[12]  = vr[12].v_exp(m_k_intra_BB, B_4_a, B_5_a);
        v[13]  = vr[13].v_exp(m_k_intra_BB, B_4_a, B_6_a);
        v[14]  = vr[14].v_exp(m_k_intra_BB, B_5_a, B_6_a);
        v[15]  = vr[15].v_exp(m_k_intra_AB, A_1_a, B_1_a);
        v[16]  = vr[16].v_exp(m_k_intra_AB, A_1_a, B_2_a);
        v[17]  = vr[17].v_exp(m_k_intra_AB, A_1_a, B_3_a);
        v[18]  = vr[18].v_exp(m_k_intra_AB, A_1_a, B_4_a);
        v[19]  = vr[19].v_exp(m_k_intra_AB, A_1_a, B_5_a);
        v[20]  = vr[20].v_exp(m_k_intra_AB, A_1_a, B_6_a);
        v[21]  = vr[21].v_exp(m_k_intra_DD, D_1_b, D_2_b);
        v[22]  = vr[22].v_exp(m_k_intra_XX, X_1_b, X_2_b);
        v[23]  = vr[23].v_exp(m_k_intra_CD, C_1_b, D_1_b);
        v[24]  = vr[24].v_exp(m_k_intra_CD, C_1_b, D_2_b);
        v[25]  = vr[25].v_exp(m_k_intra_CX, C_1_b, X_1_b);
        v[26]  = vr[26].v_exp(m_k_intra_CX, C_1_b, X_2_b);
        v[27]  = vr[27].v_exp(m_k_intra_DX, D_1_b, X_1_b);
        v[28]  = vr[28].v_exp(m_k_intra_DX, D_1_b, X_2_b);
        v[29]  = vr[29].v_exp(m_k_intra_DX, D_2_b, X_1_b);
        v[30]  = vr[30].v_exp(m_k_intra_DX, D_2_b, X_2_b);
        v[31]  = vr[31].v_exp(m_k_AC, A_1_a, C_1_b);
        v[32]  = vr[32].v_exp(m_k_AD, A_1_a, D_1_b);
        v[33]  = vr[33].v_exp(m_k_AD, A_1_a, D_2_b);
        v[34]  = vr[34].v_coul(m_k_AX, A_1_a, X_1_b);
        v[35]  = vr[35].v_coul(m_k_AX, A_1_a, X_2_b);
        v[36]  = vr[36].v_exp(m_k_BC, B_1_a, C_1_b);
        v[37]  = vr[37].v_exp(m_k_BC, B_2_a, C_1_b);
        v[38]  = vr[38].v_exp(m_k_BC, B_3_a, C_1_b);
        v[39]  = vr[39].v_exp(m_k_BC, B_4_a, C_1_b);
        v[40]  = vr[40].v_exp(m_k_BC, B_5_a, C_1_b);
        v[41]  = vr[41].v_exp(m_k_BC, B_6_a, C_1_b);
        v[42]  = vr[42].v_exp(m_k_BD, B_1_a, D_1_b);
        v[43]  = vr[43].v_exp(m_k_BD, B_1_a, D_2_b);
        v[44]  = vr[44].v_exp(m_k_BD, B_2_a, D_1_b);
        v[45]  = vr[45].v_exp(m_k_BD, B_2_a, D_2_b);
        v[46]  = vr[46].v_exp(m_k_BD, B_3_a, D_1_b);
        v[47]  = vr[47].v_exp(m_k_BD, B_3_a, D_2_b);
        v[48]  = vr[48].v_exp(m_k_BD, B_4_a, D_1_b);
        v[49]  = vr[49].v_exp(m_k_BD, B_4_a, D_2_b);
        v[50]  = vr[50].v_exp(m_k_BD, B_5_a, D_1_b);
        v[51]  = vr[51].v_exp(m_k_BD, B_5_a, D_2_b);
        v[52]  = vr[52].v_exp(m_k_BD, B_6_a, D_1_b);
        v[53]  = vr[53].v_exp(m_k_BD, B_6_a, D_2_b);
        v[54]  = vr[54].v_coul(m_k_BX, B_1_a, X_1_b);
        v[55]  = vr[55].v_coul(m_k_BX, B_1_a, X_2_b);
        v[56]  = vr[56].v_coul(m_k_BX, B_2_a, X_1_b);
        v[57]  = vr[57].v_coul(m_k_BX, B_2_a, X_2_b);
        v[58]  = vr[58].v_coul(m_k_BX, B_3_a, X_1_b);
        v[59]  = vr[59].v_coul(m_k_BX, B_3_a, X_2_b);
        v[60]  = vr[60].v_coul(m_k_BX, B_4_a, X_1_b);
        v[61]  = vr[61].v_coul(m_k_BX, B_4_a, X_2_b);
        v[62]  = vr[62].v_coul(m_k_BX, B_5_a, X_1_b);
        v[63]  = vr[63].v_coul(m_k_BX, B_5_a, X_2_b);
        v[64]  = vr[64].v_coul(m_k_BX, B_6_a, X_1_b);
        v[65]  = vr[65].v_coul(m_k_BX, B_6_a, X_2_b);
     
    
        sw = f_switch(r12, gsw);
        
        energies[j] = sw*polynomial::eval(coefficients.data(), v);
    }

    double energy = 0.0;
    for (size_t i = 0; i < ndim; i++) {
      energy += energies[i];
    }

    return energy;
    
}

double x2b_A1B6_C1D2X2_v1x::eval(const double* xyz1, const double* xyz2, 
                double * grad1, double * grad2, const size_t ndim) const
{

    std::vector<double> energies(ndim,0.0);

    for (size_t j = 0; j < ndim; j++) {
        double mon1[21];
        double mon2[9];

        std::copy(xyz1 + j * 21, xyz1 + (j+1) * 21, mon1);
        std::copy(xyz2 + j * 9, xyz2 + (j+1) * 9, mon2);

        // Right now it assumes 1st atom of each monomer
        const double d12[3] = {mon1[0] -  mon2[0],
                               mon1[1] -  mon2[1],
                               mon1[2] -  mon2[2]};
    
        const double r12sq = d12[0]*d12[0] + d12[1]*d12[1] + d12[2]*d12[2];
        const double r12 = std::sqrt(r12sq);
    
        if (r12 > m_r2f)
            continue;
    
        double xcrd[30]; // coordinates of real sites ONLY
    
        std::copy(mon1, mon1 + 21, xcrd);
        std::copy(mon2, mon2 + 9, xcrd + 21);
        
        double v[66];
        
        double sw = 0.0;
        double gsw = 0.0;
    
        const double* A_1_a= xcrd + 0;
        const double* B_1_a= xcrd + 3;
        const double* B_2_a= xcrd + 6;
        const double* B_3_a= xcrd + 9;
        const double* B_4_a= xcrd + 12;
        const double* B_5_a= xcrd + 15;
        const double* B_6_a= xcrd + 18;


        const double* C_1_b= xcrd + 21;
        const double* D_1_b= xcrd + 24;
        const double* D_2_b= xcrd + 27;

        double X_1_b[3];
        double X_2_b[3];


        //vsites virt;
        double w12 =     -9.721486914088159e-02;  //from MBpol
        double w13 =     -9.721486914088159e-02;
        double wcross =   9.859272078406150e-02;

        monomer m;
        
        m.setup(C_1_b, w12, wcross, 
                 X_1_b, X_2_b);
                        
        variable vr[66];
    
        v[0]  = vr[0].v_exp(m_k_intra_BB, B_1_a, B_2_a);
        v[1]  = vr[1].v_exp(m_k_intra_BB, B_1_a, B_3_a);
        v[2]  = vr[2].v_exp(m_k_intra_BB, B_1_a, B_4_a);
        v[3]  = vr[3].v_exp(m_k_intra_BB, B_1_a, B_5_a);
        v[4]  = vr[4].v_exp(m_k_intra_BB, B_1_a, B_6_a);
        v[5]  = vr[5].v_exp(m_k_intra_BB, B_2_a, B_3_a);
        v[6]  = vr[6].v_exp(m_k_intra_BB, B_2_a, B_4_a);
        v[7]  = vr[7].v_exp(m_k_intra_BB, B_2_a, B_5_a);
        v[8]  = vr[8].v_exp(m_k_intra_BB, B_2_a, B_6_a);
        v[9]  = vr[9].v_exp(m_k_intra_BB, B_3_a, B_4_a);
        v[10]  = vr[10].v_exp(m_k_intra_BB, B_3_a, B_5_a);
        v[11]  = vr[11].v_exp(m_k_intra_BB, B_3_a, B_6_a);
        v[12]  = vr[12].v_exp(m_k_intra_BB, B_4_a, B_5_a);
        v[13]  = vr[13].v_exp(m_k_intra_BB, B_4_a, B_6_a);
        v[14]  = vr[14].v_exp(m_k_intra_BB, B_5_a, B_6_a);
        v[15]  = vr[15].v_exp(m_k_intra_AB, A_1_a, B_1_a);
        v[16]  = vr[16].v_exp(m_k_intra_AB, A_1_a, B_2_a);
        v[17]  = vr[17].v_exp(m_k_intra_AB, A_1_a, B_3_a);
        v[18]  = vr[18].v_exp(m_k_intra_AB, A_1_a, B_4_a);
        v[19]  = vr[19].v_exp(m_k_intra_AB, A_1_a, B_5_a);
        v[20]  = vr[20].v_exp(m_k_intra_AB, A_1_a, B_6_a);
        v[21]  = vr[21].v_exp(m_k_intra_DD, D_1_b, D_2_b);
        v[22]  = vr[22].v_exp(m_k_intra_XX, X_1_b, X_2_b);
        v[23]  = vr[23].v_exp(m_k_intra_CD, C_1_b, D_1_b);
        v[24]  = vr[24].v_exp(m_k_intra_CD, C_1_b, D_2_b);
        v[25]  = vr[25].v_exp(m_k_intra_CX, C_1_b, X_1_b);
        v[26]  = vr[26].v_exp(m_k_intra_CX, C_1_b, X_2_b);
        v[27]  = vr[27].v_exp(m_k_intra_DX, D_1_b, X_1_b);
        v[28]  = vr[28].v_exp(m_k_intra_DX, D_1_b, X_2_b);
        v[29]  = vr[29].v_exp(m_k_intra_DX, D_2_b, X_1_b);
        v[30]  = vr[30].v_exp(m_k_intra_DX, D_2_b, X_2_b);
        v[31]  = vr[31].v_exp(m_k_AC, A_1_a, C_1_b);
        v[32]  = vr[32].v_exp(m_k_AD, A_1_a, D_1_b);
        v[33]  = vr[33].v_exp(m_k_AD, A_1_a, D_2_b);
        v[34]  = vr[34].v_coul(m_k_AX, A_1_a, X_1_b);
        v[35]  = vr[35].v_coul(m_k_AX, A_1_a, X_2_b);
        v[36]  = vr[36].v_exp(m_k_BC, B_1_a, C_1_b);
        v[37]  = vr[37].v_exp(m_k_BC, B_2_a, C_1_b);
        v[38]  = vr[38].v_exp(m_k_BC, B_3_a, C_1_b);
        v[39]  = vr[39].v_exp(m_k_BC, B_4_a, C_1_b);
        v[40]  = vr[40].v_exp(m_k_BC, B_5_a, C_1_b);
        v[41]  = vr[41].v_exp(m_k_BC, B_6_a, C_1_b);
        v[42]  = vr[42].v_exp(m_k_BD, B_1_a, D_1_b);
        v[43]  = vr[43].v_exp(m_k_BD, B_1_a, D_2_b);
        v[44]  = vr[44].v_exp(m_k_BD, B_2_a, D_1_b);
        v[45]  = vr[45].v_exp(m_k_BD, B_2_a, D_2_b);
        v[46]  = vr[46].v_exp(m_k_BD, B_3_a, D_1_b);
        v[47]  = vr[47].v_exp(m_k_BD, B_3_a, D_2_b);
        v[48]  = vr[48].v_exp(m_k_BD, B_4_a, D_1_b);
        v[49]  = vr[49].v_exp(m_k_BD, B_4_a, D_2_b);
        v[50]  = vr[50].v_exp(m_k_BD, B_5_a, D_1_b);
        v[51]  = vr[51].v_exp(m_k_BD, B_5_a, D_2_b);
        v[52]  = vr[52].v_exp(m_k_BD, B_6_a, D_1_b);
        v[53]  = vr[53].v_exp(m_k_BD, B_6_a, D_2_b);
        v[54]  = vr[54].v_coul(m_k_BX, B_1_a, X_1_b);
        v[55]  = vr[55].v_coul(m_k_BX, B_1_a, X_2_b);
        v[56]  = vr[56].v_coul(m_k_BX, B_2_a, X_1_b);
        v[57]  = vr[57].v_coul(m_k_BX, B_2_a, X_2_b);
        v[58]  = vr[58].v_coul(m_k_BX, B_3_a, X_1_b);
        v[59]  = vr[59].v_coul(m_k_BX, B_3_a, X_2_b);
        v[60]  = vr[60].v_coul(m_k_BX, B_4_a, X_1_b);
        v[61]  = vr[61].v_coul(m_k_BX, B_4_a, X_2_b);
        v[62]  = vr[62].v_coul(m_k_BX, B_5_a, X_1_b);
        v[63]  = vr[63].v_coul(m_k_BX, B_5_a, X_2_b);
        v[64]  = vr[64].v_coul(m_k_BX, B_6_a, X_1_b);
        v[65]  = vr[65].v_coul(m_k_BX, B_6_a, X_2_b);
     
    
        double g[66];

        // the switch
        sw = f_switch(r12, gsw);
        
        energies[j] = polynomial::eval(coefficients.data(), v, g);
        
        double xgrd[36];
        std::fill(xgrd, xgrd + 36, 0.0);

        double* A_1_a_g= xgrd + 0;
        double* B_1_a_g= xgrd + 3;
        double* B_2_a_g= xgrd + 6;
        double* B_3_a_g= xgrd + 9;
        double* B_4_a_g= xgrd + 12;
        double* B_5_a_g= xgrd + 15;
        double* B_6_a_g= xgrd + 18;

        double* C_1_b_g= xgrd + 21;
        double* D_1_b_g= xgrd + 24;
        double* D_2_b_g= xgrd + 27;


        double* X_1_b_g= xgrd + 30;
        double* X_2_b_g= xgrd + 33;

        vr[0].grads(g[0], B_1_a_g, B_2_a_g, B_1_a, B_2_a);
        vr[1].grads(g[1], B_1_a_g, B_3_a_g, B_1_a, B_3_a);
        vr[2].grads(g[2], B_1_a_g, B_4_a_g, B_1_a, B_4_a);
        vr[3].grads(g[3], B_1_a_g, B_5_a_g, B_1_a, B_5_a);
        vr[4].grads(g[4], B_1_a_g, B_6_a_g, B_1_a, B_6_a);
        vr[5].grads(g[5], B_2_a_g, B_3_a_g, B_2_a, B_3_a);
        vr[6].grads(g[6], B_2_a_g, B_4_a_g, B_2_a, B_4_a);
        vr[7].grads(g[7], B_2_a_g, B_5_a_g, B_2_a, B_5_a);
        vr[8].grads(g[8], B_2_a_g, B_6_a_g, B_2_a, B_6_a);
        vr[9].grads(g[9], B_3_a_g, B_4_a_g, B_3_a, B_4_a);
        vr[10].grads(g[10], B_3_a_g, B_5_a_g, B_3_a, B_5_a);
        vr[11].grads(g[11], B_3_a_g, B_6_a_g, B_3_a, B_6_a);
        vr[12].grads(g[12], B_4_a_g, B_5_a_g, B_4_a, B_5_a);
        vr[13].grads(g[13], B_4_a_g, B_6_a_g, B_4_a, B_6_a);
        vr[14].grads(g[14], B_5_a_g, B_6_a_g, B_5_a, B_6_a);
        vr[15].grads(g[15], A_1_a_g, B_1_a_g, A_1_a, B_1_a);
        vr[16].grads(g[16], A_1_a_g, B_2_a_g, A_1_a, B_2_a);
        vr[17].grads(g[17], A_1_a_g, B_3_a_g, A_1_a, B_3_a);
        vr[18].grads(g[18], A_1_a_g, B_4_a_g, A_1_a, B_4_a);
        vr[19].grads(g[19], A_1_a_g, B_5_a_g, A_1_a, B_5_a);
        vr[20].grads(g[20], A_1_a_g, B_6_a_g, A_1_a, B_6_a);
        vr[21].grads(g[21], D_1_b_g, D_2_b_g, D_1_b, D_2_b);
        vr[22].grads(g[22], X_1_b_g, X_2_b_g, X_1_b, X_2_b);
        vr[23].grads(g[23], C_1_b_g, D_1_b_g, C_1_b, D_1_b);
        vr[24].grads(g[24], C_1_b_g, D_2_b_g, C_1_b, D_2_b);
        vr[25].grads(g[25], C_1_b_g, X_1_b_g, C_1_b, X_1_b);
        vr[26].grads(g[26], C_1_b_g, X_2_b_g, C_1_b, X_2_b);
        vr[27].grads(g[27], D_1_b_g, X_1_b_g, D_1_b, X_1_b);
        vr[28].grads(g[28], D_1_b_g, X_2_b_g, D_1_b, X_2_b);
        vr[29].grads(g[29], D_2_b_g, X_1_b_g, D_2_b, X_1_b);
        vr[30].grads(g[30], D_2_b_g, X_2_b_g, D_2_b, X_2_b);
        vr[31].grads(g[31], A_1_a_g, C_1_b_g, A_1_a, C_1_b);
        vr[32].grads(g[32], A_1_a_g, D_1_b_g, A_1_a, D_1_b);
        vr[33].grads(g[33], A_1_a_g, D_2_b_g, A_1_a, D_2_b);
        vr[34].grads(g[34], A_1_a_g, X_1_b_g, A_1_a, X_1_b);
        vr[35].grads(g[35], A_1_a_g, X_2_b_g, A_1_a, X_2_b);
        vr[36].grads(g[36], B_1_a_g, C_1_b_g, B_1_a, C_1_b);
        vr[37].grads(g[37], B_2_a_g, C_1_b_g, B_2_a, C_1_b);
        vr[38].grads(g[38], B_3_a_g, C_1_b_g, B_3_a, C_1_b);
        vr[39].grads(g[39], B_4_a_g, C_1_b_g, B_4_a, C_1_b);
        vr[40].grads(g[40], B_5_a_g, C_1_b_g, B_5_a, C_1_b);
        vr[41].grads(g[41], B_6_a_g, C_1_b_g, B_6_a, C_1_b);
        vr[42].grads(g[42], B_1_a_g, D_1_b_g, B_1_a, D_1_b);
        vr[43].grads(g[43], B_1_a_g, D_2_b_g, B_1_a, D_2_b);
        vr[44].grads(g[44], B_2_a_g, D_1_b_g, B_2_a, D_1_b);
        vr[45].grads(g[45], B_2_a_g, D_2_b_g, B_2_a, D_2_b);
        vr[46].grads(g[46], B_3_a_g, D_1_b_g, B_3_a, D_1_b);
        vr[47].grads(g[47], B_3_a_g, D_2_b_g, B_3_a, D_2_b);
        vr[48].grads(g[48], B_4_a_g, D_1_b_g, B_4_a, D_1_b);
        vr[49].grads(g[49], B_4_a_g, D_2_b_g, B_4_a, D_2_b);
        vr[50].grads(g[50], B_5_a_g, D_1_b_g, B_5_a, D_1_b);
        vr[51].grads(g[51], B_5_a_g, D_2_b_g, B_5_a, D_2_b);
        vr[52].grads(g[52], B_6_a_g, D_1_b_g, B_6_a, D_1_b);
        vr[53].grads(g[53], B_6_a_g, D_2_b_g, B_6_a, D_2_b);
        vr[54].grads(g[54], B_1_a_g, X_1_b_g, B_1_a, X_1_b);
        vr[55].grads(g[55], B_1_a_g, X_2_b_g, B_1_a, X_2_b);
        vr[56].grads(g[56], B_2_a_g, X_1_b_g, B_2_a, X_1_b);
        vr[57].grads(g[57], B_2_a_g, X_2_b_g, B_2_a, X_2_b);
        vr[58].grads(g[58], B_3_a_g, X_1_b_g, B_3_a, X_1_b);
        vr[59].grads(g[59], B_3_a_g, X_2_b_g, B_3_a, X_2_b);
        vr[60].grads(g[60], B_4_a_g, X_1_b_g, B_4_a, X_1_b);
        vr[61].grads(g[61], B_4_a_g, X_2_b_g, B_4_a, X_2_b);
        vr[62].grads(g[62], B_5_a_g, X_1_b_g, B_5_a, X_1_b);
        vr[63].grads(g[63], B_5_a_g, X_2_b_g, B_5_a, X_2_b);
        vr[64].grads(g[64], B_6_a_g, X_1_b_g, B_6_a, X_1_b);
        vr[65].grads(g[65], B_6_a_g, X_2_b_g, B_6_a, X_2_b);


    // ##DEFINE HERE## the redistribution of the gradients
    

        m.grads(X_1_b_g, X_2_b_g, 
                 w12, wcross, C_1_b_g);

    
        for (int i = 0; i < 21; ++i) {
            grad1[i + j*21] += sw*xgrd[i];
        }

        for (int i = 0; i < 9; ++i) {
            grad2[i + j*9] += sw*xgrd[i + 21];
        }

        // gradient of the switch

        gsw *= energies[j]/r12;
        energies[j] *= sw;
        for (int i = 0; i < 3; ++i) {
            const double d = gsw*d12[i];
            grad1[i + j*21] += d;
            grad2[i + j*9] -= d;
        }

    }

    double energy = 0.0;
    for (size_t i = 0; i < ndim; i++) {
      energy += energies[i];
    }

    return energy;
}

} // namespace x2b_A1B6_C1D2X2_deg3

////////////////////////////////////////////////////////////////////////////////
